<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[默哀。]]></title>
    <url>%2Fcnm%2F</url>
    <content type="text"><![CDATA[$$\rm\color{red}{ITAIYO——ITAIYO——}$$]]></content>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[517coding 题解合集]]></title>
    <url>%2F517coding%2F</url>
    <content type="text"><![CDATA[写个合集，加深一下自己的理解。 $517$ 的题切起来真的是有一种奇妙的快感。 $T3960$题意给定一个长度为 $N$ 的整数序列以及整数 $S$ 。求最短的连续子序列的长度使得这个连续子序列的和大于等于 $S$ 。如果找不着，输出 $0$ 。 $1\le N \le 10^{5}$ 题解使用双指针。 代码12345678910111213141516171819202122232425262728293031323334#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;int n, s;int sum[N];int main()&#123; scanf("%d%d", &amp;n, &amp;s); for (int i = 1; i &lt;= n; i ++) &#123; int x; scanf("%d", &amp;x); sum[i] = sum[i - 1] + x; &#125; if (sum[n] &lt; s) &#123; printf("0"); return 0; &#125; int l = 1, r = 1, ans = n; while (sum[r] &lt; s) r ++; while (r &lt;= n) &#123; while (sum[r] - sum[l] &gt;= s) l ++; ans = std::min(ans, r - l + 1); r ++; &#125; printf("%d", ans); return 0;&#125; $T3970$题意给定长度为 $N$ 整数序列，要求计算有多少区间，它里面数字的异或之和=相加之和。 $1\le N \le 2 \cdot 10^{5}$ 题解发现异或之和=相加之和的要求是这些数的二进制的1位互不相同，进而推出一个序列满足要求的前提是其任意子序列满足要求。 于是继续双指针。 代码1234567891011121314151617181920212223242526#include &lt;bits/stdc++.h&gt;typedef long long ll;const int N = 2e5 + 5;int n;ll a[N];ll s1[N], s2[N];ll ans;int main()&#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i ++) scanf("%lld", &amp;a[i]), s1[i] = s1[i - 1] + a[i], s2[i] = s2[i - 1] ^ a[i]; int l = 1, r = 1; while (r &lt;= n) &#123; while (s1[r] - s1[l - 1] != (s2[r] ^ s2[l - 1])) l ++; ans += r - l + 1; // 此处加上的是以 r 为右边界的方案 r ++; &#125; printf("%lld", ans); return 0;&#125; $T3980$题意给定 $n$ 个整数, 从中选出若干个数字（每个数字最多选一次），使得它们的和取余 $m$ 最大，求最大的余数。 $1 \le n \le 35,1 \le m \le 10^9$ 题解使用折半搜索其特征为 $O(2^n)$ 会爆，但是 $O(2^{\frac{n}{2}})$ 不会爆，而且左右两边可以以某种方式合并。 我们枚举左右两半所有情况，注意到如果两边的两种方案加起来大于 $m$ ，那么一定不是最优的。正规的说，如果有 $a,b &lt; m$ ，那么 $a + b - m &lt; \min(a,b)$ 所以对于左半边的每一种方案，我们二分右半边与其加起来小于 $m$ 的最大值的方案，并用其更新答案。 太优美了！ 代码12345678910111213141516171819202122232425262728293031#include &lt;bits/stdc++.h&gt;const int N = 35 + 5;const int INF = 1 &lt;&lt; 30;int n, m;int a[N];std::vector &lt;int&gt; ans[2];int dfs(int p, int r, int sum, int num)&#123; ans[num].push_back(sum); for (int i = p + 1; i &lt;= r; i ++) dfs(i, r, (sum + a[i]) % m, num);&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;a[i]), a[i] %= m; dfs(0, n / 2, 0, 0); dfs(n / 2, n, 0, 1); std::sort(ans[0].begin(), ans[0].end()); std::sort(ans[1].begin(), ans[1].end()); int res = 0; for (int i = 0; i &lt; ans[0].size(); i ++) res = std::max(res, ans[0][i] + *--std::lower_bound(ans[1].begin(), ans[1].end(), m - ans[0][i])); printf("%d", res); return 0;&#125; $T3990$题意给定一个长度为N的字符串 $S$ 。 每次可以从 $S$ 的开头或者结尾取出一个字符，放到一个 $T$ 字符串的尾部。 输出字典序最小的 $T$ 字符串，每 $80$ 个字符换一行输出。 $1 \le N \le 2000$ 题解$l,r$ 记录当前走到位置，当 $s[l]!=s[r]$ 时明显输出小的那个，否则往里面探同样深度，得到哪边后来最优走哪边。 代码123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;int n;std::string s;int cnt;void print(char c)&#123; putchar(c); cnt ++; if (cnt % 80 == 0) printf("\n");&#125;int main()&#123; scanf("%d", &amp;n); std::cin &gt;&gt; s; int l = 0, r = n - 1; while (l &lt;= r) &#123; bool f = 0; for (int i = 0; 2 * i &lt;= r - l; i ++) // l + i &lt;= r - i &#123; if (s[l + i] &lt; s[r - i]) &#123; f = 0; break; &#125; else if (s[l + i] &gt; s[r - i]) &#123; f = 1; break; &#125; &#125; if (!f) print(s[l ++]); else print(s[r --]); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小技巧锦集]]></title>
    <url>%2Ftips%2F</url>
    <content type="text"><![CDATA[记录一下总结出的一些小技巧。 基础开变量 or 数组 不开 long long 见祖宗，必要时开 unsigned long long 做题时一定要注意数据范围，并考虑每一步计算是否会爆 int 。 数组一定要开到足够大小 一定要结合题目，看清范围，有时需要经过一定计算。 PS: 有的时候 cf 显示 WA 实际上是数组爆了我还因为这个掉过一次分。 输入 尽量少用 cin ， scanf 永远滴神 有的时候输入速度确实能决定结果517天天卡。 输入字符串或单个字符时用 scanf + %s 需要读单个字符尽量都用 %s ,以及避免读回车。 —— 517 初始化 开头定义 INF 的时候若范围为 longlong 记得是 1ll&lt;&lt;60 1ll 非常重要。 memset(a, 0x3f, sizeof a) 具体算法二分 二分的时候 l 与 r 不要作死定成 $\pm$INF 会被卡。嗯。 想二分的时候看清楚有无单调性，单调性是怎样的。 数论相关 题目有取模，计算中有相减的时候，计算时加上一个模数 数学题不要忘记考虑 0 $\text{To be continued}$]]></content>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2020游记]]></title>
    <url>%2FCSP2020%2F</url>
    <content type="text"><![CDATA[高中第一次考信奥，希望不会 $\rm AFO$ 。 初赛$\rm 10.11$初赛进行时，感觉比去年卷子简单一点...或者是我稍微变强了一点点？ 考完之后根据洛咕答案对了一下感觉还行，估分大概 $\rm 88$ ，但是有几道憨批题错了... $\rm 10.17$初赛成绩出来是 $\rm 89$ 所以这差了1分什么鬼啊 现在就是好好去准备复赛了...感觉我复赛可能还不一定比初赛强... $\text{To be continued}$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[真情假爱]]></title>
    <url>%2FLOVE%2F</url>
    <content type="text"><![CDATA[请输入密码证明身份以查看高级机密。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于乐课网]]></title>
    <url>%2Fhow_to_hack_leke%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[破碎的白金色爱恋]]></title>
    <url>%2FBroken_platinum_love%2F</url>
    <content type="text"><![CDATA[我的白金精二几级了？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堕落的天蓝色天使]]></title>
    <url>%2FFallen_blue_angel%2F</url>
    <content type="text"><![CDATA[我本命的英文名？ Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2019游记]]></title>
    <url>%2FCSP2019%2F</url>
    <content type="text"><![CDATA[记录一下自己的爆零历程。 $\rm Day 0$ 出于复习颓废的目的请了一天假。 复习了几个算法，学了一下 $\rm excrt$ 和缩点，发现自己真的好多算法没学过...心态爆炸。 已经没有什么好害怕的了（指爆零毫无疑问）。 希望能考出个令人满意的成绩吧... $\text{TG}$$\rm Day 1$ 进考场之前上了个厕所，看见什么移动厕所以为很高端，直到我看到了外面矗立的一排电话亭一样的东西... 压缩包密码是 $Ren2Zhen0Si1Kao9$ 可是你让我思考我也思考不出来啊。 $\rm T1$ 我：难道不是把k的二进制输出来吗？ $\text{(1 minute later)}$ 我：打扰了。 然后就写了个递归，感觉还不错，瞄了一眼数据范围： $k\le2^{64}$ 我： 然后就想着 $80$ 分滚粗了。 自始至终我都没有想起有个东西叫 $\text{unsigned long long}$ 。 $\rm T2$ 这啥玩意儿？啥玩意儿？ 于是写了个超级无敌暴力 $\rm DFS$ ，大样例直接爆炸，然后心态就没了。 $\rm T3$ 第一眼：不就是把 $1$ 移动到 $1$ 节点点然后删边再移后面几个数吗。 码量略大，打了 $1$ 小时多。 然后我看了一眼样例，发现咋有点不对呢？ 思考了一分钟：我：？ 最后直接输出 $1 \rm ~ n$ 滚粗了，真自闭了。 第一次 $s$ 组就这样退役了。 $\rm Day2$ 根本没抱多少希望进考场。 $\rm T1$ 这尼玛啥啊？ 搁那推了半小时 $\rm DP$ 硬是啥也没推出来... 写个 $\rm DFS$ 就走了。 $\rm T2$ 一眼 $\rm DP$ 题。 看到那个 $(\sum\limits^{k_{j+1}-1}_{i=k_j} a[i])^2$ 就想起了以前看到的斜率优化。 然而没学（悲 所以自闭了， $O(n^3)$ $\rm DP$ 写完就走了。 $T3$ 想到关于每一个点是哪些树的重心，然而完全没思路。 写了个暴力，又写了个链的情况，结果跑大样例跑爆栈了， 然后就自闭了，结果把一个对的写成错的了。 真的退役了啊... 估分：$80+30+0+30+30+30=200$ 实际：$85+45+0+32+36+55=253$ $\rm PJ$$\rm PJ$ 多少还是让我恢复了点自信心... $\rm T1$ ？ $\rm T2$ 一开始直接 $\rm std::queue$ ，后来发现不行。 $\rm STL$ 搞得我连队列都差点不会写... $\rm T3$ 一眼 $\rm DP$ 题。 但是我尼玛不会 $\rm DP$ 啊喂！ 然后调了 $1$ 个多小时，奇迹般的写出来了。 然而是 $O(T^2nm)$ ...希望数据水一点（逃 $\rm T4$ 仔细想了一下发现这样一个传递可以在一个地方反复横跳， 我：这不就跑遍 $\rm BFS$ 最短路吗？ 仔细想下不对，要维护奇最短路和偶最短路，于是写了个 $\rm BFS$ ，然而并不知道有没有正确性... 估分：$100+100+80+100=380$ 实际：$100+100+70+100=370$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树状数组]]></title>
    <url>%2FBIT%2F</url>
    <content type="text"><![CDATA[树状数组是一种非常好打优美的数据结构，适用性十分广泛，而且常数非常小。 （自己花五分钟做的图） 下面蓝色的是我们的原数组，红色的即是我们的 $tree$ 数组。 树状数组的主旨是单点修改，查询前缀和，它的核心是 $\rm lowbit$ 如 $\rm lowbit((111)_2) = (001)_2,\rm lowbit((110)_2) = (010)_2$ 即 $\rm lowbit(7) = 1,\rm lowbit(6) = 2$ 仔细观察原树，不难发现： $$tree[i]=\sum\limits_{j=i-lowbit(i)+1}^i a[j]$$ 于是我们所求的前缀和可以由 $tree$ 数组得出 $$sum[i] = tree[i] + tree[i - lowbit(i)] + tree[(i - lowbit(i)) - lowbit(i - lowbit(i))] ...$$ 举个栗子： $$sum[(111)_2] = tree[(111)_2] + tree[(110)_2] + tree[(100)_2]$$ 这里需要仔细看几遍才能理解。 于是查询前缀和的操作就写好了。 1234567ll query(int p) // 查询前缀和&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 接下来考虑单点修改 当 $a[i]$ 改变的时候，所有包含 $i$ 这个位置的 $tree[j]$ 均要改变。 树状数组是一棵树！ 于是我们只需要找到 $tree[i]$ 的父亲，以及它的父亲的父亲爷爷...逐个更新 而再次仔细观察，我们惊奇的发现： 节点 $i$ 的父亲编号即为 $i + \rm lowbit(i)$ ! 12345void add(int p, ll x) // 单点修改&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125; 单点修改 + 区间查询知道前缀和很容易计算出区间和。 区间 $[l,r]$ 的和即为 $sum[r] - sum[l-1]$ 。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125; 区间修改 + 单点查询这里我们要用到神奇的差分。 新建 $d$ 数组。 $$d[1]=a[1],d[i]=a[i]-a[i-1] (2\le i \le n)$$ 可以得出: $$a[p]=\sum\limits_{i=1}^{p}d[i]$$ 这是啥？不就是前缀和嘛！ 而当区间 $[l,r]$ 全部加上 $x$ 时，我们只需将 $d[l]$ 加上 $x$ ，$d[r + 1]$ 减去 $x$ 就好了。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 区间修改 + 区间查询这是最常用的算法，第一次看到的时候真的惊艳到我了。 $$sum[p]=\sum\limits_{i=1}^p a[i] = \sum\limits_{i=1}^p \sum\limits_{j=1}^i d[j]$$ 仔细看，发现 $d[1]$ 加了 $p$ 次， $d[2]$ 加了 $p-1$ 次， $d[3]$ 加了 $p-2$ 次... 于是可以继续推： $$sum[p]=\sum\limits_{i=1}^p d[i] \times (p - i + 1)$$ $$=(p+1)\times\sum\limits_{i=1}^p d[i] - \sum\limits_{i=1}^p d[i] \times i$$ 于是我们只需要同时维护 $\sum\limits_{i=1}^p d[i]$ 与 $\sum\limits_{i=1}^p d[i] \times i$ 便可以了。 1234567891011121314151617181920212223void add(int p, ll x)&#123; for (int i = p; i &lt;= n; i += (i &amp; -i)) tree1[i] += x, tree2[i] += x * p;&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; for (int i = p; i; i -= (i &amp; -i)) res += (p + 1) * tree1[i] - tree2[i]; return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>树状数组</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站]]></title>
    <url>%2FSome_websites%2F</url>
    <content type="text"><![CDATA[列举一些我常用的网站。 顺便方便下我自己 颓废：$\rm B$站 $\rm generals.io$ $\rm NGA$ $\rm sm.ms$ (图床) $\rm Pixiv$ $\text{OI}$:$\rm loj$ 洛谷 $\rm codeforces$ $\rm OI WIKI$ 奇奇怪怪的东西:图论 几何 函数(或许应归在颓废一类？) 数列(做题找规律神器) $\LaTeX$ 打比赛专用百度翻译]]></content>
      <tags>
        <tag>OI</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loj-2590 NOIP2009 最优贸易]]></title>
    <url>%2Floj-2590%2F</url>
    <content type="text"><![CDATA[题目描述C 国有 $n$ 个大城市和 $m$ 条道路，每条道路连接这 $n$ 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 $m$ 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 $1$ 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 $n$ 个城市的标号从 $1\sim n$ ，阿龙决定从 $1$ 号城市出发，并最终在 $n$ 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 $n$ 个城市。 阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品——水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 假设 C 国有 $5$ 个大城市，城市的编号和道路连接情况如下图，单向箭头表示这条道路为单向通行，双向箭头表示这条道路为双向通行。 假设 $1\sim n$ 号城市的水晶球价格分别为 $4,3,5,6,1$ 。 阿龙可以选择如下一条线路：$1\rightarrow 2 \rightarrow 3 \rightarrow 5$，并在 $2$ 号城市以 $3$ 的价格买入水晶球，在 $3$ 号城市以 $5$ 的价格卖出水晶球，赚取的旅费数为 $2$ 。 阿龙也可以选择如下一条线路 $1\rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 5$，并在第 $1$ 次到达 $5$ 号城市时以 $1$ 的价格买入水晶球，在第 $2$ 次到达 $4$ 号城市时以 $6$ 的价格卖出水晶球，赚取的旅费数为 $5$ 。 现在给出 $n$ 个城市的水晶球价格， $m$ 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式输入第一行包含 $2$ 个正整数 $n$ 和 $m$，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 $n$ 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 $n$ 个城市的商品价格。 接下来 $m$ 行，每行有 $3$ 个正整数， $x,y,z$ ，每两个整数之间用一个空格隔开。如果 $z=1$，表示这条道路是城市 $x$ 到城市 $y$ 之间的单向道路；如果 $z=2$，表示这条道路为城市 $x$ 和城市 $y$ 之间的双向道路。 输出格式输出共 $1$ 行，包含 $1$ 个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 $0$ 。 样例12345675 54 3 5 6 11 2 11 4 12 3 23 5 14 5 2 样例输出15 数据范围与提示输入数据保证 $1$ 号城市可以到达 $n$ 号城市。 对于 $10\%$ 的数据，$n\le 6$； 对于 $30\%$ 的数据，$n\le 100$； 对于 $50\%$ 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市； 对于 $100\%$ 的数据，$1\le n\le 100,000$，$1\le m\le 500,000$，$1\le x, y \le n$，$1\le z\le 2$，各城市水晶球价格 $\le 100$。 loj链接 我已经很久很久很久没有水更过 $blog$ 了...... 最近暑假刚好有点空所以来写点题解。 这道题是一道很经典的分层图题目，虽然我看不出来 以前我可能写过这道题，但也是半懂不懂抄题解的，现在重写了一遍，感觉理解透彻了很多。 我们可以把这张图看成有相同的 $3$ 层，每一层中节点的连接方式如题所述，然后我们将第 $1$ 层的 $i$ 的节点与第 $2$ 层的相应节点连一条单向边，边权为 $-v[i]$ ，相当于从第 $1$ 层走到第 $2$ 层就是买了这个城市的水晶球，并且我们是走不回去的。 而第 $2$ 层与第 $3$ 层的连接同理，但是边权设为 $v[i]$ ，相当于我们卖掉了水晶球赚了 $v[i]$ 。 加上代码应该很容易理解。 12345678910111213141516171819202122for (int i = 1; i &lt;= m; i ++)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125;&#125;for (int i = 1; i &lt;= n; i ++)&#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]);&#125; 最后我们还要注意一个细节：我们是可以不买的，所以我们将每一层的 $n$ 节点都连向我们的最终节点，边权为 $0$, 我这里把 $0$ 号节点设为最终节点。 123add_edge(n, 0, 0);add_edge(2 * n, 0, 0);add_edge(3 * n, 0, 0); 最后我们观察：我们从 $1$ 号节点走到 $0$ 节点的最长路即是我们能获得的最大收益。 最后附上完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;const int M = 5e5 + 5;int n, m;int v[N];struct E&#123; int to, dis, next;&#125; edge[(M * 6) + (N &lt;&lt; 1)];int num_edge, head[N * 3];void add_edge(int from, int to, int dis)&#123; edge[++ num_edge] = (E)&#123;to, dis, head[from]&#125;; head[from] = num_edge;&#125;int dis[N * 3];bool vis[N * 3];struct point&#123; int u; bool friend operator &lt; (point a, point b) &#123; return dis[a.u] &lt; dis[b.u]; &#125;&#125;;std::priority_queue &lt;point&gt; q;void dijkstra(int s) // dijkstra万岁&#123; memset(dis, -127/3, sizeof dis); dis[s] = 0; vis[s] = true; q.push((point)&#123;s&#125;); while (!q.empty()) &#123; int u = q.top().u; q.pop(); vis[u] = false; for (int p = head[u]; p; p = edge[p].next) &#123; int v = edge[p].to, d = edge[p].dis; if (dis[v] &lt; dis[u] + d) &#123; dis[v] = dis[u] + d; if (!vis[v]) q.push((point)&#123;v&#125;), vis[v] = true; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;v[i]); int x, y, z; for (int i = 1; i &lt;= m; i ++) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) &#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]); &#125; add_edge(n, 0, 0); add_edge(2 * n, 0, 0); add_edge(3 * n, 0, 0); dijkstra(1); printf("%d", dis[0]); return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>loj</tag>
        <tag>最短路</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约瑟夫环]]></title>
    <url>%2FJosephus%2F</url>
    <content type="text"><![CDATA[$n$ 个人围成一圈,编号按顺序从 $0$ 到 $n-1$，从第一个人开始报数,数到 $m$ 的人出列,再由下一个人重新从 $1$ 开始报数,数到 $m$ 的人再出圈,……依次类推,直到所有的人都出圈,请输出最后一个出圈的人的编号。 今天稍微学习了一下这个玩意儿，感觉还挺神奇的。 第一种做法：暴力模拟这个我在这就不讲了，很容易就能写出来。 第二种做法：递推我们先考虑第一个出圈的人。 $m &lt; n$ 那么这个人的编号即为 $m - 1$ $m \ge n$ 那么这个人的编号即为 $(m - 1) \bmod n$ 综合一下，第一个出圈的人的编号绝对为 $(m - 1) \bmod n$ 方便起见，我们设 $k - 1 = (m - 1) \bmod n$ 。 于是这个圈就变成了这样： $k \quad k+1 \quad k+2 \quad ... \quad n-2 \quad n-1 \quad 0 \quad 1 \quad 2 \quad ... \quad k-3 \quad k-2$ 这个时候我们将这个圈转换一下，变成: $0 \quad 1 \quad 2 \quad ... \quad n - 3 \quad n - 2$ 可以发现其实这个问题变成了 $n-1$ 个人报数的子问题。 所以我们只要将子问题的答案转换回去，就能知道最后那个人原来的编号。 稍微观察一下如何转换回去: $0 \Rightarrow k$ $1 \Rightarrow k + 1$ $...$ $n - k - 1 \Rightarrow n - 1$ $n - k \Rightarrow 0$ $n - k + 1 \Rightarrow 1$ $...$ $n - 3\Rightarrow k - 3$ $n - 2 \Rightarrow k - 2$ 不难发现 $x$ 转换回去后就变成了 $(x + k) \bmod n$ 我们设 $f[n]$ 表示 $n$ 个人报 $m$ 最后出圈人的编号。 显然，$f[1]=0$ 而根据我们刚才推的公式： $$f[n]=(f[n - 1]+k) \bmod n = (f[n - 1]+m \bmod n) \bmod n = (f[n - 1]+m ) \bmod n$$ 于是就可以愉快的递推了~ 代码1234567int Josephus(int n, int m)&#123; int res = 0; for (int i = 2; i &lt;= n; i ++) res = (res + m) % i; return res;&#125;]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的...第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>OI</tag>
        <tag>dfs</tag>
        <tag>剪枝</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$\rm W$”或“$\rm B}$”。其中“$\rm W}$”表示白格，“$\rm B$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}\text{W}&amp;\text{W}&amp;\text{B}&amp;\text{W}\\\text{B}&amp;\text{B}&amp;\text{W}&amp;\text{B}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{W}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{B}\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f[x]$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f[n-1]$ 那么我们 $f$ 的公式也就出来了。 $$f[n]=2n \times (2n-2) \times (f[n-1] + 2 \times (n-1) \times f[n-2])$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f[n-k]$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\sim n$ 的阶乘逆元有两种方法： 先求出 $1\sim n$ 每个数的逆元，然后正推： $(i!)^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345inv_fac[1] = 1;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; 先求出 $n$ 的阶乘逆元，然后倒推： $(i!)^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\sim n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过...$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出&#39; $No Answer$ &#39;。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 $\rm Rachel·Gardner$ Ray快来打我我爱她 小野寺小咲 ...渣乐 $\rm Ruby Rose$ 我也想要把新月玫瑰Ruby帅炸！ $\rm Weiss Schnee$ 傲娇 $\rm Blake Belladonna$ 我爱猫娘！ $\rm Yang Xiao Long$ 杨姐帅 牧濑红莉栖 $\text{El psy congroo}$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $\rm QAQ$ 雪乃好看 由比滨结衣 团子可爱 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样... $\rm x$毛 $\rm x$毛天下第一 格蕾 $\lceil\mathfrak{Grave} \, \mathfrak{for} \, \mathfrak{you}\rfloor$ 镰刀很戳我xp 蓝毒 蓝毒可可爱爱 $2019.7.17$ 注:我还真是 $\rm sb$ 连这都能列个表而且还不全]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下...这个博客也算是勉强搭成了，花了好久...感谢网上各位大佬帮助 $QAQ$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
