<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的…第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>dfs</tag>
        <tag>剪枝</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! U2FsdGVkX1+WuH63tzCGwDYwnACNIgi5h0mC8HBp8MTz5Pnilr04WWV5a3yf1feNstp//qQvG9aINXRyBu77k8XIi5/owf7k+CBD1BrdeSzoYlBdvzsG+NtYyJHiamjXKi5VJOwEpQnZTV9o2/dQtSz1VV2dcErCdD13bLYqBxKUOYSs8hksxf0XsJ0j4Un5hvLZS0SzSmLHHS+57Boe+nv5k5fH7KoyNTGe9cTGIUMZdx4PLkSC3W7p7AdqxrrhnyfcCJzFJo6JA2+TZKYVMUQzYga368+gGQBi/IIgSWqCqw0A78qBKdoq62SKxtejyZIUrjb0kiC/wk6+gbNuogoSaDg29xjSQSymfJjgQ7cjiSxrgA7bTDjMXASbZN68bRpJz4dLy1KqgRGjWR3rC2QLmZE7ys7sqfe8T1WaGZzi3UVNrTQdzPt7ihSfvNjvFdqS2hapdFv2N+Op1beumY2e6C907I4E313OugBpVYy+4PpMDMk8JRxvla35zs2BZE1pv50u/Y4JEoyF+gjieQCgMukolgBwdkqBQMuV6cT82YP0m1C9ao3DcLmNa88K0WSHzUPeBh312ljIHotfkoIZ/wnOphDDT5VXrC/OcwqL0/G/itDX3QpaiyQBgYXRN4DQkVMEfgNwvMu1GKEEdfYB9R5e3E9r1lWhV88vpZqQuUs8qGVyDbg9qzk44hbtaIWzZpBUYKVHFziaxtQByHyh6mrunHxwMGdoGFGSAG7/d9u0a/ZaJj0uHxYSWS9ZsXRE02jw1cp/A5clP4TfIb83mSf6BXQy9KCt7kWAvvOAw1HGXQeCIE5zNVIglxzM0c2PIg63YPl3dDTw11gnZE/NBYrpEpuNbKHMBeeaoelGqTEGBKIQMF7iJ85kHLcB1uFb1mWUwUSoOGFspfvBw7YF/oWjs3wy3iNV+WDioPcwM6yyL5nW/eg4D/AfdRWUwWOH6cylhT/McShgG4eNREWCPjC4LBnQkwyT5QXu8et8ktLg6FMJf8J5HAMFouF7uE+lqX0/wAe/ozm8PQdToLu9CxKxtaBIFlXvThQ2j+LQvGa1Gch+7e0HDsOHqMHLDMDrWCE4NXxU/COKuaTwRtqIbVtgX/2u7ty0idJwgaymMscRxb06pVB9ArTk0Bjioo3+QsRBCC4aezl1fbSRahWC8RXprpDPsO908yaU3liqHs6WIfhNjJZGW3wEOJAQToSJnHdZjWctQzIly2i2a0Sy5/GqvB0Vur8lFeNPe5OnfVHFZMBhy7z6BipgUSXGB923cGxmj3Jjz2YYRxlMcQ732D4zmSBB9K+3HaoFm0Xp45maBzdDs2OXT396FKPkK6JB7XV+J7Q56GvJt7yEK1HTXPSGSC8uTvznPydf8Rob5wWk6PhpufRPNTCk4/NXWbG7I6gdL3/YFzMjycKO8judVPQWg71M4ytkeCV7dB6h/I9hLxDQtdIsDCBQdAtBLebALfzdycCytNJn6qNLhk3uutPibl7yQRi35nH7k8utR5ZNCTYosL0Erwun6tft25/cvNft2IqmXIdhF9hZwrWsl+89/H8/Lg3oEFZWDP+q+LoghuXbCmiEeQE9LdLmep4LvQvrEOBzE1SuPQDJpOinldWfQOy8nBY/uQWC9AOp8FC4470Q7vJLHf08vLiRgHb6uNHwBQSBEClsXRUgdSlZc4VuucBcM3EeIrk6D+uGzGSJUn/zaNn7mBHMXGNGNVTradY1VBQT36ONXBIERKflp3gvf243G8qzyW75AcAfpxknTtRWSVzGxi2cWkgWKSq920gFU/mfbYEkegcY8yFBB6H3yV/uLis5CkzkWmc8oRPdaxE44R7lI6777FuRkLNr3t48mBwXvPXRdvk8c3pSP5bWMquE+O2D8EkBq6aaHsL013T3aU99TYCM0N5SJdagVuHBhxrTx8JQVnpvln5paThIF7yWrTZ5eQXt1X1s82oYSSLLkPlSTMTT89j42ndi1mDOTVfJbDC0KM9oPGPoR2sf1WiOVTDAZRwCDjYtK+ap6/B0A8kzuTdX9lTwu66/peurEfgEgNyVnNDaW+dr8+Jli2B40rV8+KB2IXN5ZutE58eSsdPoiOaOpDnFsc6N6OIUqU1ScPUqh2MvI9NfCUi7mOUfy/Y+pSQI8W5gxPYJCLhLQsGeOVzd6Tzn5OgUnR8BeWZE40fVvUtaoaR0qi0pKbudRpcXYsoZOMWkJW32tdKE81OjX8/dppH/nsaOQBCq99iGOXMm93nuFCknGW3UVahlJimiorxqLE9u07rQ4UYT2GYOV6DgWMUlrYF4p5+UX+uetd/v8MMAJIhgykW32y8izqd7okBH9EyB0zcFS1NbW6Q7ibHzJJAiedErR8cwIfcVBK23omYBEKnif2Eaz2OklOiZn8ZEM/mQQ+bh0uLvoaB0nK/nz8Y17r1WpBThkdGQp++XXPdGAe1rbyBSXEjDztwD2WaKQ7gK9rVFCYAaYn9xiEtmB5BOs+oL1G4d6J65CnLHDYUK+AteuXnBKDYFFA7ueh+BRGMO3/F5qSFnOoJxCegtgketPiK+cEnmYwBJvhkwJMEnF2cxhaK+SUedMVS/mpx4s5hOm5alKRKNM77Llqxmk4kits6yOIpGknSoZ3zxrssa7EUkwtGnqdn5M9sjTwdGPlt8Tf6xfhF9KO7gl0Bl+r9LzFx7ksvWetmWt54TGbA7Im9ByWoyz+h6RagWg16pvbndBo4JBJ2UwL2j+if5Qkw28N3cjBzCX1eCo479V8Trj5NrmAWuLbKm6k1XkbrbbzuCiSNNo1K8l5u+HR0XCC2m7h5eZwX8LPa+P6fO5iOkWxEeOFBCLJjbM1HlrK1tvihKfEpWHrp7R0zQz1V/VLAbOwGmn/fj8vN1bYkRpG5XI0O56bN8YvKYXbszDwdH1eweiam1L+KjEla1UMy18KGsZRI+zySjtTw3GIQktYZ8hrwj2nnQMPEpjjmji2EUMJHe4g7AlV7HjDsphJk+S0WKKXAooNWQ7Ztni2xlywVeOQ/SBog1THH7EjmxBdX6uHCM31knHG3LDPiTD+MqPWufRk8TgH2Aesu6PnoIXckBlnH88Yob1eCvz3HufQdqlTK1tzi6gSWi7cSs6SBLw6PCuRctDPlYRipvXuqNaLC+seUFy95nFVsUNOI1RlkOkEuLfDXV6dD9ghOipQLvGc5l4mQVx9cT5MK+4ZnRyATBEppZPRRn0nK2l1tz1kh0RQRn7De891RTQ2UCc6bzJtXSrgbljJjKbLacJ1x5YZCOraNulx/HAd9Fn1ocQghUKLwSfFUo6wAHDzP9wjaWFb7rzLMhEnMXeQ10iQFvka0dG+fEwavhJF2iOdQD18lV25zu435fTkPzNLvOuHKqfDoUPEcZgxVmJuJqt3n9JRxwUmi93pxn5qrjN7mSd6SIBL92e/nHB2Zu4JTrMZbqMnEVGtQBTS4wzKtpaBbigBiMBTL6RC2tIM8EMEJDuN/6cQbCyC7WUIi9JltPQ/FZlN5trLZ5+dkGP20T+XLtYHKuV8Pge5gz3w/5xD0TG7SDnJ52t+PGTbDNUCeDhuOYovu7Y1JuEflSaD9TfApekDlDcxH6m4J8Lx1FSxF9mkTokY7T609BpVa/f4bdMCtfMPLapVT0KvbvUV5S/yDicv0dYnrGQOGCuM4okFs5HuvOeQeEXhWmoCoWu6d2oGrA9krOS4UiOvLlnVnzA295rRsgAk7pMCYBQ9Nuy0roAlsQaB1ETtBQLgfkDgTulBv2gD9ZatZh+n27jwG1H4lLz7n5SX0bwZpLpBf7PRfB+An5dPYUmkf69qjpgjoQGyPUdvhVK8gBBnpL9rF3YFb/iP1HT8h3wc+NYgE0tpSMeOj46Oy4w00DKCEGhoZ17jaFCNAuSoBy0Bl6v2njQ7qnj7KiAu23vfz0l0Z7VLk5cUq31S8yiJMEcG2iWDi/o/bGq6YvuecuVSiaRr3crji923r/uvFQRS+uf3/TIzxzmhLQd0qxm4T0X+owZH0TjHemV2pT9W4pgUFYQe1nyswfZLCDqgN7C5X1z6M252BQ4xQU9NxPLLXClS6ZyhKn62f+IjMXXbNBfMFg4Z+vyZS0Duy3B1K34OKsGVsjS3CHc9xC/6xaToDtrcf3qRNYwetIgtVo3rAQcMccp/sZ3PUMKVYohoPwj8mtNiZ8xr0qnhNVO9Qc2JFv/6lR2hBTyc4ncydro/tE2d+PQ//jF7x+zBaZlNdwkSDaPlxexHRywtgakELTrY7Ins6/X73otPAGgRP5Laa6smCVHV/p5JWtdgc8xeffHn3HtTWdX3NhFHZYEOxE5OyepACdejOCzCWH7qFUqQGXc9YiaHP0HgAUdljAvol7er7qhaqdJAEuDrdA4XU71Nr4yXQpf6xGM3Y8k2lpNmPbXW5NA9QvoHGvCNOlZvurWMMtOu/eahWiaxg/3Bicl46ak7ahV7+4YWfWkaYAjiUnlonk1s2QBMI4N8LnRGTtkw+b/h654QeyRdQNaKAmiDFydgaRsDHCssLT5pM/zFIGWEwofgv+mK7dGKriW+beM6cT/0zRyYgPMMx9thG286y9cWZkgSP6a/uJgBdNzhb2CM17r2b8dKPTQ6fbOKJ8yD8En6ngAjh68ES7nYswobCWfEeiV5JIOWQ6kR3kl3WmM3ADfiXlkcy7cclcwcN3m+drLwD69RhaskBfiept0gDbaEK/goqvS5670/HGEyZdkD+xNKDQ9WJRihVyUERpFYtIkGzpO/hTYUQ+I6TrZYWS1aXMKhBeDMiojKJxTYI4eiSmNFzKAY7Bxuan+0rNOSWR+xRvKn1aGfwt/JsxRzSedV8DiMZieJWpZJdalCNaz2S24fC9H1Z+H8HyFgfmQEzLu9lgD9zbtoNsIXUfUPdZO8oXHxWh73lwGPnZUGGOwz9llLh+qxYLc6/hkSjxV4kT/LVgMxWw5MRxksZU7uQqH/Di3G8YKXvdq8YvmNXlKiIdq+fhXN2XvUsA56N/rMltHgVH/1gKKuzhRogpt4UqyZ/lZXgrYnljH2B1R+DcJtWXIVnbt7oJDALOM8xgvWZOowlbmKRwrm3U7SdNdeuOsqf4x5s3/ood++VsAzGI7PlAH61paHAYb6goJLgOumOFHu+4MHRTX6EFWev8H5pYIsagOiD4gM6ZIGIhqrQ8FuN6zzEBmwICd82pbF6FlREWZmDBNJK//wVzfh1HcrAOj/hV30zNqXv1SPp1Dq/RMLAusLnnW2y6d9vQYRAkSfrFxAicXdF90QgGWr1TFun0gFq4Bx7lKTKLOkZMlcA3CARijrLIzcvM86Ld1GoIV+YLojOEVVm1gdI8boT0V7A09PzZlteZ93bivkxWJpTYp+pO33NRN3ng7RFj80Z5whik/vS3Awm/F4vB6HUU94iyJd2/b7sjN8xUzSewXn0IPxWV2EE/B8rqMji+Efk0xPLo6iG8Zf0Azk4slg8ihmThMUnEXBB3DsgE2lBfbPWGWHtIboaipippGSfUX2X+6X7zYzpTR/c0n4pSp5ZOFNYIq4CB+1RlZBgELj0QZ1P/0p36WTXitf6E7EyBqrQEQ9ygrIt8UH2mXosIo5YsxuV/OkYJWHcNnpnRk4ocVT1pTwWEZpU2EpEHWfwtWQaJSN99LHlxTsQid24HV+RqNCd0uXsfoNqiTkIZ0VaDaFmKoWJwFB8Fs02PGYSchADh0Ay1+9vza/NqcGXvkMXzM/gTEnhC7KxOFbVMaalhoSWZviN8RoJaIpJ0AEUXgWzPbtDaTo0rkB8LFaNgWm2mXYt23ikvaPTn9iLMzXNF6GJr170n1V81Y7YOTLbWKZwLhwfx1jw1ir6MSi085Dbz+eppu5HkIwfx1UV281ecw8fw4cfyhIB/WAJU3/7zGbjM9BU7Yqrz7V0sFGoTQoWjdAAaddJzDgPfhhnf42lAWb9/LzbcbJJTXC8kIln8662yDn70J0yJQ6f2ad77i4PkVRvtUFhIRctG7f8qCd9Gg7d5zkKS5HDi1DNcjbj/glHIpX1DvHeOKUQBXpHa3z66leVXV9OFJu9lialGKEe7LnclU30gJjjsVrxS+5kcVnWDm9sGsXNekJqCz4XHcjSS+tApw9PgsF8WVeHHXenxTZ0sp48U+fj+lJNCHNC+oR71XyXmV1AKtvDTybv8DN2PazoQ604+DpVLTAMiGio8QbZ93nH4Ug01smay/Bi5z6H5Gt2spdElFShKvnE/LtYQyamK8SQTdCyxZNTtLv89PWJuvVI8Ct89C/W5UOpTfwdTY3WXg3DhJDUgeWM3YcFG+4pnYD1NuTE18fMSsUMkFjMY1Jy6q4A/OypuSP6tg6k/9QKUKMfRMjcwQv0rX7qaB/g+sUJvPOk3ihdgyl8rZCmMbI7SVrzLqUcbopoWDxIot6q6Nn7FmzHYDKfzvnUwK+Bv4n8bvP4NSDPInqDXujbnOgwsw/PnvV4VXW1j0031oAVKpd0gOlaMgB2b7OFJmAw618074ZDGQ4MgNkfYJy82S+8sdf7ZUjB0jK1YF8GT6A1ggkrHC6WNOgkvxmkIgk0B2xJrDxlTkc8ocXGsi6ENjgCfJa4K3VQNTKrqJ9eI0/CwNXoX8rzW9rP7D9BhfAK7aylm3OEKaqDXyi5lmqrne9/LKFxsim2hui7vUL2shvobbH5DXcT53zvNzuaVRS/Gp5URwfP9fO7dTF5vIV1QCsgym1Gn9vUWL6pipSEOjtJXffHm3YRkmwQaI2TaIeBAJ7z2whwDFEguLIuZWc0zeZjtuFkQJqZPgRi4a6AlSQ2x+Qt0V/SiC98o0aUl8tCs8zvfVX5woMsKwRBXlEXJheLVyuxgXkxlRGIIEqJ/bPppM0/NtH1pXfVESUZEhYYQ/vXBifO6q3TWpxxRqrAvXfzpvXcLRmE/GCLQzTAnIG1DBwzrqvqIlUDgQmAN9ieMQfAb02fpadalejwOsNuFLJa2txjfob96B29IfZMzZX7uWTAWbl9U3Uyt6SGhPNMU6FdXl/rF8NFNR5wYJwyKw/8LZbwG+dt3XbCJGgjsjigLsrqi6xU7NeO+ebesPExYBMQJllg2pdFSpyssJA48kkijRuM0yWqANaS8xu1iyk7xlHPWCuHxi3N2RqoI/+GKpqk55RFcCZKSmjR7lXiRKuk2EsnF9L+d4FLVZdQBZqFt53Nto0jOiAFxPRal7u/lxrrG46damDKlVkV9ygmJ1ldbBWIwqkhz4661mSpAxJhOGwrKRIlNDauExwY6PVTpX2edES5r2gKo9wf1Vm/TbXj4lkxmJWbiAMIJ5jcXZ1+9b6zrdXZi7F3lRkEJEAohE8VXYH9LbHvAun2kZJaBFf6ZYNPnFEDSQF4qxLG774X6SBvqDIdIbW3+vgVWEBnJdCP1ciIJ0faKsZr7OOJCLaeLVXZJb+h63IbZo3ARamgVY/ZC7KPFsHiENdshAtVzIsq2+XcHoemIZ95+lgaFY0VeCOEJyQrIxs8rZwFregtp6v9THSScpwSeU+XXc7jNlJscxhJLqHvSagHDuV0lWuSRYmOVYYnNA5XXsQFWHjxYD9mCQYa89TAg2hPYyOREdOTwv2P0trLv0cfng1ANUKcs5E6gS4GqS9sunQd05VssLtLqE+CbGDII2u3ovvYxoWiZtlvYu427e6j3gdXqqEAet+drdfDM1WcbA+t/nHA2jXBuiMI4jeMhgrHXdjJbnK2euHRaWhmfeyEs60zYhBCu2xgfwYy2AVtzexJHw+emS9bw151B8HwRuWYx4+FolS5Cp8wJrDpOPZ+1d0YDqWuAVaO3tQ7Bu1V/zoSPkowdhFLB+pHpvnIA14ji3ltPBjM3ptqrIFtbOdnqy14d+5OIzEvHwZj7nVYScTbZOKxPv9PiqnkIjvu/31JuUk9yrK8UhuYpxHDDMmc6pGI5m4UbHvwMTMufyILFJKYB8/T7zsjZ/IC/GMwP+owuSXUAQ/Bx5ZLdqySv/z02IowXf+TJdqUWxvO3v2K+PKAdbYoTemlNhLVn5WbPnhO97QSdZaBCnZmHbLG+1Alz2ZJ0krDOm1ZUba4B8/qR2M22iR2+EX3D0dkot5SVHNlNNKpiHxjI/GSj9tF6t760/h+2fvlOzWijyNPIRulmrv1V6APt9Fp+TCFQroe+xtMK+zYv133i1jegPCNUF2Yw7hOpwZgncDMA/6aSNotoNI/AO5M2/ZxbcOatD/lvoz9FkfZON/h8MaPAgZC0jk7pDGLxSV2ney08vqgQ2e5ErgfvIgD6usLbKA4Aca/HgN2L/2uEq8tlg1tvgLExgO0nFAMVlf2IhWu7ZhPjkYk2rrh0Duv4wbhbwAMCaxQOgTX/fX2JY8cLJlZFTHk+x8GUAtT0ftFbRPNkbGL+Q4uE+SodrEgjN5sh39i5Nbb9B6kVzex+tZOAihAG24z1k5vuGaFFTvUof2Io9ucNoTZT2UHjbk6+3999UY6S2jMpgG5X9BdJYeCsHRrjE2CINDwUadH8HTzKuSN4qgEt9VDzJRAXfD+HU/P/v0kTLz4acNdI8/cSpDYxHUdWDc2naOFsbRc8nKkNJ1s5bwjmMYQuJ5p8yhgzbzhUMWK4jpopjgQ26a3oEMMa7rE0OG5P6jBcIKu3dD/Zzb0YNOuUm89FJQEAhnytVbmbkipUPMP5NOYD+urgmt+gcgVJemdI10ROXiHJmZI2MdcTIoDcgkYNO2sVE9nl1UG4P33E8Rmccf6Amwg1haR8ZTJWwn0vbLcZrv3qSjIad09sTX8mzAuxjVHVrqeZN2dLSdliL4OlnEuOJJ/bR5Pa4CCMwwLKXeTkZMWVZ6qc5dvoFBAoSqTNhLYHvjQljCPYeZ6LexzfcG/9TApDcFeSkNSg+x4TRVU1GljbBQAgLa+FH8RYY78cVUPjpsWZ9KX6vXsg8dkY5AL0MImcykNHA62XPsNI5IzzURtFgHiRwVs/Y5Ol9GD8PTtoLrm/z3RFi9S8N5XllUDVKYHpppM4Le00Jpu4kYv3ZQIJs6m3x9pVJkjccMrAhMQVhQBIp5GB9civI+Q51NqRqoCZuwAcD8RuhXQGfTvdIsOnF2lksVvigQzPTtMQujFQ+N/1xrfD+5q+E+0N2ivwd5JfhEBB8jjC4OcLICUKAZEY4id2q0VlnZPvIyUY2RcEs6ioyZMteEwtN/59tvsBr2XoxtvyB8O7yfPxm2hOIw73y4IVN+XQgUh/DV1Jz+8v5t+L/L/VH9pA+OY1Zkjuh8y9GAL6d8M1F+mG+r6KC7TVqOYcg0MmRc79CU2efFWiYjFjKeH7YSukz7xVDlPFvsNISSMRP41gFemYIXp0YdZhK3kHEnaShywmC9BIh7mpBQuh0wBjTi1vTfJ/Q03yLAzqkM/Q8/0BG060ajp1cG1vSbrNjoV3mpqf9BQxQ9nJu8T0xongQTwwciN7a5T/tOwNAaBzs4uKqE/fa4MKjkI0dmoOVA/v6Pja7Av71Zgr9WdMOM97zrEuVDLe7krGVSNnbD3f4Vg+76fnYoBLsAFYWlxOODThdWVfDg/sexZd1Fz9614FHq+Co5uWQr1HryxBYdNix4p5QmAV/QzCwIZOzGm2O8Sx/EUNO73Vi9FlXV6jxJrF58ivn9/Xx56zVa5W22KF9J3foWJ6DltdWJeSy6arSLOU3l4C+eYieOCEq4t4jOspY3PpX/WstJOByO6pHkdmlN25AEWMzsAJAze9k+u9oIPybiqgUVjzdzu6Is1hm99QTODuvseeDrc/G7HhVAI9NaD//7IpB5P356ZOnNWu7p7cUkP/BgE/PvDxYtmkfrkERzdO79EPqE/0sPHTkLdeMoMiL2FUzD1H1pwSSz3Blv1HOfGNu56SjAXvWmy/GBmNC7UWpfT/QZtVAqF/isXr+O4vzFurX7jJ6sCe6MTJSNOjDAiTqtafCOhcQ7yCUfHV2WVxY/Zhy3eO987iag14GU8l0TFkpcilg4QV/e6GyqXQ81BOH8XcGLNgw5BV2XvB3sGk5VWNbIVONbwKRWmuRPtA96Gbr6EGQXbLMdEjgrLf2ANjDCJ4KW9zFALbj7ynSfANwKc2jAWipEtNimelzaTN+RezDdbMLV0yP6XYMXO12/ZgA7BbKhmQY6MbiLpBZl04uHVxOc09Ca39mQs/ZJ5Sh31q5G2v97TE7TWZKNq6n+L71anA9xnifIcoTQ7aaH6dBvv26DPjl/Um+MkOBV9lf3b2OAU9Ut87hsCxy8sRaTHEX8rn6PUCHSadqYo+vODy4OH3s0VSmkkG80AGXOLCHCPwLQms/5e/W1Zg8xAfihIDA2/JMhANdC6O1b7gG3ZhyIH8yPBite3Nso2mh/Yipry5u3V26DR4y7iPPn4nBvlBj2dMEGrjJAU0hMHGs4YFdfU6CixhJEZz1VKOlKJspK5uuBUWHt8kCBi11Y+TC2ra/yZp3fq1cELYE+CYEDVEMRaUd7jCowEqHqCOTsHqOJgXIc5lWorz7FgKZnmF/ZXpw9BAha1WiibnPLK7zvk6adUalu/v/TO8VzL97eL5GajOjuApsYqmgS+6zKz7O8VvHLSPhFDO/xFQGn6s3qR6uX0SKQvW0zq5+mPe4fUXqmWDw9iM+ixTsab0x6m6dhf1uSg51KzGs5Fea+qT4JkMO+BtMDs59txmV5/lHllnjjJ9vaxM86VA/BvQEVsKKgrSm0pukMO43Xl1d8mgkqBMX6B+NhqszCBLLVa46e6rSXTbC5RiDUOOJH02ljKLec8rzxOOd0qNLc1LaRdXFYIIC5zR1kxnf77zURo4PPQxEnVufPfvGeyw+niKeWpvsg9+Md8pahi16AZdppzMtB22NYBoGDHHb/Q8KnMcA41zwqs+ghfl8QvjJLQXbKyOcBurylRclq4tZGlEZVGJkmZn3gzJo1YyngAVzESV6w/b4HogAWtzia17xoN063Wjbb9Uh4OA9Fw03yivp098bZetw8LaKGyENHuntzFk9BWyvMFt9ndCHp5TtT9bhWBJFKkWgXZ9PxCGIZugnSCV0YMpkT8knJi6HuJLucSSwJ866oHB6h+RlGTVZNCm/iLA6Xige+cVKzpozZkSbYwN60fnUQxEsvZzOwtkJJRGgx6lj4sqw8PGNEaQpPySwBvvaRDnZ5OJbLjm37eclMWAyhh2SjijyjNiLVFSqrBZyk4bpuIqP77NzpT0i9dMrzK7Ss6BaZ43R9BXVm4Z7pWxnp5Wl2Sx77SsIqeJEbGv2LLFO0UHR5ApNTxEp+I3RBJ5AtNTcNQfnS4q+wiYp+zwFm3AqDeSCy6Et6cyULfaO1jZoBs5zqLPzA5ATqAYCbi/QjYn+8jNR9lJifFpo4JuJmfjWGC0q4uOqZ0MPobfE+Cs1MpNSxgwJ1ZRoGHt6QA+6xGMq/8Ov70o15Jy3gS2ejlH5u6kp+aK85HId88XwXhyhFqxp3UucbFzZhbWLViPUILQ306Rx3GmZWM/lGl1akryoSYTFwZ9NI8Jqq8G51noAJHxnUkyyZh5qZ0XARA13ENmpzpfEezlYwF17U11bwkGvgqcWUYgLQR77H3vC3OvIpmrL/wKMbx7B0O5AQH0V5eFkDEF8squWWfG9LxAi1Am9F5eSnqcAscoXSr258vyD6QyNBuZrq6vKQwTynuon1fbGTS5M+fetOXVGRqRF5nujmTeZ5RNd5jJsPR7CtH3CImXCyjVXp10jj3jPHdQDjuY/tIjWdbW8DNe5wHRvsMX9PzNsmNfVUo1GG+SODfH8qgtyBtXzzHp+gR0KUJaSJZ1AhefO/fm0X7xe95Sw/B8nehhkfiZbi94C434L0gVZRxO1+uUEg5FyJe1orzWsxr+DvrURZkAf+wsV1CUvPyQNYGos3Has1GFLYSUwoVLs7XvGO8U3NJsDd0clAMGigSBVp7spNyiSWe1XgPDDDTIwo5A6C1VKPjxocCv4c5Yg7iAJMie0GWetBDm47+o9pcptLj9AVPURkG4BHeQSWNtLhtuECYKFT7lfYMsuv2tfezXUQvNAiw6ksrZjXRZoVP6YyqoVsVAP5q/uwwnuquegM52IiZmya+h1Y8LF2EdT+RAV6Ijq/6S+WXv8pGojadqxZ35UN4fCUfVeHZFexyLD7RnbWqp8HF41WlL4TSd7IoQLxWIaCHR1xztKHm2e4JiQxTin5OGxCHx6QF7MDUVFnMzbibQk0niV/K5ICsp6+4v7ct0PhApRbjY7TCWytSGKWm/UYGx+LukF+N/EZkYJpCOT5cX1pL3jjc6eBBHn/1YE8XpFhsdFuJ0bZTeSLopx/k/a8lGw15zOgt+u++upNrlrs1NakXILx4uZ9q8aC+sXtTVwcE9kOOtlzHjbP+IFAUStqCofrlKd7Pdwsz1P7rVrG0TlXZAA8S1+cSTQQ1KwM/iRnCGaDvnb+Y4VIu7vUYcv8O0xvBATstjsU3VUJne+D6xvbzGm3As6mRVcQzb1QPEl2vfWZb4Ny4UiynGinLS2Hzb2IWeg4kddh/rIQkT0YVOWiADnlLNi5he5lTsLJF3BD7T3w/Ydvyo/GiO0/zAMrlxSL9xNbUrNgKae74cAxYCCd8Ct1hYb7T6k7XfwOc/brFusrkd5zPcbL9kFyNfJ6WgYm9NCKopweKomN2TNhfqruCkYnkAdozaw2QG0KgQgx3u28HHVqJoJNiKyMmR6Li/xwyn8rgNPuR63fPe9MH/5+PeFMgQF8BlgFY5Rn3TrvpGLW0pJ0Jcto7+aLdA3S1Wyj9QqJO539sTM69Dcl4t5dH0HxPvsnoqHxwZUavHxJ4wc9XwPv4vVrI4WFEfECe6HNSkTbmB8Adt9+VPpbV3z/a5lHz4+LObL1Xe6Yw44JMxhgrv9hb6JtimK89kUJ8zjC+R46rax+nlPTFysG7v92CCBbjScsjN+xF7P5zbJj5cIpvB5elH9GYI5OWzLbav6V03magzXOzzi0aPFJKq4FrrBZADnDxBn76dVrv0yR3Xtcw+6+1UYOgbM2AL15/hOzHCFV85AilZNpMDCXDsbP9fosSMCBoytYYITBUt9zriyoo16wK4XMgH8IliR6i9YEJzbQrbFQgazDSv6ezqA0F+HHr4B0AmFYcCHwLXv/7zBnHkPEzDKq4QZLTqVI6pIpghoO2hPfdCkotS3sWtS6dn9DfV4YK6qj1w+R9YRwEyeH4w+tphiJaTE1FeH6vd5cuQ3xkFGsdTmEpNtIS6jxFzi9jBu1x3excnRVfUstDVPiPxwo/Mh1wDfvose1pOCANwtklpFV6LLz66scEAxocjwcjKgebXWpBM5qzNwGdg8yhS5XAdXQWIB+Uh27CkkyJkJs6mOXURMYVXE2IecHyjued0ELvLwZXchjeqcdidcDKXPYoHph1skLGcnl+Nnc95KsbXlCK/JmjvcDJ1WyiKr58zuDiaN4irjHtRzYiI6trizqryC3UsUep2X/YPJopXrHAXBjzent5jiXk0xrYcA//bcur1SIlpPTBQqOqzYDv1DRclH/yh+ZZJZ6H4wqBM7kfolHO7nuWPlWWUEmZfX9nch8mZsOF6V42xQhut5XTQCNc+U1mjGil8b7kZyPfOR85U+3PbCTs8EP79iJCVhL6i4HwmFSWswUVaLiPcjlqRxXCV7EsWgWYMkUVLhdW6kmjCZZ0R2MqiMEytsa3zzX5V4K20+w0/X+/Cer5KQSpFXfHGh8ytPA0m94lEyiOk1AR17h7m2sJs5CpOCZ1dUOGdUN1N5kup9cCeXrcXz6pozI74563n9NtUMtlKB8QxHV8/O7LeEc9dsHw/tUxLZ8/4ADx2oRa2kkb8PVT34KbRSCC4zcc/nn3KCG+BnIfSMNcT451oNrpS67FhBJURgkoJGE55U7FEw+Uzxt25YDA1IZq/uCmwpWOWUR8R/Mro+B14wq3iC6BTOFnyKQg66s6jVGuMjrOTWaxOqt3eHq0oPdl211uOgpoRLy8DQxT1XfrNvn6pooSEc2nJ51ZF9mPqgrNB/HF5msHzMWwdM5etE3CJH43n9NLSz+sYdrkItgHzQlG9GkzhqYwC3fSvMxfe/oYRbCyP9QqwdOeW/ol8EF5sIDWFI1L5oGuwWkj1pQN6e37qezqtvB2x5WTlEk01Gg36Y+JxfYzK2Ms7+dn0gSt5APZ8ZiGOax26z95pLQhjFcA8ytR7vR3M0zR3by+rFhM70xm2gQAoFBYamGVSawm5f3A9sgP8KPK4b8NsH8vgCiX5huOeHo5EpuPWOCuDfTOoloSk3pygOEGlA86B0NZUgdrmwbLY98qcbFgvd3dgK18SiPIJhBz+S2YvDbWtaIkeLM6a8vDo0V+yTm1UKSOjnCJzF3P+Iisk2f5lKj47k9zN+ifkx2W3L5UIAgfjPMPTaX1ZFM4ipzH9uxrk0AEkMwmrcgNgeMH2HwcXqy9hr2Wda4IWG4hhSbb3dgvlaVErzMyn3bKaBEJyij6Fe5n/FE79nRaVYykuxvYT/T8xODFqWtrBA/yfj3v0dE5rKB4HnSgZZgleMe/s+EuPA9f3d99NImN2rp5GwMpxN7kq40P58W3UFsQgeNChniaKK1Ad1LA2/NabswsHVIBztDsULe2WewD2Vz2gG6Na3Me/OQRgsKzYgy1nbQ+9eilYi3lSxUmKFivlBaUXa/2w24Qa2Sf+TSXyI+KEGnPek94c1+Qhf+bPKRAJMtftzSkUq/7TGm58nPkBlfFJQ/IgehmjJYChv11m5eG6k+SI3WqP0R9FBGfPZQ9scqaMFV8A+r/wpxrVV7hDSiWqQE3kfHrX53L5JYhTctSt60JCNbs/WJMw2mjLKzI5YJn3T0oS9IPvpT9+GV//rQdYRQmUgMkQwWzVaycTbMtL3ZiKFcgLQxSVhjujeTmcf4570y2ZydEwEY8BeadT8m8l0tDxwa7GnHzVePTWiR2dFObtUYWaCFt51wWycatgFUd/dW+NEUgP06ak4lPiY9L5J2L5TmGT1pMgkk4UItQaHk01OUkeNeWSqaiKe6/zNIFqT4E0bIrtSMHm1vdyp8TUJc9K3xYcdw4Md58rA9CwJ53CbRGNM/yHBZmmkvxFAM/bSeG8D0ecqpo9E4uhc/qF93Gn23olQWJUv+FBxGCobDqlnjpzG5aCw7EuJt3rM+tg9FebUNv+s9i+HCV7am4JVcUd641lgEU1twBbqYZihwJ7r/f4w5tgnSX/6awa4ol35q7rQa6CzLpz+8/O2bqI6ouamg5Fs96MuJCXyaXRHhAAlT5WWnLdAlMtctRouV8aPX3b7ZksQjJeu6zkeBk3Yuuimpx52rblHwilqO3tKzjFVP9wBNrqc7WSDzAcswTsc1X24YF8mvhWKvdi01UoVy50/WoihvL7IjG8vXUow6/eXTlZq7Ydq3jGiYAWdPhwOIK0mQHRJA0IfZCN+W6rVMjq1bFVBd1x8efZfJLZsP0fVyauuO+mHCSQoiXDzdoq0EbyqFlS82J9DHSZOMdogfMA1IGieGTKIs5NGk44iptthV0ROrvRARPq9PlOlI149i+d136fduLfAEtt1msPCUomOQ90lRmXi7pq5Ni8mQfsdU9jhlwuofXV0hRemLw+PE7GxNMvZCqXKmIiJ/TOf9OirPv+4Tp2Xx6Z3YAVWlOhFG+BAel9+mkl4Morq0amhyqFqAKeE5/zdiZC0g4g7Fvu73EhNcpcl0GmjAnGdEnbb8ziESzGNwG8N4wLMf0lqwaYxu43auChq8mG5PTUCqRhxHKpHCmvjMMFgD41uLdWc3fuac5w8TFt9A9UEO0jw0BeAA5o07sCTMF3XTeEGi41BU0jBQpyA/unUh8QHUgtUY2VVeMNB3llcn5BmwVnq43k0DebKF/sJz4QuP780WgAcNiyW108nYBvYGfGXqxucyH5GuAwEm1PZVvlnKJ0RQKDtlvh5Znwfw75nj4KJrnZdI8e7WIZQNZUHJZf9vd41DKZZpaa70K2D6dWnQ3IVsRyquhaJdWMpengZ30qSryemvM8DIwVoHm/p8flbv3/6nNc7yoh6CInxGpFDNeCPpd92vxJyhxoImfOFK+7znxDlQ6SZt9zt2lz4RJ/S8hTNu0CeGFdZU02xinLaHUTfB6GXPYrb/8nzM+SZH/WGpAZXPHYRE5nmTni3o4hNiHx8SCwY7kYtDvw87iIrF/DgKeAG9gmZS55NGAkgVDKRbiPzTuy+v70hZ1MjkgBygdpHZfvYjJ+9mGb+sy5Xqb5HhOVgd/D+FEi3RQunwbqpqSCXe7LnJlCAef1qqp0hEz/Olervr0MTJBeaBB7n3lnplVIgJwL+OqNga5uAdKGN7EJYqgF+uTQm+ByEEoA6jbyesvjnnMy4FISuTwE8HwvT5P8tEPc+Q7yi7h0bfQjauJ1lBLAphT5rZKnTbfbKJSa1Smh10L6vGLWhfNI+B46grAv6PSoYWIUs7EghJHVlIgvad7qx1LJ/dJ2ISCZEVIMycYMNs4Ypzx1kFetfImapOxSGojX+st9f8Ns9/fSx3zn26aVDifaoF2QjUI6It7JcJffNSNn4jtOVVBWW0Cjn9nDLFp0qLqdbNgYK5g3GEDVxZwjn2kCVbXfnT5bfW/Tcb43NWLuCZmGugVnrAINXmgM42Asn44K5PrH9tF0gZJ2aSsdFCXf8Mr+CIMsHlO0JT/p+BAbj0LuINe/BPBoKOZQKte5GuNJTUEbk6BQqB0IsSW92oqDa6KS5Bgvgfadpm4etpupxpF96WeP1wf8GATARRzQJ+kSNRw1QsbTYCaIemSxuqh3yJd9yk89Zg7Mj6veKoE8GDMI/ToJkPaHXs+WMbghhq32z/V5xYVA/E7lkzNBS/C5HhNymah5TVDM94NHnZ5gDTTiwnQZyMdtFkC1zCRhmN7yMRb4BtMHLT/+gF1uTEK4ktCrqbQGYjsMXvGAB0H/yjU2lBEx/JTirEFtzOLDRcbBtCJCPISlAJrVkOhkRJSNrWkQ+87/IIzSccwSZcviOPbmzJKExI06d7cniPPeFRfliCrL2lLaBY+0NomSrSkeFaNsA4vzIHGiPfIqDoW61b+cLlZZxRNCALXXK7h8w2UYRXtzKzlFwTVZTVJKL+DEUNK/h3AkIRYkR+mgLn3LZhPCM8jfTYcJxk/7lfTpDs33694axSaQoODyizqwmoWkK6Ul9UlmUlpxK7n6Eb4lYG8rsMmefG0AmIkJHBKMy8AokWQ8ma1JfXjyWLrjWNn+CWzLiJ8juG5wcE2H1cxf8LoV/YgFZpsGQb/yQIFz2cqwlynox504LyUpY4HGe/YSYSj2BBdbiitJGZz4F8P4URgKulBgUOXcLyRToX+HT05JY1ex9HSOWtKHHmJXDRpM2R0Ya9HVGDuE6kYgInn5Xy9ycuG4brV5Yjg8G7ApU/KO+LXsnviaZAMedAn5l6YqM/YEJyHQ9Zk2y9+N+QuQBNfcT2n6Ez4X1CwkBwsHuiiRZEmoMN+MKx7JyNVOQ8uZdL6HlDiC0Qfbout28S8o00sAQpTPsRDJjINHR5OAvSkFOsNiH200+HNG9N9H4acP3Z2ccWhQr2LU4DrzSTqvnlZQ7Uj34rmjO8dpYpJpg+wkW2Q/XVb991Xgz7vzW6/+zTrGf4Wz+uHLH1HPs25VXhUHriKINdW3GnStnN1LjsraSdjmNl1BVMPudx2XcxUoCfFZIQDaCeRJ3q/P7X3R0z4DSV5cJQbkc96JyPt8XYalWfvXUGWTq04B+0Z6UDyMWE9OI3gokJnlRON1CmcWY0aNfKOlijbC8i+v8xsXAsJNUmrxTcyyC43HT7Q5BOJCS8xxTZDRpmZQ5UTvy+fxFCgjRtTeVlDdc7IWhSTFzKbbn9hAseRpKEjs+OdCYp9hxRBtL7YT+edtuPn2K3OLVvZjGe8TbtCJUqX/iKAM3qe74hLr62KllfvTrENCzY7foT7M/u2XhazF66GNQ+AxEeKn8EYIbTiNvpI6NYt6isc8Wszkga0a9sQTlYzGr06jKIn2QyzGghpXtx99aSsPCoOsnnkSCaEtZj0/hlzbs/wE0yogO3mtUl/b6+ieZI6StZtdPJYqiw7Y6UPAfyNcPZb5pL3SUQ9ymxe+TgiJFhEqeRMordmOT2TQV+guCZir2kI4By6j6KNFxE0pt2d0EwpwXZR9k62571Q8wRDYb8kdQJj19iX0wJ73zOyM10HpuZMpIaQfKXRiYxwhcnwKOlQF/ItkQmKW8kcmjq7dCu4eJeMHkVev591L+0/QsU6FKhremSaJoMTZoNlPTtcyV0pPisGewENDozVmzdn9r8SLSUXpxhSAIe2zr4I9WE6z7pZ+6XpZmfB/GR/c5zaSNjMcdci1LaKroGumFsIVY4ouwOWBk50hyojCf8TRU7plSM13WWO6suty57O60ly105BoLpMK+MBQ5YHCAmkG7hjxDdw5JwqU1hOf4XNgcdJF9c2fLgnzKrhDoL8ReGfbjRTDWMsYvVOmvM2x0fIIED6oRX3Ej8IY34l80/MxC6cLXwyIVlu+7p4Gk8M5FfTAFboNySaoE6d3iijHZfSffXifJbEFhtRH7RIb37cXrqS1+B4B4nKbXFpSI3YLi46s/7Ne2aTVVEO239UyimhtQeTs1UkS3rFyMoKcSMA7GEzbFHvwcPaIR2+d0Dii/cnq2/HXpk0jtNPfm1N8ltB49KvT31jRelzxfOpGfK/95IdIsh+0IGQBJpSK9UuY+nkdlCj1MW8dLxj3HI23LOgLtGSvqOry5eqEsfDF76IxxPcQ+YEtOovY/CfL5MhjoHDHEB66phnDE4A6DzXeH5jDiM7qWTYHjk+/qNSZ2mcQpmiT+UDz0rEI7tn/Cwvq5oj5BsH7RGc6uXzdjJ+lKvWaXRgcK/GBwcnUvryTaTOeZoyimNtGcED/oUpwM+XRAxANZc3H8VQUYWZA4rvROtvxckoJY4vR4PZHsPt/i90NChe3QxioAXDp1WVdtpK+JHz0+RkROjZ1cWOO0qF1gFP97P+2U8EcXhHtGTrt8g08S9J4Z3tRCMHfU4eDWTzfVbcGGtwlC5uqak8XFY2J8I1K2tetsi79ZmpvNlNzo/5LeCaEL0Lc/1NysxYIDiCEZf7Gnm8fJ3PBgWEwx5w0reHaoKQggj0ouu+DzkENFQpv7UV3SJyRuYG4TFX2VNDWxIq7J7TgGvUeX4Tff/4aE+IVkNRGT2GFZjDkmZZma2gnyTzFAnc0oYWOMPannqAceFNd8c9Uy6JnMffgEnuTDIDeoM6KEcqXavNpXjNfLIb1I6g3WSv2dUOL439elc/70i7O+zBKMK95U26QJHQnCV0pTs2pZ8IvIwRxueqNBL0SLHoFM7H4nYoQxwi9yE7maNZAKsRpjnp7ni4/zZoi3JyUzMBypFafSKY9B243Moxphp62wKmr2s6ggA0tioBX0s8W/hVwnbhI5K/0mzfapWJnYSMy2vCB460WR6HrsESSCyL/yFt+st6pd1blvTqBhKdlM4EB8ILE4utPsjKxUFU8Ja75xFo/W9+H907m7tP6QmMOg/Va596Vh/wLpf2Rx2Yb+PrgAA+z6TbkIQVSEIJhytkOfnUDxpOgi2RkQtTt8U4LikAQ0L/v2muOCBVwG7RR3B9Zw7ZacCS64Wh7crQ7pVkUIa7u9AnU2LmKFXDGFge6juQZyPpUjh+jiv2mbusvl1iHtp1hzsWwfK9eQNULfo2uud079CZteQAABM/PMS/+dJ7liVEd44IIBfEJuQSl0DUx86v2cuDNl1dCDtSOAq7iG4ZdM5wryULCsmm/pL0N4efHRD94W/aYK1BloPg65tX++dnALJYWsleQB0OZNxK/l5hWwhKOgitHAkDMQLUlFGX//ZkxEwMDpG/6POrcICaTJH2CAyWRFVIikMrXaWObYNhBx3sXAk897j3QoVj10HmvRa/X3FkawIiybKLImedBp5/uDYz08I3h4XXenLjFrlrE4trLcvu8yy4HXZqQHUM3B6cglC4l8Xyn6iwXj/ehVN9T+iZFdLcMUH1ObcSkIN95UTV2kY9uah9FPdP829LDnvOp2MIi7SZT++wiQrnCDU+HsSvOc9HqHCRQ5ai6cIHM2t6S6/g5Ca70KX7SQENlfl6SCCGw1QB9xQyCNpSuddgV3RD3S5WKf6CZPSBXZAD76w9JGcP0B6kxxHBD6LowaHAjpqZ3sDyoOaYnJMxz5LD8An4UmLClBcwhPe0nm6dslJlFf/yFE8fClMWxGdeaycEufzNjYCfVrR2V3s6v3oU3Rr09M0xmyGKX8O0QdARcGW6jGtjz6Aey3cEpIJHBli8TP/SoUsxIVZskXWE5VqbYLl4E8FULELmJlqM+/eqsiWIV8SZoSBY4P34ezTnFRC7j5H636xeqbdZ4tnY2W3n73LaWcR1ttpcj1SHxaOhSojI98bQacobbgEzIgeo048gIM2PV1cZ+AKStYEvXm5oYmT5E+TFpX+D1vhoh7hZ2+wGUqjvESvOv/gktXsvRBcTi/gMJQ97iyflY1WaSuJOFomreIhpMa2X0+Wh5gkKT0EoxN3/wN2qvZjZgzJh1gTyHzgz93Z+4ddP+WXBqKWj0KV/prZbd74Byoxh2E6kBGHnuxKCb6AuVbOCyp34ZTGlYXrafYC5Wmyg0VJLyIDaWQEMdsrX/IPxHOeF/RMP/5rVsA90bLUKlhM89agLQdI89e488NHVBEy4A4na/3OeJoN5R6hxpJUg2Z8tCthB7aYbDKzmlvoDnXoNVNjUvioFu9uq/AXqMk90c1wsSJcr3zx1jxwOBGZQFS6W5yBrdGTt0FPyUsnwUqgDliocmksAjdPWzMwucuJojPqbzysFbmbxJqygsnW4CmXvUn4uGBau1fZJC1YhJIHxCfuJZcVNPXPEhMp7CdB+0oPlhsHmZhnF4c5j77+W9eISNrIZ3sT9OVKQ6O4JmOgu/BHYT6+17X7p49If+1o1Cbwc+YOuTZlxEgCDKBYl8+CxPdU74wIuaBEzhURCrENBrcPIKRfU4DTFyFHIbXnQ5sD5QzTfcFML3bftLtbPrfGCZYNgYZRnyyybnc4dPWGNOsEExYTvJKM/xuGceedpmyIBDG9KI9CGq06GjLb+D2zsdonh7ELozeECT8XMNfQZLu2RdP29DPgNizhEqZlO43z5hLHRqURn+bMZ1IVnabiaQ5JMs9OvxR7UpZ4yfo14WTeElK1odd2SwWhAW+NxE2DDltc92BZRgxbuxIR5FFi2uH1lLD7Uf20CILqJRv8ATIcFzSlSvhgmCT3juArc5mqeOtmvc+mXK08DjGL8Zi6fY08QaAA7wcFBy4sGAyvPe3BWWE0HmdB6d8h/aHogE8F8MX9XxVj+xFUEG5IDWhfqFVdZJUod9ygV3TyCuibHL9wkC1WVor1xKYkIeMdDaOt16DzOYdpTfmDLh6H7J9ztcpHY0JzJOnaP1BofMeVtBOjSbx61BG1ZAzU77fGRcYCio9xuUjy5YJcQCph7E3rx3PXlty8+Awu4YvQ7lkZ3VEbRnhTphIlmK7zEgjU47gMiSBLtjnTXIpXtG55VuC4vXWRdT]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$W$”或“$B$”。其中“$W$”表示白格，“$B$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}W&amp;W&amp;B&amp;W\\B&amp;B&amp;W&amp;B\\W&amp;B&amp;W&amp;W\\W&amp;B&amp;W&amp;B\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随机动漫图片]]></title>
    <url>%2FRandom_anime_picture%2F</url>
    <content type="text"><![CDATA[无聊的可以来刷一刷 刷出来se图也不能怪我，毕竟是随机的]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f(x)$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f(n-1)$ 那么我们 $f$ 的公式也就出来了。 $$f(n)=2n \times (2n-2) \times (f(n-1) + 2 \times (n-1) \times f(n-2))$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f(n-k)$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)(a\text{与}b$的最大公因数$)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数组对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\text{ ~ }n$ 的阶乘逆元有两种方法： 先求出 $1\text{ ~ }n$ 每个数的逆元，然后正推： $i!^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345for (int i = 1; i &lt;= n; i ++)&#123; inv_fac[i] = inv(i); inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p;&#125; 先求出 $n$ 的阶乘逆元，然后倒推： $i!^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\text{ ~ }n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过…$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出’ $No Answer$ ‘。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>最小生成树</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 血小板 我要太阳我的细胞 御坂美琴 你指尖… $Rachel·Gardner$ Ray快来打我我爱她 小鸟游六花 邪王真眼赛高！ 桐崎千棘 自古金发多傲娇 小野寺小咲 …渣乐 白 白，来跟我玩♂游♂戏吧 休比 休比太太太太太太可爱了 吉普莉尔 我来帮忙按摩吧⁄(⁄⁄•⁄ω⁄•⁄⁄)⁄ $Ruby\;Rose$ 我也想要把新月玫瑰Ruby帅炸！ $Weiss\;Schnee$ 听说直男克傲娇 $Blake\;Belladonna$ 我爱猫娘！ $Yang\;Xiao\;Long$ 杨姐嫁我 筒隐月子 面瘫什么的，斯巴拉西 小豆梓 强制傲娇…真是个神奇的属性 牧濑红莉栖 $El\;psy\;congroo$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $QAQ$ 雪乃太好看了 由比滨结衣 团子真的好可爱 戸塚彩加 但是，是男的。 川崎沙希 蓝发傲娇真好 一色彩羽 喜闻乐见的小妖精 阿斯托尔福 可惜也是个男的 古莉 虽然是个 $baka$ 但是我喜欢图是真的少啊 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样… 夜刀神十香 本子香 $($ 大雾 四糸乃 大哥哥这里有糖吃 五河琴里 你再傲娇试试 $?$ $($ 摘头巾 崇宮真那 又是个重度兄控的妹妹(ﾉﾟ∀ﾟ)ﾉ 时崎狂三 狂三别打我 诱宵美九 百合多好啊 $($ 痴笑 鸢一折纸 折纸大师，受我一拜 八舞耶倶矢 幸运 $E$ $($ 大雾 中野一花 我全都要！ 中野二乃 我全都要！ 中野三玖 我全都要！ 中野四叶 我全都要！ 中野五月 我全都要！ 利姆鲁 利姆鲁对我一心一意 $Saber$ $\color{gold}{吾王剑锋所指}$$\color{gold}{我等心之所向}$]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下…这个博客也算是勉强搭成了，花了好久…感谢网上各位大佬帮助$qwq$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
