<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[青春期の美好幻想]]></title>
    <url>%2Fghs%2F</url>
    <content type="text"><![CDATA[我本命的英文名？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2019游记]]></title>
    <url>%2FCSP2019%2F</url>
    <content type="text"><![CDATA[记录一下自己的爆零历程。 $\text{Day 0}$ 出于复习颓废的目的请了一天假。 复习了几个算法，学了一下 $\text{excrt}$ 和缩点，发现自己真的好多算法没学过…心态爆炸。 已经没有什么好害怕的了（指爆零毫无疑问）。 希望能考出个令人满意的成绩吧… $\text{TG}$$\text{Day 1}$ 进考场之前上了个厕所，看见什么移动厕所以为很高端，直到我看到了外面矗立的一排电话亭一样的东西… 压缩包密码是 $Ren2Zhen0Si1Kao9$ 可是你让我思考我也思考不出来啊。 $\text{T1}$ 我：难道不是把k的二进制输出来吗？ $\text{(1 minute later)}$ 我：打扰了。 然后就写了个递归，感觉还不错，瞄了一眼数据范围： $k\le2^{64}$ 我： 然后就想着 $80$ 分滚粗了。 自始至终我都没有想起有个东西叫 $\text{unsigned long long}$ 。 $\text{T2}$ 这啥玩意儿？啥玩意儿？ 于是写了个超级无敌暴力 $\text{DFS}$ ，大样例直接爆炸，然后心态就没了。 $\text{T3}$ 第一眼：不就是把 $1$ 移动到 $1$ 节点点然后删边再移后面几个数吗。 码量略大，打了 $1$ 小时多。 然后我看了一眼样例，发现咋有点不对呢？ 思考了一分钟：我：？ 最后直接输出 $1 \text{~} n$ 滚粗了，真自闭了。 第一次 $s$ 组就这样退役了。 $\text{Day2}$ 根本没抱多少希望进考场。 $\text{T1}$ 这尼玛啥啊？ 搁那推了半小时 $\text{DP}$ 硬是啥也没推出来… 写个 $\text{DFS}$ 就走了。 $\text{T2}$ 一眼 $\text{DP}$ 题。 看到那个 $(\sum\limits^{k_{j+1}-1}_{i=k_j} a[i])^2$ 就想起了以前看到的斜率优化。 然而没学（悲 所以自闭了， $O(n^3)$ $\text{DP}$ 写完就走了。 $T3$ 想到关于每一个点是哪些树的重心，然而完全没思路。 写了个暴力，又写了个链的情况，结果跑大样例跑爆栈了， 然后就自闭了，结果把一个对的写成错的了。 真的退役了啊… 估分：$80+30+0+30+30+30=200$ 实际：$85+45+0+32+36+55=253$ $\text{PJ}$$\text{PJ}$ 多少还是让我恢复了点自信心… $\text{T1}$ ？ $\text{T2}$ 一开始直接 $\text{std::queue}$ ，后来发现不行。 $\text{STL}$ 搞得我连队列都差点不会写… $\text{T3}$ 一眼 $\text{DP}$ 题。 但是我尼玛不会 $\text{DP}$ 啊喂！ 然后调了 $1$ 个多小时，奇迹般的写出来了。 然而是 $O(T^2nm)$ …希望数据水一点（逃 $\text{T4}$ 仔细想了一下发现这样一个传递可以在一个地方反复横跳， 我：这不就跑遍 $\text{BFS}$ 最短路吗？ 仔细想下不对，要维护奇最短路和偶最短路，于是写了个 $\text{BFS}$ ，然而并不知道有没有正确性… 估分：$100+100+80+100=380$ 实际：$100+100+70+100=370$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树状数组]]></title>
    <url>%2FBIT%2F</url>
    <content type="text"><![CDATA[树状数组是一种非常好打优美的数据结构，适用性十分广泛，而且常数非常小。 （自己花五分钟做的图） 下面蓝色的是我们的原数组，红色的即是我们的 $tree$ 数组。 树状数组的主旨是单点修改，查询前缀和，它的核心是 $\text{lowbit}$ 如 $\text{lowbit}((111)_2) = (001)_2,\text{lowbit}((110)_2) = (010)_2$ 即 $\text{lowbit}(7) = 1,\text{lowbit}(6) = 2$ 仔细观察原树，不难发现： $$tree[i]=\sum\limits_{j=i-lowbit(i)+1}^i a[j]$$ 于是我们所求的前缀和可以由 $tree$ 数组得出 $$sum[i] = tree[i] + tree[i - lowbit(i)] + tree[(i - lowbit(i)) - lowbit(i - lowbit(i))] …$$ 举个栗子： $$sum[(111)_2] = tree[(111)_2] + tree[(110)_2] + tree[(100)_2]$$ 这里需要仔细看几遍才能理解。 于是查询前缀和的操作就写好了。 1234567ll query(int p) // 查询前缀和&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 接下来考虑单点修改 当 $a[i]$ 改变的时候，所有包含 $i$ 这个位置的 $tree[j]$ 均要改变。 树状数组是一棵树！ 于是我们只需要找到 $tree[i]$ 的父亲，以及它的父亲的父亲爷爷…逐个更新 而再次仔细观察，我们惊奇的发现： 节点 $i$ 的父亲编号即为 $i + \text{lowbit}(i)$ ! 12345void add(int p, ll x) // 单点修改&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125; 单点修改 + 区间查询知道前缀和很容易计算出区间和。 区间 $[l,r]$ 的和即为 $sum[r] - sum[l-1]$ 。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125; 区间修改 + 单点查询这里我们要用到神奇的差分。 新建 $d$ 数组。 $$d[1]=a[1],d[i]=a[i]-a[i-1] (2\le i \le n)$$ 可以得出: $$a[p]=\sum\limits_{i=1}^{p}d[i]$$ 这是啥？不就是前缀和嘛！ 而当区间 $[l,r]$ 全部加上 $x$ 时，我们只需将 $d[l]$ 加上 $x$ ，$d[r + 1]$ 减去 $x$ 就好了。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 区间修改 + 区间查询这是最常用的算法，第一次看到的时候真的惊艳到我了。 $$sum[p]=\sum\limits_{i=1}^p a[i] = \sum\limits_{i=1}^p \sum\limits_{j=1}^i d[j]$$ 仔细看，发现 $d[1]$ 加了 $p$ 次， $d[2]$ 加了 $p-1$ 次， $d[3]$ 加了 $p-2$ 次… 于是可以继续推： $$sum[p]=\sum\limits_{i=1}^p d[i] \times (p - i + 1)$$ $$=(p+1)\times\sum\limits_{i=1}^p d[i] - \sum\limits_{i=1}^p d[i] \times i$$ 于是我们只需要同时维护 $\sum\limits_{i=1}^p d[i]$ 与 $\sum\limits_{i=1}^p d[i] \times i$ 便可以了。 1234567891011121314151617181920212223void add(int p, ll x)&#123; for (int i = p; i &lt;= n; i += (i &amp; -i)) tree1[i] += x, tree2[i] += x * p;&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; for (int i = p; i; i -= (i &amp; -i)) res += (p + 1) * tree1[i] - tree2[i]; return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>树状数组</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站]]></title>
    <url>%2FSome_websites%2F</url>
    <content type="text"><![CDATA[列举一些我常用的网站。 顺便方便下我自己 颓废：$\text{B}$ 站 $\text{generals.io}$ $\text{NGA}$ $\text{sm.ms}$ (图床) $\text{OI}$:$\text{loj}$ 洛谷 $\text{codeforces}$ $\text{OI WIKI}$ 奇奇怪怪的东西:图论 几何 函数(或许应归在颓废一类？) 数列(做题找规律神器) $\LaTeX$ 打比赛专用百度翻译]]></content>
      <tags>
        <tag>OI</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loj-2590 NOIP2009 最优贸易]]></title>
    <url>%2Floj-2590%2F</url>
    <content type="text"><![CDATA[题目描述C 国有 $n$ 个大城市和 $m$ 条道路，每条道路连接这 $n$ 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 $m$ 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 $1$ 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 $n$ 个城市的标号从 $1\sim n$ ，阿龙决定从 $1$ 号城市出发，并最终在 $n$ 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 $n$ 个城市。 阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品——水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 假设 C 国有 $5$ 个大城市，城市的编号和道路连接情况如下图，单向箭头表示这条道路为单向通行，双向箭头表示这条道路为双向通行。 假设 $1\sim n$ 号城市的水晶球价格分别为 $4,3,5,6,1$ 。 阿龙可以选择如下一条线路：$1\rightarrow 2 \rightarrow 3 \rightarrow 5$，并在 $2$ 号城市以 $3$ 的价格买入水晶球，在 $3$ 号城市以 $5$ 的价格卖出水晶球，赚取的旅费数为 $2$ 。 阿龙也可以选择如下一条线路 $1\rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 5$，并在第 $1$ 次到达 $5$ 号城市时以 $1$ 的价格买入水晶球，在第 $2$ 次到达 $4$ 号城市时以 $6$ 的价格卖出水晶球，赚取的旅费数为 $5$ 。 现在给出 $n$ 个城市的水晶球价格， $m$ 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式输入第一行包含 $2$ 个正整数 $n$ 和 $m$，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 $n$ 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 $n$ 个城市的商品价格。 接下来 $m$ 行，每行有 $3$ 个正整数， $x,y,z$ ，每两个整数之间用一个空格隔开。如果 $z=1$，表示这条道路是城市 $x$ 到城市 $y$ 之间的单向道路；如果 $z=2$，表示这条道路为城市 $x$ 和城市 $y$ 之间的双向道路。 输出格式输出共 $1$ 行，包含 $1$ 个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 $0$ 。 样例12345675 54 3 5 6 11 2 11 4 12 3 23 5 14 5 2 样例输出15 数据范围与提示输入数据保证 $1$ 号城市可以到达 $n$ 号城市。 对于 $10\%$ 的数据，$n\le 6$； 对于 $30\%$ 的数据，$n\le 100$； 对于 $50\%$ 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市； 对于 $100\%$ 的数据，$1\le n\le 100,000$，$1\le m\le 500,000$，$1\le x, y \le n$，$1\le z\le 2$，各城市水晶球价格 $\le 100$。 loj链接 我已经很久很久很久没有水更过 $blog$ 了…… 最近暑假刚好有点空所以来写点题解。 这道题是一道很经典的分层图题目，虽然我看不出来 以前我可能写过这道题，但也是半懂不懂抄题解的，现在重写了一遍，感觉理解透彻了很多。 我们可以把这张图看成有相同的 $3$ 层，每一层中节点的连接方式如题所述，然后我们将第 $1$ 层的 $i$ 的节点与第 $2$ 层的相应节点连一条单向边，边权为 $-v[i]$ ，相当于从第 $1$ 层走到第 $2$ 层就是买了这个城市的水晶球，并且我们是走不回去的。 而第 $2$ 层与第 $3$ 层的连接同理，但是边权设为 $v[i]$ ，相当于我们卖掉了水晶球赚了 $v[i]$ 。 加上代码应该很容易理解。 12345678910111213141516171819202122for (int i = 1; i &lt;= m; i ++)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125;&#125;for (int i = 1; i &lt;= n; i ++)&#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]);&#125; 最后我们还要注意一个细节：我们是可以不买的，所以我们将每一层的 $n$ 节点都连向我们的最终节点，边权为 $0$, 我这里把 $0$ 号节点设为最终节点。 123add_edge(n, 0, 0);add_edge(2 * n, 0, 0);add_edge(3 * n, 0, 0); 最后我们观察：我们从 $1$ 号节点走到 $0$ 节点的最长路即是我们能获得的最大收益。 最后附上完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;const int M = 5e5 + 5;int n, m;int v[N];struct E&#123; int to, dis, next;&#125; edge[(M * 6) + (N &lt;&lt; 1)];int num_edge, head[N * 3];void add_edge(int from, int to, int dis)&#123; edge[++ num_edge] = (E)&#123;to, dis, head[from]&#125;; head[from] = num_edge;&#125;int dis[N * 3];bool vis[N * 3];struct point&#123; int u; bool friend operator &lt; (point a, point b) &#123; return dis[a.u] &lt; dis[b.u]; &#125;&#125;;std::priority_queue &lt;point&gt; q;void dijkstra(int s) // dijkstra万岁&#123; memset(dis, -127/3, sizeof dis); dis[s] = 0; vis[s] = true; q.push((point)&#123;s&#125;); while (!q.empty()) &#123; int u = q.top().u; q.pop(); vis[u] = false; for (int p = head[u]; p; p = edge[p].next) &#123; int v = edge[p].to, d = edge[p].dis; if (dis[v] &lt; dis[u] + d) &#123; dis[v] = dis[u] + d; if (!vis[v]) q.push((point)&#123;v&#125;), vis[v] = true; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;v[i]); int x, y, z; for (int i = 1; i &lt;= m; i ++) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) &#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]); &#125; add_edge(n, 0, 0); add_edge(2 * n, 0, 0); add_edge(3 * n, 0, 0); dijkstra(1); printf("%d", dis[0]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>OI</tag>
        <tag>loj</tag>
        <tag>最短路</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约瑟夫环]]></title>
    <url>%2FJosephus%2F</url>
    <content type="text"><![CDATA[$n$ 个人围成一圈,编号按顺序从 $0$ 到 $n-1$，从第一个人开始报数,数到 $m$ 的人出列,再由下一个人重新从 $1$ 开始报数,数到 $m$ 的人再出圈,……依次类推,直到所有的人都出圈,请输出最后一个出圈的人的编号。 今天稍微学习了一下这个玩意儿，感觉还挺神奇的。 第一种做法：暴力模拟这个我在这就不讲了，很容易就能写出来。 第二种做法：递推我们先考虑第一个出圈的人。 $m &lt; n$ 那么这个人的编号即为 $m - 1$ $m \ge n$ 那么这个人的编号即为 $(m - 1) \bmod n$ 综合一下，第一个出圈的人的编号绝对为 $(m - 1) \bmod n$ 方便起见，我们设 $k - 1 = (m - 1) \bmod n$ 。 于是这个圈就变成了这样： $k \quad k+1 \quad k+2 \quad … \quad n-2 \quad n-1 \quad 0 \quad 1 \quad 2 \quad … \quad k-3 \quad k-2$ 这个时候我们将这个圈转换一下，变成: $0 \quad 1 \quad 2 \quad … \quad n - 3 \quad n - 2$ 可以发现其实这个问题变成了 $n-1$ 个人报数的子问题。 所以我们只要将子问题的答案转换回去，就能知道最后那个人原来的编号。 稍微观察一下如何转换回去: $0 \Rightarrow k$ $1 \Rightarrow k + 1$ $…$ $n - k - 1 \Rightarrow n - 1$ $n - k \Rightarrow 0$ $n - k + 1 \Rightarrow 1$ $…$ $n - 3\Rightarrow k - 3$ $n - 2 \Rightarrow k - 2$ 不难发现 $x$ 转换回去后就变成了 $(x + k) \bmod n$ 我们设 $f[n]$ 表示 $n$ 个人报 $m$ 最后出圈人的编号。 显然，$f[1]=0$ 而根据我们刚才推的公式： $$f[n]=(f[n - 1]+k) \bmod n = (f[n - 1]+m \bmod n) \bmod n = (f[n - 1]+m ) \bmod n$$ 于是就可以愉快的递推了~ 代码1234567int Josephus(int n, int m)&#123; int res = 0; for (int i = 2; i &lt;= n; i ++) res = (res + m) % i; return res;&#125;]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的…第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>dfs</tag>
        <tag>剪枝</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$\text{W}$”或“$\text{B}$”。其中“$\text{W}$”表示白格，“$\text{B}$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}\text{W}&amp;\text{W}&amp;\text{B}&amp;\text{W}\\\text{B}&amp;\text{B}&amp;\text{W}&amp;\text{B}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{W}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{B}\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>暴力</tag>
        <tag>二维前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随机动漫图片]]></title>
    <url>%2FRandom_anime_picture%2F</url>
    <content type="text"><![CDATA[无聊的可以来刷一刷 刷出来se图也不能怪我，毕竟是随机的]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f[x]$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f[n-1]$ 那么我们 $f$ 的公式也就出来了。 $$f[n]=2n \times (2n-2) \times (f[n-1] + 2 \times (n-1) \times f[n-2])$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f[n-k]$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)(a\text{与}b$的最大公因数$)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\sim n$ 的阶乘逆元有两种方法： 先求出 $1\sim n$ 每个数的逆元，然后正推： $(i!)^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345inv_fac[1] = 1;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; 先求出 $n$ 的阶乘逆元，然后倒推： $(i!)^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\text{ ~ }n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过…$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出’ $No Answer$ ‘。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 御坂美琴 你指尖… $\text{Rachel·Gardner}$ Ray快来打我我爱她 小鸟游六花 邪王真眼赛高！ 桐崎千棘 自古金发多傲娇 小野寺小咲 …渣乐 休比 休比太太太太太太可爱了 $\text{Ruby Rose}$ 我也想要把新月玫瑰Ruby帅炸！ $\text{Weiss Schnee}$ 听说直男克傲娇 $\text{Blake Belladonna}$ 我爱猫娘！ $\text{Yang Xiao Long}$ 杨姐嫁我 筒隐月子 面瘫什么的 斯巴拉西 牧濑红莉栖 $\text{El psy congroo}$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $\text{QAQ}$ 雪乃太好看了 由比滨结衣 团子真的好可爱 戸塚彩加 但是，是男的。 川崎沙希 蓝发傲娇真好 一色彩羽 喜闻乐见的小妖精 古莉 虽然是个 $baka$ 但是我喜欢图是真的少啊 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样… 四糸乃 大哥哥这里有糖吃 鸢一折纸 折纸大师，受我一拜 八舞耶倶矢 幸运 $text{E }($ 大雾 利姆鲁 利姆鲁对我一心一意 $\text{x}$毛 $\text{x}$毛天下第一 格蕾 $\lceil\mathfrak{Grave}\text{ }\mathfrak{for}\text{ }\mathfrak{you}\rfloor$ 镰刀很戳我xp呢 蓝毒 蓝毒可可爱爱 $2019.7.17$ 注:我还真是 $sb$ 连这都能列个表而且还不全]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下…这个博客也算是勉强搭成了，花了好久…感谢网上各位大佬帮助 $QAQ$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
