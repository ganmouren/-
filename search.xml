<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CSP2020游记]]></title>
    <url>%2FCSP2020%2F</url>
    <content type="text"><![CDATA[高中第一次考信奥，希望别爆$\rm QAQ$ $\rm 10.11$初赛进行时，感觉比去年卷子简单一点...或者是我稍微变强了一点点？ 考完之后根据洛咕答案对了一下感觉还行，估分大概 $\rm 88$ ，但是有几道憨批题错了... $\rm 10.17$初赛成绩出来是 $\rm 89$ ，现在就是好好去准备复赛了...感觉我复赛可能还不一定比初赛强... To be continued]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[真情假爱]]></title>
    <url>%2FLOVE%2F</url>
    <content type="text"><![CDATA[请输入密码证明身份以查看高级机密。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于乐课网]]></title>
    <url>%2Fhow_to_hack_leke%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! U2FsdGVkX19vHjmsNSWA9u94a3ePSxQUcD7spTpM13NEdDe/nEDKOHJrsa1G0Qg+6OiAPpFZMN7UTaRMgfG79XFkOU3//pKbav/PcF/6pmWnv3mQiQS6Wqk1pQkPvTn5ZV7VHIASjwLJ+e9EdpyNJPbvAPAypgtrMBlgaa06HbW0VVuEBUngV7S0II4DiWmDDkcSvDcW5Jn70KgKHsJICS2/WA3WjYRw0qiESmZIghuIfLTujnL6tUobY1cxBZVGzPjPfUxXoISlc3EJeQgbr3Kp9xv+TvA2U+t0MHV3YjveM2bavsXzIPb/Lreknf3RCCJZqayOas0FoPtZgCxKAiEsNyK/Xj00AYhcjLOKNwNwxdSQ8ynLuo1Bqf96st3TJ7q3YFuUg4Mk7P4almoR3NUM8AZZiZne+x1NUFppsT2WqPGTqyiEHXuyFqv9auwzFz7nO1ZlXDzpkLD3XAHdY++oGR1x13pVXwJfxYTuBm7LWsEeYH9426K8/KkPmCQQy9UDMyhkVPUqFluKRw/X+wx7yEiIKkeYvU6pHtRyVxcfxNs18rR78VAPTxfKeSti0RwdKkCCPLABn/IBYv4mJgc7TJqIB2rYxTeoPsc3t/wMGZXtO0dvjZx5C1CWyuFiIxFsRp31CP9bIf1CVYyBjcgy7S4egjcm5xduXem09uGfJn+QVqujVYK6XFQ9p6Pn0KePrXF1H3qa7nIJNDYOsPMH3GKXIx9ZeD3RWdG4j33mSJV37D1b22oBRxfc6+cvsQUpaT5YLsJ0MKaNUXW6q3AyysQ6B5Hf+H33Em48oROrgACosird9lHMnlGXcr2Y4cFyWX2q96qplJoCvX2j1+VxqXoA3jeH1jJEGm9PyzH4hNtDq9np+qr1wWgc8JU/iAiaPxhh8GMSbmCa7kBt+321uaHKl2eDAVpi4gmmjpgWd66iUIoU7TJrd6uTq2jxfZJo0DaLBmIQ7uERjMZiPw1Hjxh1c/BQFGRkXGgRu7Cf9cd9g0ej4LdGa9yL81OqT0yQNwkBoCixqFGhzlw38sNVN1WwV1B3d9trmR29OsSPzR9zoeswJPikbD/FaFKV5MgL2ICV6w5oTp16/LwQUs+I3m2Z8rXsPuBC4oR1l68xfbFqNEmcNwNuv0/PRLq0XHbxEyBxyPgF/W7cx443oMljB+HYZzQ+8affojsBDZNf74hcMz3nZmFc1GAhGBP+dmO168LSQZDlu0pEjqraD+Ckoalvx2N8be2576MgG4Rerm9YsXf5x9wF26BtmcL6R5k6nKNpLUJHbjp4Qyw4LM5HyDPFmAKtaqylD7ZBnZIA+lTbj6vt3xNK1ekMqdRjuea0pWQfTlhQthoKxGAKRZ0KTiUQEA8w91md/xZXFjMj5KVGaEjm2BpC/mWApaj1kB3cRnQNezkGsUHcqfp4J8pWh+G20WMW5ZYFR/cz6M/Qb1dm69rbexigBPT92KaROLdrzOjsCOV6gmJYB2QD8VT3fMABPwjoKuFDVNvQK7cnSnJK+ZVmRxomUaOsgiG9TghtsKkH3fNiYZBXHCB0BbsmozZtYNbX3XqNhv4imof91advdtHIzhC2u50Q586y/xb4dyhm3EQRDG6l90+Qn6W+HB1wAr6z5+LYUxhCgSv8QACOeck3PYHyVhC6BfKEHcgFbv18ZIDCTgBGq7Lg+PcLIcgerWfFCDTKoG+cJshCj9BGE35cupO71LEju7UATEG4B+1beCbAr2uqMk3uA0tYzTOAtvawm0eEoTYd03Oqzca076eEp/ea+7GWt/EZ6hQ+BtrDuzBESIyye3gihyAjN8PBKZERUVO0gIXdYlSiKeIy/hWfpgfDvCT9NEUQtI3TvnLaRd5eiZBbe+zYCm9zKJ2uBlmVl6/gO7xeUohtt8Cd3/1xeZYTxVAA3oxi7wQjShpqK2hGvg13mYFcgxf96Pv/XJLISJqYdzOK91f17X+Z45zMtKdCz+7HkRpdH9/l6yFmBg1Y7ONFgnvgA6smziU6Dllmb3yu15vejeFWpsnJKlIsliQnzsO2dtRGKmVs9m3o3cYySJgxuQDlSoHQGLMo1PT9NfITmBV6wKeFOY/MnI8KRGW7eqN34fDpEo2le7HrlmkfiHvikQQeD4D4cM/d3oaKmpSSHEIfVTOshdEt6q9bQ7BVN/LXDv3eBn7Ny7kpLu8wVi56i49ciyEvmJX8P3B79GoXGo8qYVKp5PhafFFeT2L8E0pgrwFQjE5Xgbub8bPmjXqK4EHZYD8eHsSxjd8vA385ArV2YYc+s3V5h/o09upo95J9CALBRLOJ7u98gGyMx1gSlJ5gZmMyhtO+uIM8j2fpY4oY0b+IvaEgjrJGnhpMT4rxeXfNPHUS/7aYVoEXCDL+XjFIoF0IJQmlEULmGPE1pdrH42hvjXRX3B42Ny3EYGjLrMuQBL6FbYHhD7OCk8eRCq9xS4gWG+X5TcOkBMW0iUPa1SLHoKcrLVyrStodpG5kakPU64nLe6UCMQpsZA3you64oYJ9GZH5QSPROzYMze5WbqAeodVkOq7IdjFiYvklBgOMDVhU3qLzv8p3MEl+rA/QEsd2UfIIEsGyKTEOuT6O6wgPuAWIpXMsQzzuCqR995F/6DXsysAVsgC4HGfO4lRZq2PtQ88I6Ds69c80uKhD0h6TICe4sifPSJZUQaWY4a/RTc83k0KQPoyzxHQxMRTmS38HiaS3jzWj8tlb+0ZvFmAhLXR/bLbmK/pj2jwNCZb0rpWBwVv3KVxxdBX+q2Jsy2a8PiFVKOUY5S9DaRFBj69cYvMI4wq4QRQ2GFIuoItMOcor0SUIM/n1mOEMQsnjOftxBDczzJkjnuErKh/KJ+JoG+/iPc52vxRbbLZtI0YGtfzhcAvQFU4DgB30A1tNLyN+eIc/vpvRh1y4FeGTD9qS87Q0XnnuR5PC69Jw1TSty8miOerJ0U7kVjmjsI91Ikx2LWp2jZCXGwnh5RkFFisMs4ym1RvORyNQ32ro5slFj5N9NDtfK4U9lbiMnrPMl9YiinBqV3J6LIiC4vXUJsCM22CQHPMGhc2DSb7bOce2CIUyL+kEnpNHFn6H4xQwetKdLKw78UqpTdvDYVcML5ZW7eFyQUz0XuKGuEr3laIe1npZW+Axdg9M863+TM3EM+euHVvVd73jQqT08D+WHiHljF3ZngZ9GdxAXq7Jc3C/v0RbK62ZWUz0ieS+hu+ttCM0H7d9oKH+yJuik5QwPvyCHBUs6B0/QpdnqYipZ+hJDeB3uetS2OojSzzSGDw8/W6iPL0EetIM/e3RTPNa2+VsKP59Zknrykg5jBsjLxAihxYW5qlaCDle4+6Fsko9aIPKn8AHlyGevYOnl2sZhL0bmgq1Pl3CBSwcB0gou+AYB8JeODaPm4cnm8oXCdQo/1BglRzLOItJFmIjTRCTooIEEwaIr1hmLwuQcaw9Xw7wh/s9hjmo8Ch46N/pVU6LWq+ntpHJppN5KIybyIAYvBSxL7wqUM8qVRArgN/WsI2Mw3XtOUkXuUC6cw/q5I60xqSx8GFgp2ZS9+JXA19bgYrOX0Xm8DVPAcbxwNw3mOYDl4BvJiN+jJm8VyfmtAebXnWTzpT/KAw7RF3KwDGeW2tkKG0oYMoIRuUAgQTelHNgl2gB4PsXnCcFDpeJpITsk/uEcTKlX6xmiNmKlWuVRX1ZQx5rDqEjIgmt2RI33hD1Y4iXxZzpDK0M5SI4i+hvUVnTCybk7DYPZG4Bho+t/sSmrKnc9udLATYD0KBZtqt+bJvBkmAKBmSZ3DBLvWHUInDJjm4n/HmOB4s77GvRWehvyD1qWs2MIxV8gU1kjucIhhGle+DUssCTZT7LDxTiwIikLriE6fcFR+ep98mCLtzqr1N2qtF94S3xtzVOodVOimIE7yXtlzybS9q+UJ5S8lKCQt3V18+2aHBxIrQCzf1haMbmSZS3qXYFnPlg3PIba6ih0uP9l3S7JiQQXhl8bj3DwctEDI84d/cfFb0RLE1hsdZ37ycvqWBRRuSTZMPwgqYEegjTkq+TrFr1DC1I6Pcqf4XUlxk1wi3goPvLvpzpuceIHfGE2H+FP1g1scGZpSIJcecDtUdDmYNVqtF4y78C1pbZpJLMicxkyKc1j7QGUFMYZ+GP0RShaJUj8obIMkJBS3R0lAYa51eKOFG42e9LF3QbRBZCBEZzsH+BiP2LhtAR+I+6/InaKfd2lpP1b4Ow5PbODyLxd0Ctt3/yhuWryH8JkGIsBxKfoNSKv05ClJFl+Yy27n2HHPNxYjCQYXCSN4EWUzeuouiuOsFC/MYramgeKpvaH69dIDMpx+bUxsLwhb2NbFIzfRdsECqme9EWJgLWrc9SlsulRcUsCVqsCMV6jGDZ4C+ezCzQHrlm2ukBQSSD5i67az3jX62olzJXEmPiEj9wXg/t5BqEqoAQI3lZkCrp6yl3jIW9E2oZp+gktzus7Tn1vEddpAsbrAH/4tv6g0ZkN1tmFbhiAymLMEVeDZWMcQE+3WWMnoET7LRQBojVdVIIYUBt4rPbErpHObeeBFiHazEswFlZMck2pArcYfMsWzKFW8QcaF1NAkjzKgzKsY96kieclJK18UleTbCHRA8/1GgS57aevqqzLAX/N0XFJghKi46372TCPT3g/zbS1Qj+xv/2t4RZ0BgH83zHWzYoc7GiCTjY5VyM0zg+2Ik7moStFodrZ0QqltDULieDTCzGZr5aOnHVklAxdMlsgCQ6ivhz66g7wWtbrWKeRoKeuaWN1MHuXlp/d0sWpXR6YCLPm+9oBs3yk5ro3NmMtBgs8kBu9cLp44249NLdbBhbF5JjVslUM0tZ4wXA6I0+WlkqvQtMCg0ES4s3ndxtsdtIgoFnhS5jACNRUPlxe6ecd2D/N4jJG2mgV8EcdiId/JVgF70aSJXgoxWJ3dNJRfxk98p9TFfPddOhR82M2TRC2dWqoLIQIF1Fso5vlFFqmpcN8DJkW7zbWhQOZRW6AZhBAD9rZk28pmG6YSvDJQSjd9xUXui9ypYf/UfAjJo0TWfzsDNR86Wfy6WMmQsxZL4J5+d3W8BuM7hxVXTdKyL/mRP+hDjoi+1DaX0o++oTLx0x01+pxy/vOFtab3J8q7gNBxGBtsSDIzDAcX22QlxEnEMby/4aMSU7ZoJeHoUbbtiEFGU6Jvn3c+oqXtUezpIG0WN+uSXr+gFMA/DEKpW5X14s/YpxudC2NqNL9FgvgIKrUEtlTEA/BzZupTPtlsDlKQjwtZjSdrLm7QZfeEhXatqRd2Q+iqnAvLreR5ZXUuGbnmBZKFCT30fald5sje7tODPQTzBMsDmqTfWmonbVKb8tY5vzIaMt98gCiwzKY/nOA9DlbSPeuiplPshp8Mq6OPtLJzMnIYBYac0uvWmwLwe2nI3ZfGiPoe/lqV0s7FdYwkF2dcaVm2NC9b+hRhe/RWm/Jv0vme/4KOU+A7vAAi3BQZPYEuoYAp1h48o3OA05QjFGbZEdnu30Fr+pyPS0xqEJzMv/sqQHhow34KBlBHNdcFCPiFfzVPntzCfBL4x2QF/wddQAeoMFVfYVItGt31ktWxrwjdYEal/w8f3zLqyUubNGBdOQczF7DME9TxieLSY1ykZnVEbZBqTZDW9xbnex2nRey7bD3kc7ZONQ4t7wkh7aL876RnGQKQjthJWE8+PDZ5q2mShYfOa+K4bT8mieu8DqcTMCapjD/zS4xCqohTHy8f/vTMSELlX/IxiuvAnegsmMm53a+z484NLvX3ZsPM41e/2QW/jSAbCxDMuTaWfv0ux//QE5507ktMzekE7EwdCflvlthYzZ93BugGKnry7CKArbJDalkitvoBWAiizM0Gfuju84a3NQOsas8CpzxTvtC35lZ4yVouOdEOvCBpT3Hl4YbhnfGUmdb0agvDEkYKzt2szsdvTl+PjN1FFFKT1o0RIMB4HhTaIE8tbzKfvN1GzHc4Fq6Kac/HD21XmL3jRwtXivQm3J7g1r1a/3Q3K8iz/kiwFm1ipRD7Lp/4eZ1zrnbxBNg/7x36rYXDFDpGK/bbtusrzvi39yjofnRpIqf4Ixj6gPa8Tjl3NW2VcnJu3U1vYU6/xJ3VT4pJdgBV2wpFT6olSklEMKtYt/s050qaLVvgkTHkzq9+/kPOogrg==]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[破碎的白金色爱恋]]></title>
    <url>%2FBroken_platinum_love%2F</url>
    <content type="text"><![CDATA[我的白金精二几级了？ Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堕落的天蓝色天使]]></title>
    <url>%2FFallen_blue_angel%2F</url>
    <content type="text"><![CDATA[我本命的英文名？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2019游记]]></title>
    <url>%2FCSP2019%2F</url>
    <content type="text"><![CDATA[记录一下自己的爆零历程。 $\rm Day 0$ 出于复习颓废的目的请了一天假。 复习了几个算法，学了一下 $\rm excrt$ 和缩点，发现自己真的好多算法没学过...心态爆炸。 已经没有什么好害怕的了（指爆零毫无疑问）。 希望能考出个令人满意的成绩吧... $\text{TG}$$\rm Day 1$ 进考场之前上了个厕所，看见什么移动厕所以为很高端，直到我看到了外面矗立的一排电话亭一样的东西... 压缩包密码是 $Ren2Zhen0Si1Kao9$ 可是你让我思考我也思考不出来啊。 $\rm T1$ 我：难道不是把k的二进制输出来吗？ $\text{(1 minute later)}$ 我：打扰了。 然后就写了个递归，感觉还不错，瞄了一眼数据范围： $k\le2^{64}$ 我： 然后就想着 $80$ 分滚粗了。 自始至终我都没有想起有个东西叫 $\text{unsigned long long}$ 。 $\rm T2$ 这啥玩意儿？啥玩意儿？ 于是写了个超级无敌暴力 $\rm DFS$ ，大样例直接爆炸，然后心态就没了。 $\rm T3$ 第一眼：不就是把 $1$ 移动到 $1$ 节点点然后删边再移后面几个数吗。 码量略大，打了 $1$ 小时多。 然后我看了一眼样例，发现咋有点不对呢？ 思考了一分钟：我：？ 最后直接输出 $1 \rm ~ n$ 滚粗了，真自闭了。 第一次 $s$ 组就这样退役了。 $\rm Day2$ 根本没抱多少希望进考场。 $\rm T1$ 这尼玛啥啊？ 搁那推了半小时 $\rm DP$ 硬是啥也没推出来... 写个 $\rm DFS$ 就走了。 $\rm T2$ 一眼 $\rm DP$ 题。 看到那个 $(\sum\limits^{k_{j+1}-1}_{i=k_j} a[i])^2$ 就想起了以前看到的斜率优化。 然而没学（悲 所以自闭了， $O(n^3)$ $\rm DP$ 写完就走了。 $T3$ 想到关于每一个点是哪些树的重心，然而完全没思路。 写了个暴力，又写了个链的情况，结果跑大样例跑爆栈了， 然后就自闭了，结果把一个对的写成错的了。 真的退役了啊... 估分：$80+30+0+30+30+30=200$ 实际：$85+45+0+32+36+55=253$ $\rm PJ$$\rm PJ}$ 多少还是让我恢复了点自信心... $\rm T1$ ？ $\rm T2$ 一开始直接 $\rm std::queue$ ，后来发现不行。 $\rm STL$ 搞得我连队列都差点不会写... $\rm T3$ 一眼 $\rm DP$ 题。 但是我尼玛不会 $\rm DP$ 啊喂！ 然后调了 $1$ 个多小时，奇迹般的写出来了。 然而是 $O(T^2nm)$ ...希望数据水一点（逃 $\rm T4$ 仔细想了一下发现这样一个传递可以在一个地方反复横跳， 我：这不就跑遍 $\rm BFS$ 最短路吗？ 仔细想下不对，要维护奇最短路和偶最短路，于是写了个 $\rm BFS$ ，然而并不知道有没有正确性... 估分：$100+100+80+100=380$ 实际：$100+100+70+100=370$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树状数组]]></title>
    <url>%2FBIT%2F</url>
    <content type="text"><![CDATA[树状数组是一种非常好打优美的数据结构，适用性十分广泛，而且常数非常小。 （自己花五分钟做的图） 下面蓝色的是我们的原数组，红色的即是我们的 $tree$ 数组。 树状数组的主旨是单点修改，查询前缀和，它的核心是 $\rm lowbit$ 如 $\rm lowbit((111)_2) = (001)_2,\rm lowbit((110)_2) = (010)_2$ 即 $\rm lowbit(7) = 1,\rm lowbit(6) = 2$ 仔细观察原树，不难发现： $$tree[i]=\sum\limits_{j=i-lowbit(i)+1}^i a[j]$$ 于是我们所求的前缀和可以由 $tree$ 数组得出 $$sum[i] = tree[i] + tree[i - lowbit(i)] + tree[(i - lowbit(i)) - lowbit(i - lowbit(i))] ...$$ 举个栗子： $$sum[(111)_2] = tree[(111)_2] + tree[(110)_2] + tree[(100)_2]$$ 这里需要仔细看几遍才能理解。 于是查询前缀和的操作就写好了。 1234567ll query(int p) // 查询前缀和&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 接下来考虑单点修改 当 $a[i]$ 改变的时候，所有包含 $i$ 这个位置的 $tree[j]$ 均要改变。 树状数组是一棵树！ 于是我们只需要找到 $tree[i]$ 的父亲，以及它的父亲的父亲爷爷...逐个更新 而再次仔细观察，我们惊奇的发现： 节点 $i$ 的父亲编号即为 $i + \rm lowbit(i)$ ! 12345void add(int p, ll x) // 单点修改&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125; 单点修改 + 区间查询知道前缀和很容易计算出区间和。 区间 $[l,r]$ 的和即为 $sum[r] - sum[l-1]$ 。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125; 区间修改 + 单点查询这里我们要用到神奇的差分。 新建 $d$ 数组。 $$d[1]=a[1],d[i]=a[i]-a[i-1] (2\le i \le n)$$ 可以得出: $$a[p]=\sum\limits_{i=1}^{p}d[i]$$ 这是啥？不就是前缀和嘛！ 而当区间 $[l,r]$ 全部加上 $x$ 时，我们只需将 $d[l]$ 加上 $x$ ，$d[r + 1]$ 减去 $x$ 就好了。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 区间修改 + 区间查询这是最常用的算法，第一次看到的时候真的惊艳到我了。 $$sum[p]=\sum\limits_{i=1}^p a[i] = \sum\limits_{i=1}^p \sum\limits_{j=1}^i d[j]$$ 仔细看，发现 $d[1]$ 加了 $p$ 次， $d[2]$ 加了 $p-1$ 次， $d[3]$ 加了 $p-2$ 次... 于是可以继续推： $$sum[p]=\sum\limits_{i=1}^p d[i] \times (p - i + 1)$$ $$=(p+1)\times\sum\limits_{i=1}^p d[i] - \sum\limits_{i=1}^p d[i] \times i$$ 于是我们只需要同时维护 $\sum\limits_{i=1}^p d[i]$ 与 $\sum\limits_{i=1}^p d[i] \times i$ 便可以了。 1234567891011121314151617181920212223void add(int p, ll x)&#123; for (int i = p; i &lt;= n; i += (i &amp; -i)) tree1[i] += x, tree2[i] += x * p;&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; for (int i = p; i; i -= (i &amp; -i)) res += (p + 1) * tree1[i] - tree2[i]; return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>树状数组</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站]]></title>
    <url>%2FSome_websites%2F</url>
    <content type="text"><![CDATA[列举一些我常用的网站。 顺便方便下我自己 颓废：$\rm B$站 $\rm generals.io$ $\rm NGA$ $\rm sm.ms$ (图床) $\rm Pixiv$ $\text{OI}$:$\rm loj$ 洛谷 $\rm codeforces$ $\rm OI WIKI$ 奇奇怪怪的东西:图论 几何 函数(或许应归在颓废一类？) 数列(做题找规律神器) $\LaTeX$ 打比赛专用百度翻译]]></content>
      <tags>
        <tag>OI</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loj-2590 NOIP2009 最优贸易]]></title>
    <url>%2Floj-2590%2F</url>
    <content type="text"><![CDATA[题目描述C 国有 $n$ 个大城市和 $m$ 条道路，每条道路连接这 $n$ 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 $m$ 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 $1$ 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 $n$ 个城市的标号从 $1\sim n$ ，阿龙决定从 $1$ 号城市出发，并最终在 $n$ 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 $n$ 个城市。 阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品——水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 假设 C 国有 $5$ 个大城市，城市的编号和道路连接情况如下图，单向箭头表示这条道路为单向通行，双向箭头表示这条道路为双向通行。 假设 $1\sim n$ 号城市的水晶球价格分别为 $4,3,5,6,1$ 。 阿龙可以选择如下一条线路：$1\rightarrow 2 \rightarrow 3 \rightarrow 5$，并在 $2$ 号城市以 $3$ 的价格买入水晶球，在 $3$ 号城市以 $5$ 的价格卖出水晶球，赚取的旅费数为 $2$ 。 阿龙也可以选择如下一条线路 $1\rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 5$，并在第 $1$ 次到达 $5$ 号城市时以 $1$ 的价格买入水晶球，在第 $2$ 次到达 $4$ 号城市时以 $6$ 的价格卖出水晶球，赚取的旅费数为 $5$ 。 现在给出 $n$ 个城市的水晶球价格， $m$ 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式输入第一行包含 $2$ 个正整数 $n$ 和 $m$，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 $n$ 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 $n$ 个城市的商品价格。 接下来 $m$ 行，每行有 $3$ 个正整数， $x,y,z$ ，每两个整数之间用一个空格隔开。如果 $z=1$，表示这条道路是城市 $x$ 到城市 $y$ 之间的单向道路；如果 $z=2$，表示这条道路为城市 $x$ 和城市 $y$ 之间的双向道路。 输出格式输出共 $1$ 行，包含 $1$ 个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 $0$ 。 样例12345675 54 3 5 6 11 2 11 4 12 3 23 5 14 5 2 样例输出15 数据范围与提示输入数据保证 $1$ 号城市可以到达 $n$ 号城市。 对于 $10\%$ 的数据，$n\le 6$； 对于 $30\%$ 的数据，$n\le 100$； 对于 $50\%$ 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市； 对于 $100\%$ 的数据，$1\le n\le 100,000$，$1\le m\le 500,000$，$1\le x, y \le n$，$1\le z\le 2$，各城市水晶球价格 $\le 100$。 loj链接 我已经很久很久很久没有水更过 $blog$ 了...... 最近暑假刚好有点空所以来写点题解。 这道题是一道很经典的分层图题目，虽然我看不出来 以前我可能写过这道题，但也是半懂不懂抄题解的，现在重写了一遍，感觉理解透彻了很多。 我们可以把这张图看成有相同的 $3$ 层，每一层中节点的连接方式如题所述，然后我们将第 $1$ 层的 $i$ 的节点与第 $2$ 层的相应节点连一条单向边，边权为 $-v[i]$ ，相当于从第 $1$ 层走到第 $2$ 层就是买了这个城市的水晶球，并且我们是走不回去的。 而第 $2$ 层与第 $3$ 层的连接同理，但是边权设为 $v[i]$ ，相当于我们卖掉了水晶球赚了 $v[i]$ 。 加上代码应该很容易理解。 12345678910111213141516171819202122for (int i = 1; i &lt;= m; i ++)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125;&#125;for (int i = 1; i &lt;= n; i ++)&#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]);&#125; 最后我们还要注意一个细节：我们是可以不买的，所以我们将每一层的 $n$ 节点都连向我们的最终节点，边权为 $0$, 我这里把 $0$ 号节点设为最终节点。 123add_edge(n, 0, 0);add_edge(2 * n, 0, 0);add_edge(3 * n, 0, 0); 最后我们观察：我们从 $1$ 号节点走到 $0$ 节点的最长路即是我们能获得的最大收益。 最后附上完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;const int M = 5e5 + 5;int n, m;int v[N];struct E&#123; int to, dis, next;&#125; edge[(M * 6) + (N &lt;&lt; 1)];int num_edge, head[N * 3];void add_edge(int from, int to, int dis)&#123; edge[++ num_edge] = (E)&#123;to, dis, head[from]&#125;; head[from] = num_edge;&#125;int dis[N * 3];bool vis[N * 3];struct point&#123; int u; bool friend operator &lt; (point a, point b) &#123; return dis[a.u] &lt; dis[b.u]; &#125;&#125;;std::priority_queue &lt;point&gt; q;void dijkstra(int s) // dijkstra万岁&#123; memset(dis, -127/3, sizeof dis); dis[s] = 0; vis[s] = true; q.push((point)&#123;s&#125;); while (!q.empty()) &#123; int u = q.top().u; q.pop(); vis[u] = false; for (int p = head[u]; p; p = edge[p].next) &#123; int v = edge[p].to, d = edge[p].dis; if (dis[v] &lt; dis[u] + d) &#123; dis[v] = dis[u] + d; if (!vis[v]) q.push((point)&#123;v&#125;), vis[v] = true; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;v[i]); int x, y, z; for (int i = 1; i &lt;= m; i ++) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) &#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]); &#125; add_edge(n, 0, 0); add_edge(2 * n, 0, 0); add_edge(3 * n, 0, 0); dijkstra(1); printf("%d", dis[0]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>OI</tag>
        <tag>loj</tag>
        <tag>最短路</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约瑟夫环]]></title>
    <url>%2FJosephus%2F</url>
    <content type="text"><![CDATA[$n$ 个人围成一圈,编号按顺序从 $0$ 到 $n-1$，从第一个人开始报数,数到 $m$ 的人出列,再由下一个人重新从 $1$ 开始报数,数到 $m$ 的人再出圈,……依次类推,直到所有的人都出圈,请输出最后一个出圈的人的编号。 今天稍微学习了一下这个玩意儿，感觉还挺神奇的。 第一种做法：暴力模拟这个我在这就不讲了，很容易就能写出来。 第二种做法：递推我们先考虑第一个出圈的人。 $m &lt; n$ 那么这个人的编号即为 $m - 1$ $m \ge n$ 那么这个人的编号即为 $(m - 1) \bmod n$ 综合一下，第一个出圈的人的编号绝对为 $(m - 1) \bmod n$ 方便起见，我们设 $k - 1 = (m - 1) \bmod n$ 。 于是这个圈就变成了这样： $k \quad k+1 \quad k+2 \quad ... \quad n-2 \quad n-1 \quad 0 \quad 1 \quad 2 \quad ... \quad k-3 \quad k-2$ 这个时候我们将这个圈转换一下，变成: $0 \quad 1 \quad 2 \quad ... \quad n - 3 \quad n - 2$ 可以发现其实这个问题变成了 $n-1$ 个人报数的子问题。 所以我们只要将子问题的答案转换回去，就能知道最后那个人原来的编号。 稍微观察一下如何转换回去: $0 \Rightarrow k$ $1 \Rightarrow k + 1$ $...$ $n - k - 1 \Rightarrow n - 1$ $n - k \Rightarrow 0$ $n - k + 1 \Rightarrow 1$ $...$ $n - 3\Rightarrow k - 3$ $n - 2 \Rightarrow k - 2$ 不难发现 $x$ 转换回去后就变成了 $(x + k) \bmod n$ 我们设 $f[n]$ 表示 $n$ 个人报 $m$ 最后出圈人的编号。 显然，$f[1]=0$ 而根据我们刚才推的公式： $$f[n]=(f[n - 1]+k) \bmod n = (f[n - 1]+m \bmod n) \bmod n = (f[n - 1]+m ) \bmod n$$ 于是就可以愉快的递推了~ 代码1234567int Josephus(int n, int m)&#123; int res = 0; for (int i = 2; i &lt;= n; i ++) res = (res + m) % i; return res;&#125;]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的...第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>dfs</tag>
        <tag>剪枝</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$\rm W$”或“$\rm B}$”。其中“$\rm W}$”表示白格，“$\rm B$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}\text{W}&amp;\text{W}&amp;\text{B}&amp;\text{W}\\\text{B}&amp;\text{B}&amp;\text{W}&amp;\text{B}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{W}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{B}\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f[x]$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f[n-1]$ 那么我们 $f$ 的公式也就出来了。 $$f[n]=2n \times (2n-2) \times (f[n-1] + 2 \times (n-1) \times f[n-2])$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f[n-k]$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\sim n$ 的阶乘逆元有两种方法： 先求出 $1\sim n$ 每个数的逆元，然后正推： $(i!)^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345inv_fac[1] = 1;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; 先求出 $n$ 的阶乘逆元，然后倒推： $(i!)^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\sim n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过...$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出&#39; $No Answer$ &#39;。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 $\rm Rachel·Gardner$ Ray快来打我我爱她 小野寺小咲 ...渣乐 $\rm Ruby Rose$ 我也想要把新月玫瑰Ruby帅炸！ $\rm Weiss Schnee$ 傲娇 $\rm Blake Belladonna$ 我爱猫娘！ $\rm Yang Xiao Long$ 杨姐帅 牧濑红莉栖 $\text{El psy congroo}$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $\rm QAQ$ 雪乃好看 由比滨结衣 团子可爱 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样... $\rm x$毛 $\rm x$毛天下第一 格蕾 $\lceil\mathfrak{Grave} \, \mathfrak{for} \, \mathfrak{you}\rfloor$ 镰刀很戳我xp 蓝毒 蓝毒可可爱爱 $2019.7.17$ 注:我还真是 $\rm sb$ 连这都能列个表而且还不全]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下...这个博客也算是勉强搭成了，花了好久...感谢网上各位大佬帮助 $QAQ$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
