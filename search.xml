<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[小技巧锦集]]></title>
    <url>%2Ftips%2F</url>
    <content type="text"><![CDATA[记录一下总结出的一些小技巧。 基础开变量 or 数组 不开 long long 见祖宗，必要时开 unsigned long long 做题时一定要注意数据范围，并考虑每一步计算是否会爆 int 。 数组一定要开到足够大小 一定要结合题目，看清范围，有时需要经过一定计算。 PS: 有的时候 cf 显示 WA 实际上是数组爆了我还因为这个掉过一次分。 输入 尽量少用 cin ， scanf 永远滴神 有的时候输入速度确实能决定结果517天天卡。 输入字符串或单个字符时用 scanf + %s 需要读单个字符尽量都用 %s ,以及避免读回车。 —— 517 初始化 开头定义 INF 的时候若范围为 longlong 记得是 1ll&lt;&lt;60 1ll 非常重要。 具体算法二分 二分的时候 l 与 r 不要作死定成 $\pm$INF 会被卡。嗯。 想二分的时候看清楚有无单调性，单调性是怎样的。 数论相关 题目有取模，计算中有相减的时候，计算时加上一个模数 数学题不要忘记考虑 0 $\text{To be continued}$]]></content>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2020游记]]></title>
    <url>%2FCSP2020%2F</url>
    <content type="text"><![CDATA[高中第一次考信奥，希望不会 $\rm AFO$ 。 初赛$\rm 10.11$初赛进行时，感觉比去年卷子简单一点...或者是我稍微变强了一点点？ 考完之后根据洛咕答案对了一下感觉还行，估分大概 $\rm 88$ ，但是有几道憨批题错了... $\rm 10.17$初赛成绩出来是 $\rm 89$ 所以这差了1分什么鬼啊 现在就是好好去准备复赛了...感觉我复赛可能还不一定比初赛强... $\text{To be continued}$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[真情假爱]]></title>
    <url>%2FLOVE%2F</url>
    <content type="text"><![CDATA[请输入密码证明身份以查看高级机密。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于乐课网]]></title>
    <url>%2Fhow_to_hack_leke%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[破碎的白金色爱恋]]></title>
    <url>%2FBroken_platinum_love%2F</url>
    <content type="text"><![CDATA[我的白金精二几级了？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堕落的天蓝色天使]]></title>
    <url>%2FFallen_blue_angel%2F</url>
    <content type="text"><![CDATA[我本命的英文名？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2019游记]]></title>
    <url>%2FCSP2019%2F</url>
    <content type="text"><![CDATA[记录一下自己的爆零历程。 $\rm Day 0$ 出于复习颓废的目的请了一天假。 复习了几个算法，学了一下 $\rm excrt$ 和缩点，发现自己真的好多算法没学过...心态爆炸。 已经没有什么好害怕的了（指爆零毫无疑问）。 希望能考出个令人满意的成绩吧... $\text{TG}$$\rm Day 1$ 进考场之前上了个厕所，看见什么移动厕所以为很高端，直到我看到了外面矗立的一排电话亭一样的东西... 压缩包密码是 $Ren2Zhen0Si1Kao9$ 可是你让我思考我也思考不出来啊。 $\rm T1$ 我：难道不是把k的二进制输出来吗？ $\text{(1 minute later)}$ 我：打扰了。 然后就写了个递归，感觉还不错，瞄了一眼数据范围： $k\le2^{64}$ 我： 然后就想着 $80$ 分滚粗了。 自始至终我都没有想起有个东西叫 $\text{unsigned long long}$ 。 $\rm T2$ 这啥玩意儿？啥玩意儿？ 于是写了个超级无敌暴力 $\rm DFS$ ，大样例直接爆炸，然后心态就没了。 $\rm T3$ 第一眼：不就是把 $1$ 移动到 $1$ 节点点然后删边再移后面几个数吗。 码量略大，打了 $1$ 小时多。 然后我看了一眼样例，发现咋有点不对呢？ 思考了一分钟：我：？ 最后直接输出 $1 \rm ~ n$ 滚粗了，真自闭了。 第一次 $s$ 组就这样退役了。 $\rm Day2$ 根本没抱多少希望进考场。 $\rm T1$ 这尼玛啥啊？ 搁那推了半小时 $\rm DP$ 硬是啥也没推出来... 写个 $\rm DFS$ 就走了。 $\rm T2$ 一眼 $\rm DP$ 题。 看到那个 $(\sum\limits^{k_{j+1}-1}_{i=k_j} a[i])^2$ 就想起了以前看到的斜率优化。 然而没学（悲 所以自闭了， $O(n^3)$ $\rm DP$ 写完就走了。 $T3$ 想到关于每一个点是哪些树的重心，然而完全没思路。 写了个暴力，又写了个链的情况，结果跑大样例跑爆栈了， 然后就自闭了，结果把一个对的写成错的了。 真的退役了啊... 估分：$80+30+0+30+30+30=200$ 实际：$85+45+0+32+36+55=253$ $\rm PJ$$\rm PJ$ 多少还是让我恢复了点自信心... $\rm T1$ ？ $\rm T2$ 一开始直接 $\rm std::queue$ ，后来发现不行。 $\rm STL$ 搞得我连队列都差点不会写... $\rm T3$ 一眼 $\rm DP$ 题。 但是我尼玛不会 $\rm DP$ 啊喂！ 然后调了 $1$ 个多小时，奇迹般的写出来了。 然而是 $O(T^2nm)$ ...希望数据水一点（逃 $\rm T4$ 仔细想了一下发现这样一个传递可以在一个地方反复横跳， 我：这不就跑遍 $\rm BFS$ 最短路吗？ 仔细想下不对，要维护奇最短路和偶最短路，于是写了个 $\rm BFS$ ，然而并不知道有没有正确性... 估分：$100+100+80+100=380$ 实际：$100+100+70+100=370$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树状数组]]></title>
    <url>%2FBIT%2F</url>
    <content type="text"><![CDATA[树状数组是一种非常好打优美的数据结构，适用性十分广泛，而且常数非常小。 （自己花五分钟做的图） 下面蓝色的是我们的原数组，红色的即是我们的 $tree$ 数组。 树状数组的主旨是单点修改，查询前缀和，它的核心是 $\rm lowbit$ 如 $\rm lowbit((111)_2) = (001)_2,\rm lowbit((110)_2) = (010)_2$ 即 $\rm lowbit(7) = 1,\rm lowbit(6) = 2$ 仔细观察原树，不难发现： $$tree[i]=\sum\limits_{j=i-lowbit(i)+1}^i a[j]$$ 于是我们所求的前缀和可以由 $tree$ 数组得出 $$sum[i] = tree[i] + tree[i - lowbit(i)] + tree[(i - lowbit(i)) - lowbit(i - lowbit(i))] ...$$ 举个栗子： $$sum[(111)_2] = tree[(111)_2] + tree[(110)_2] + tree[(100)_2]$$ 这里需要仔细看几遍才能理解。 于是查询前缀和的操作就写好了。 1234567ll query(int p) // 查询前缀和&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 接下来考虑单点修改 当 $a[i]$ 改变的时候，所有包含 $i$ 这个位置的 $tree[j]$ 均要改变。 树状数组是一棵树！ 于是我们只需要找到 $tree[i]$ 的父亲，以及它的父亲的父亲爷爷...逐个更新 而再次仔细观察，我们惊奇的发现： 节点 $i$ 的父亲编号即为 $i + \rm lowbit(i)$ ! 12345void add(int p, ll x) // 单点修改&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125; 单点修改 + 区间查询知道前缀和很容易计算出区间和。 区间 $[l,r]$ 的和即为 $sum[r] - sum[l-1]$ 。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125; 区间修改 + 单点查询这里我们要用到神奇的差分。 新建 $d$ 数组。 $$d[1]=a[1],d[i]=a[i]-a[i-1] (2\le i \le n)$$ 可以得出: $$a[p]=\sum\limits_{i=1}^{p}d[i]$$ 这是啥？不就是前缀和嘛！ 而当区间 $[l,r]$ 全部加上 $x$ 时，我们只需将 $d[l]$ 加上 $x$ ，$d[r + 1]$ 减去 $x$ 就好了。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 区间修改 + 区间查询这是最常用的算法，第一次看到的时候真的惊艳到我了。 $$sum[p]=\sum\limits_{i=1}^p a[i] = \sum\limits_{i=1}^p \sum\limits_{j=1}^i d[j]$$ 仔细看，发现 $d[1]$ 加了 $p$ 次， $d[2]$ 加了 $p-1$ 次， $d[3]$ 加了 $p-2$ 次... 于是可以继续推： $$sum[p]=\sum\limits_{i=1}^p d[i] \times (p - i + 1)$$ $$=(p+1)\times\sum\limits_{i=1}^p d[i] - \sum\limits_{i=1}^p d[i] \times i$$ 于是我们只需要同时维护 $\sum\limits_{i=1}^p d[i]$ 与 $\sum\limits_{i=1}^p d[i] \times i$ 便可以了。 1234567891011121314151617181920212223void add(int p, ll x)&#123; for (int i = p; i &lt;= n; i += (i &amp; -i)) tree1[i] += x, tree2[i] += x * p;&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; for (int i = p; i; i -= (i &amp; -i)) res += (p + 1) * tree1[i] - tree2[i]; return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>树状数组</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站]]></title>
    <url>%2FSome_websites%2F</url>
    <content type="text"><![CDATA[列举一些我常用的网站。 顺便方便下我自己 颓废：$\rm B$站 $\rm generals.io$ $\rm NGA$ $\rm sm.ms$ (图床) $\rm Pixiv$ $\text{OI}$:$\rm loj$ 洛谷 $\rm codeforces$ $\rm OI WIKI$ 奇奇怪怪的东西:图论 几何 函数(或许应归在颓废一类？) 数列(做题找规律神器) $\LaTeX$ 打比赛专用百度翻译]]></content>
      <tags>
        <tag>OI</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loj-2590 NOIP2009 最优贸易]]></title>
    <url>%2Floj-2590%2F</url>
    <content type="text"><![CDATA[题目描述C 国有 $n$ 个大城市和 $m$ 条道路，每条道路连接这 $n$ 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 $m$ 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 $1$ 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 $n$ 个城市的标号从 $1\sim n$ ，阿龙决定从 $1$ 号城市出发，并最终在 $n$ 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 $n$ 个城市。 阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品——水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 假设 C 国有 $5$ 个大城市，城市的编号和道路连接情况如下图，单向箭头表示这条道路为单向通行，双向箭头表示这条道路为双向通行。 假设 $1\sim n$ 号城市的水晶球价格分别为 $4,3,5,6,1$ 。 阿龙可以选择如下一条线路：$1\rightarrow 2 \rightarrow 3 \rightarrow 5$，并在 $2$ 号城市以 $3$ 的价格买入水晶球，在 $3$ 号城市以 $5$ 的价格卖出水晶球，赚取的旅费数为 $2$ 。 阿龙也可以选择如下一条线路 $1\rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 5$，并在第 $1$ 次到达 $5$ 号城市时以 $1$ 的价格买入水晶球，在第 $2$ 次到达 $4$ 号城市时以 $6$ 的价格卖出水晶球，赚取的旅费数为 $5$ 。 现在给出 $n$ 个城市的水晶球价格， $m$ 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式输入第一行包含 $2$ 个正整数 $n$ 和 $m$，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 $n$ 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 $n$ 个城市的商品价格。 接下来 $m$ 行，每行有 $3$ 个正整数， $x,y,z$ ，每两个整数之间用一个空格隔开。如果 $z=1$，表示这条道路是城市 $x$ 到城市 $y$ 之间的单向道路；如果 $z=2$，表示这条道路为城市 $x$ 和城市 $y$ 之间的双向道路。 输出格式输出共 $1$ 行，包含 $1$ 个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 $0$ 。 样例12345675 54 3 5 6 11 2 11 4 12 3 23 5 14 5 2 样例输出15 数据范围与提示输入数据保证 $1$ 号城市可以到达 $n$ 号城市。 对于 $10\%$ 的数据，$n\le 6$； 对于 $30\%$ 的数据，$n\le 100$； 对于 $50\%$ 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市； 对于 $100\%$ 的数据，$1\le n\le 100,000$，$1\le m\le 500,000$，$1\le x, y \le n$，$1\le z\le 2$，各城市水晶球价格 $\le 100$。 loj链接 我已经很久很久很久没有水更过 $blog$ 了...... 最近暑假刚好有点空所以来写点题解。 这道题是一道很经典的分层图题目，虽然我看不出来 以前我可能写过这道题，但也是半懂不懂抄题解的，现在重写了一遍，感觉理解透彻了很多。 我们可以把这张图看成有相同的 $3$ 层，每一层中节点的连接方式如题所述，然后我们将第 $1$ 层的 $i$ 的节点与第 $2$ 层的相应节点连一条单向边，边权为 $-v[i]$ ，相当于从第 $1$ 层走到第 $2$ 层就是买了这个城市的水晶球，并且我们是走不回去的。 而第 $2$ 层与第 $3$ 层的连接同理，但是边权设为 $v[i]$ ，相当于我们卖掉了水晶球赚了 $v[i]$ 。 加上代码应该很容易理解。 12345678910111213141516171819202122for (int i = 1; i &lt;= m; i ++)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125;&#125;for (int i = 1; i &lt;= n; i ++)&#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]);&#125; 最后我们还要注意一个细节：我们是可以不买的，所以我们将每一层的 $n$ 节点都连向我们的最终节点，边权为 $0$, 我这里把 $0$ 号节点设为最终节点。 123add_edge(n, 0, 0);add_edge(2 * n, 0, 0);add_edge(3 * n, 0, 0); 最后我们观察：我们从 $1$ 号节点走到 $0$ 节点的最长路即是我们能获得的最大收益。 最后附上完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;const int M = 5e5 + 5;int n, m;int v[N];struct E&#123; int to, dis, next;&#125; edge[(M * 6) + (N &lt;&lt; 1)];int num_edge, head[N * 3];void add_edge(int from, int to, int dis)&#123; edge[++ num_edge] = (E)&#123;to, dis, head[from]&#125;; head[from] = num_edge;&#125;int dis[N * 3];bool vis[N * 3];struct point&#123; int u; bool friend operator &lt; (point a, point b) &#123; return dis[a.u] &lt; dis[b.u]; &#125;&#125;;std::priority_queue &lt;point&gt; q;void dijkstra(int s) // dijkstra万岁&#123; memset(dis, -127/3, sizeof dis); dis[s] = 0; vis[s] = true; q.push((point)&#123;s&#125;); while (!q.empty()) &#123; int u = q.top().u; q.pop(); vis[u] = false; for (int p = head[u]; p; p = edge[p].next) &#123; int v = edge[p].to, d = edge[p].dis; if (dis[v] &lt; dis[u] + d) &#123; dis[v] = dis[u] + d; if (!vis[v]) q.push((point)&#123;v&#125;), vis[v] = true; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;v[i]); int x, y, z; for (int i = 1; i &lt;= m; i ++) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) &#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]); &#125; add_edge(n, 0, 0); add_edge(2 * n, 0, 0); add_edge(3 * n, 0, 0); dijkstra(1); printf("%d", dis[0]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>OI</tag>
        <tag>loj</tag>
        <tag>最短路</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约瑟夫环]]></title>
    <url>%2FJosephus%2F</url>
    <content type="text"><![CDATA[$n$ 个人围成一圈,编号按顺序从 $0$ 到 $n-1$，从第一个人开始报数,数到 $m$ 的人出列,再由下一个人重新从 $1$ 开始报数,数到 $m$ 的人再出圈,……依次类推,直到所有的人都出圈,请输出最后一个出圈的人的编号。 今天稍微学习了一下这个玩意儿，感觉还挺神奇的。 第一种做法：暴力模拟这个我在这就不讲了，很容易就能写出来。 第二种做法：递推我们先考虑第一个出圈的人。 $m &lt; n$ 那么这个人的编号即为 $m - 1$ $m \ge n$ 那么这个人的编号即为 $(m - 1) \bmod n$ 综合一下，第一个出圈的人的编号绝对为 $(m - 1) \bmod n$ 方便起见，我们设 $k - 1 = (m - 1) \bmod n$ 。 于是这个圈就变成了这样： $k \quad k+1 \quad k+2 \quad ... \quad n-2 \quad n-1 \quad 0 \quad 1 \quad 2 \quad ... \quad k-3 \quad k-2$ 这个时候我们将这个圈转换一下，变成: $0 \quad 1 \quad 2 \quad ... \quad n - 3 \quad n - 2$ 可以发现其实这个问题变成了 $n-1$ 个人报数的子问题。 所以我们只要将子问题的答案转换回去，就能知道最后那个人原来的编号。 稍微观察一下如何转换回去: $0 \Rightarrow k$ $1 \Rightarrow k + 1$ $...$ $n - k - 1 \Rightarrow n - 1$ $n - k \Rightarrow 0$ $n - k + 1 \Rightarrow 1$ $...$ $n - 3\Rightarrow k - 3$ $n - 2 \Rightarrow k - 2$ 不难发现 $x$ 转换回去后就变成了 $(x + k) \bmod n$ 我们设 $f[n]$ 表示 $n$ 个人报 $m$ 最后出圈人的编号。 显然，$f[1]=0$ 而根据我们刚才推的公式： $$f[n]=(f[n - 1]+k) \bmod n = (f[n - 1]+m \bmod n) \bmod n = (f[n - 1]+m ) \bmod n$$ 于是就可以愉快的递推了~ 代码1234567int Josephus(int n, int m)&#123; int res = 0; for (int i = 2; i &lt;= n; i ++) res = (res + m) % i; return res;&#125;]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的...第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>dfs</tag>
        <tag>剪枝</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$\rm W$”或“$\rm B}$”。其中“$\rm W}$”表示白格，“$\rm B$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}\text{W}&amp;\text{W}&amp;\text{B}&amp;\text{W}\\\text{B}&amp;\text{B}&amp;\text{W}&amp;\text{B}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{W}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{B}\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f[x]$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f[n-1]$ 那么我们 $f$ 的公式也就出来了。 $$f[n]=2n \times (2n-2) \times (f[n-1] + 2 \times (n-1) \times f[n-2])$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f[n-k]$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\sim n$ 的阶乘逆元有两种方法： 先求出 $1\sim n$ 每个数的逆元，然后正推： $(i!)^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345inv_fac[1] = 1;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; 先求出 $n$ 的阶乘逆元，然后倒推： $(i!)^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\sim n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过...$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出&#39; $No Answer$ &#39;。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 $\rm Rachel·Gardner$ Ray快来打我我爱她 小野寺小咲 ...渣乐 $\rm Ruby Rose$ 我也想要把新月玫瑰Ruby帅炸！ $\rm Weiss Schnee$ 傲娇 $\rm Blake Belladonna$ 我爱猫娘！ $\rm Yang Xiao Long$ 杨姐帅 牧濑红莉栖 $\text{El psy congroo}$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $\rm QAQ$ 雪乃好看 由比滨结衣 团子可爱 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样... $\rm x$毛 $\rm x$毛天下第一 格蕾 $\lceil\mathfrak{Grave} \, \mathfrak{for} \, \mathfrak{you}\rfloor$ 镰刀很戳我xp 蓝毒 蓝毒可可爱爱 $2019.7.17$ 注:我还真是 $\rm sb$ 连这都能列个表而且还不全]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下...这个博客也算是勉强搭成了，花了好久...感谢网上各位大佬帮助 $QAQ$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
