<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于乐课网]]></title>
    <url>%2Fhow_to_hack_leke%2F</url>
    <content type="text"><![CDATA[起因起因是这样的： 有一天我们文综老师 $\text{ly}$ 下课布置作业的时候突然被踢下去了 于是我们一堆人开始研究如何登别人的号 结果秘密就藏在网址里… 研究我们先来看一段上课的网址（随便搞了一节课） https://lesson.leke.cn/auth/common/lesson/play.htm?udata=eyJjb3Vyc2VTaW5nbGVJZCI6IjEwMTc1OTA5Iiwicm9sZUlkIjoiMTAwIiwidXNlcklkIjoiMTY4NTgzNCIsInRpY2tldCI6IlZGZHdibEJSUFQwN1MwTlJhMHhUWjNaS1EydHJTMmt3UFRzeU9ESTQiLCJjb3Vyc2VUeXBlIjoxfQ== 注意到后面的 $\text{udata}$ eyJjb3Vyc2VTaW5nbGVJZCI6IjEwMTc1OTA5Iiwicm9sZUlkIjoiMTAwIiwidXNlcklkIjoiMTY4NTgzNCIsInRpY2tldCI6IlZGZHdibEJSUFQwN1MwTlJhMHhUWjNaS1EydHJTMmt3UFRzeU9ESTQiLCJjb3Vyc2VUeXBlIjoxfQ== 这玩意儿像啥？$\text{base64}$ … 解密出来是这样的 {“courseSingleId”:”10175909”,”roleId”:”100”,”userId”:”1685834”,”ticket”:”VFdwblBRPT07S0NRa0xTZ3ZKQ2trS2kwPTsyODI4”,”courseType”:1} 太明显了… $\text{courseSingleId}$ 应该是这节课的 $\text{Id}$ $\text{roleID}$ 不知道什么玩意儿， $100$ 是学生 $101$ 是老师 $\text{userID}$ 就是用户 $\text{ID}$ $\text{ticket}$ 并没发现有什么锤子用… $\text{courseType}$ $\text{0}$ 是游客（据说）$\text{1}$ 是学生 $\text{2}$ 是老师 然后我们调整一遍这个玩意儿，加密回去输到网址里就完事儿了 关于 $\text{userID}$ 可以在那个人的个人界面检查元素 $\text{+ ctrl F}$ 搜索获得…]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[破碎的白金色爱恋]]></title>
    <url>%2FBroken_platinum_love%2F</url>
    <content type="text"><![CDATA[我的白金精二几级了？ Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>写作</tag>
        <tag>二次元</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堕落的天蓝色天使]]></title>
    <url>%2FFallen_blue_angel%2F</url>
    <content type="text"><![CDATA[我本命的英文名？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>写作</tag>
        <tag>二次元</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2019游记]]></title>
    <url>%2FCSP2019%2F</url>
    <content type="text"><![CDATA[记录一下自己的爆零历程。 $\text{Day 0}$ 出于复习颓废的目的请了一天假。 复习了几个算法，学了一下 $\text{excrt}$ 和缩点，发现自己真的好多算法没学过…心态爆炸。 已经没有什么好害怕的了（指爆零毫无疑问）。 希望能考出个令人满意的成绩吧… $\text{TG}$$\text{Day 1}$ 进考场之前上了个厕所，看见什么移动厕所以为很高端，直到我看到了外面矗立的一排电话亭一样的东西… 压缩包密码是 $Ren2Zhen0Si1Kao9$ 可是你让我思考我也思考不出来啊。 $\text{T1}$ 我：难道不是把k的二进制输出来吗？ $\text{(1 minute later)}$ 我：打扰了。 然后就写了个递归，感觉还不错，瞄了一眼数据范围： $k\le2^{64}$ 我： 然后就想着 $80$ 分滚粗了。 自始至终我都没有想起有个东西叫 $\text{unsigned long long}$ 。 $\text{T2}$ 这啥玩意儿？啥玩意儿？ 于是写了个超级无敌暴力 $\text{DFS}$ ，大样例直接爆炸，然后心态就没了。 $\text{T3}$ 第一眼：不就是把 $1$ 移动到 $1$ 节点点然后删边再移后面几个数吗。 码量略大，打了 $1$ 小时多。 然后我看了一眼样例，发现咋有点不对呢？ 思考了一分钟：我：？ 最后直接输出 $1 \text{~} n$ 滚粗了，真自闭了。 第一次 $s$ 组就这样退役了。 $\text{Day2}$ 根本没抱多少希望进考场。 $\text{T1}$ 这尼玛啥啊？ 搁那推了半小时 $\text{DP}$ 硬是啥也没推出来… 写个 $\text{DFS}$ 就走了。 $\text{T2}$ 一眼 $\text{DP}$ 题。 看到那个 $(\sum\limits^{k_{j+1}-1}_{i=k_j} a[i])^2$ 就想起了以前看到的斜率优化。 然而没学（悲 所以自闭了， $O(n^3)$ $\text{DP}$ 写完就走了。 $T3$ 想到关于每一个点是哪些树的重心，然而完全没思路。 写了个暴力，又写了个链的情况，结果跑大样例跑爆栈了， 然后就自闭了，结果把一个对的写成错的了。 真的退役了啊… 估分：$80+30+0+30+30+30=200$ 实际：$85+45+0+32+36+55=253$ $\text{PJ}$$\text{PJ}$ 多少还是让我恢复了点自信心… $\text{T1}$ ？ $\text{T2}$ 一开始直接 $\text{std::queue}$ ，后来发现不行。 $\text{STL}$ 搞得我连队列都差点不会写… $\text{T3}$ 一眼 $\text{DP}$ 题。 但是我尼玛不会 $\text{DP}$ 啊喂！ 然后调了 $1$ 个多小时，奇迹般的写出来了。 然而是 $O(T^2nm)$ …希望数据水一点（逃 $\text{T4}$ 仔细想了一下发现这样一个传递可以在一个地方反复横跳， 我：这不就跑遍 $\text{BFS}$ 最短路吗？ 仔细想下不对，要维护奇最短路和偶最短路，于是写了个 $\text{BFS}$ ，然而并不知道有没有正确性… 估分：$100+100+80+100=380$ 实际：$100+100+70+100=370$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树状数组]]></title>
    <url>%2FBIT%2F</url>
    <content type="text"><![CDATA[树状数组是一种非常好打优美的数据结构，适用性十分广泛，而且常数非常小。 （自己花五分钟做的图） 下面蓝色的是我们的原数组，红色的即是我们的 $tree$ 数组。 树状数组的主旨是单点修改，查询前缀和，它的核心是 $\text{lowbit}$ 如 $\text{lowbit}((111)_2) = (001)_2,\text{lowbit}((110)_2) = (010)_2$ 即 $\text{lowbit}(7) = 1,\text{lowbit}(6) = 2$ 仔细观察原树，不难发现： $$tree[i]=\sum\limits_{j=i-lowbit(i)+1}^i a[j]$$ 于是我们所求的前缀和可以由 $tree$ 数组得出 $$sum[i] = tree[i] + tree[i - lowbit(i)] + tree[(i - lowbit(i)) - lowbit(i - lowbit(i))] …$$ 举个栗子： $$sum[(111)_2] = tree[(111)_2] + tree[(110)_2] + tree[(100)_2]$$ 这里需要仔细看几遍才能理解。 于是查询前缀和的操作就写好了。 1234567ll query(int p) // 查询前缀和&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 接下来考虑单点修改 当 $a[i]$ 改变的时候，所有包含 $i$ 这个位置的 $tree[j]$ 均要改变。 树状数组是一棵树！ 于是我们只需要找到 $tree[i]$ 的父亲，以及它的父亲的父亲爷爷…逐个更新 而再次仔细观察，我们惊奇的发现： 节点 $i$ 的父亲编号即为 $i + \text{lowbit}(i)$ ! 12345void add(int p, ll x) // 单点修改&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125; 单点修改 + 区间查询知道前缀和很容易计算出区间和。 区间 $[l,r]$ 的和即为 $sum[r] - sum[l-1]$ 。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125; 区间修改 + 单点查询这里我们要用到神奇的差分。 新建 $d$ 数组。 $$d[1]=a[1],d[i]=a[i]-a[i-1] (2\le i \le n)$$ 可以得出: $$a[p]=\sum\limits_{i=1}^{p}d[i]$$ 这是啥？不就是前缀和嘛！ 而当区间 $[l,r]$ 全部加上 $x$ 时，我们只需将 $d[l]$ 加上 $x$ ，$d[r + 1]$ 减去 $x$ 就好了。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 区间修改 + 区间查询这是最常用的算法，第一次看到的时候真的惊艳到我了。 $$sum[p]=\sum\limits_{i=1}^p a[i] = \sum\limits_{i=1}^p \sum\limits_{j=1}^i d[j]$$ 仔细看，发现 $d[1]$ 加了 $p$ 次， $d[2]$ 加了 $p-1$ 次， $d[3]$ 加了 $p-2$ 次… 于是可以继续推： $$sum[p]=\sum\limits_{i=1}^p d[i] \times (p - i + 1)$$ $$=(p+1)\times\sum\limits_{i=1}^p d[i] - \sum\limits_{i=1}^p d[i] \times i$$ 于是我们只需要同时维护 $\sum\limits_{i=1}^p d[i]$ 与 $\sum\limits_{i=1}^p d[i] \times i$ 便可以了。 1234567891011121314151617181920212223void add(int p, ll x)&#123; for (int i = p; i &lt;= n; i += (i &amp; -i)) tree1[i] += x, tree2[i] += x * p;&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; for (int i = p; i; i -= (i &amp; -i)) res += (p + 1) * tree1[i] - tree2[i]; return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>树状数组</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站]]></title>
    <url>%2FSome_websites%2F</url>
    <content type="text"><![CDATA[列举一些我常用的网站。 顺便方便下我自己 颓废：$\text{B站}$ $\text{generals.io}$ $\text{NGA}$ $\text{sm.ms}$ (图床) $\text{Pixiv}$ $\text{OI}$:$\text{loj}$ 洛谷 $\text{codeforces}$ $\text{OI WIKI}$ 奇奇怪怪的东西:图论 几何 函数(或许应归在颓废一类？) 数列(做题找规律神器) $\LaTeX$ 打比赛专用百度翻译]]></content>
      <tags>
        <tag>OI</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loj-2590 NOIP2009 最优贸易]]></title>
    <url>%2Floj-2590%2F</url>
    <content type="text"><![CDATA[题目描述C 国有 $n$ 个大城市和 $m$ 条道路，每条道路连接这 $n$ 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 $m$ 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 $1$ 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 $n$ 个城市的标号从 $1\sim n$ ，阿龙决定从 $1$ 号城市出发，并最终在 $n$ 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 $n$ 个城市。 阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品——水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 假设 C 国有 $5$ 个大城市，城市的编号和道路连接情况如下图，单向箭头表示这条道路为单向通行，双向箭头表示这条道路为双向通行。 假设 $1\sim n$ 号城市的水晶球价格分别为 $4,3,5,6,1$ 。 阿龙可以选择如下一条线路：$1\rightarrow 2 \rightarrow 3 \rightarrow 5$，并在 $2$ 号城市以 $3$ 的价格买入水晶球，在 $3$ 号城市以 $5$ 的价格卖出水晶球，赚取的旅费数为 $2$ 。 阿龙也可以选择如下一条线路 $1\rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 5$，并在第 $1$ 次到达 $5$ 号城市时以 $1$ 的价格买入水晶球，在第 $2$ 次到达 $4$ 号城市时以 $6$ 的价格卖出水晶球，赚取的旅费数为 $5$ 。 现在给出 $n$ 个城市的水晶球价格， $m$ 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式输入第一行包含 $2$ 个正整数 $n$ 和 $m$，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 $n$ 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 $n$ 个城市的商品价格。 接下来 $m$ 行，每行有 $3$ 个正整数， $x,y,z$ ，每两个整数之间用一个空格隔开。如果 $z=1$，表示这条道路是城市 $x$ 到城市 $y$ 之间的单向道路；如果 $z=2$，表示这条道路为城市 $x$ 和城市 $y$ 之间的双向道路。 输出格式输出共 $1$ 行，包含 $1$ 个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 $0$ 。 样例12345675 54 3 5 6 11 2 11 4 12 3 23 5 14 5 2 样例输出15 数据范围与提示输入数据保证 $1$ 号城市可以到达 $n$ 号城市。 对于 $10\%$ 的数据，$n\le 6$； 对于 $30\%$ 的数据，$n\le 100$； 对于 $50\%$ 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市； 对于 $100\%$ 的数据，$1\le n\le 100,000$，$1\le m\le 500,000$，$1\le x, y \le n$，$1\le z\le 2$，各城市水晶球价格 $\le 100$。 loj链接 我已经很久很久很久没有水更过 $blog$ 了…… 最近暑假刚好有点空所以来写点题解。 这道题是一道很经典的分层图题目，虽然我看不出来 以前我可能写过这道题，但也是半懂不懂抄题解的，现在重写了一遍，感觉理解透彻了很多。 我们可以把这张图看成有相同的 $3$ 层，每一层中节点的连接方式如题所述，然后我们将第 $1$ 层的 $i$ 的节点与第 $2$ 层的相应节点连一条单向边，边权为 $-v[i]$ ，相当于从第 $1$ 层走到第 $2$ 层就是买了这个城市的水晶球，并且我们是走不回去的。 而第 $2$ 层与第 $3$ 层的连接同理，但是边权设为 $v[i]$ ，相当于我们卖掉了水晶球赚了 $v[i]$ 。 加上代码应该很容易理解。 12345678910111213141516171819202122for (int i = 1; i &lt;= m; i ++)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125;&#125;for (int i = 1; i &lt;= n; i ++)&#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]);&#125; 最后我们还要注意一个细节：我们是可以不买的，所以我们将每一层的 $n$ 节点都连向我们的最终节点，边权为 $0$, 我这里把 $0$ 号节点设为最终节点。 123add_edge(n, 0, 0);add_edge(2 * n, 0, 0);add_edge(3 * n, 0, 0); 最后我们观察：我们从 $1$ 号节点走到 $0$ 节点的最长路即是我们能获得的最大收益。 最后附上完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;const int M = 5e5 + 5;int n, m;int v[N];struct E&#123; int to, dis, next;&#125; edge[(M * 6) + (N &lt;&lt; 1)];int num_edge, head[N * 3];void add_edge(int from, int to, int dis)&#123; edge[++ num_edge] = (E)&#123;to, dis, head[from]&#125;; head[from] = num_edge;&#125;int dis[N * 3];bool vis[N * 3];struct point&#123; int u; bool friend operator &lt; (point a, point b) &#123; return dis[a.u] &lt; dis[b.u]; &#125;&#125;;std::priority_queue &lt;point&gt; q;void dijkstra(int s) // dijkstra万岁&#123; memset(dis, -127/3, sizeof dis); dis[s] = 0; vis[s] = true; q.push((point)&#123;s&#125;); while (!q.empty()) &#123; int u = q.top().u; q.pop(); vis[u] = false; for (int p = head[u]; p; p = edge[p].next) &#123; int v = edge[p].to, d = edge[p].dis; if (dis[v] &lt; dis[u] + d) &#123; dis[v] = dis[u] + d; if (!vis[v]) q.push((point)&#123;v&#125;), vis[v] = true; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;v[i]); int x, y, z; for (int i = 1; i &lt;= m; i ++) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) &#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]); &#125; add_edge(n, 0, 0); add_edge(2 * n, 0, 0); add_edge(3 * n, 0, 0); dijkstra(1); printf("%d", dis[0]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>OI</tag>
        <tag>loj</tag>
        <tag>最短路</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约瑟夫环]]></title>
    <url>%2FJosephus%2F</url>
    <content type="text"><![CDATA[$n$ 个人围成一圈,编号按顺序从 $0$ 到 $n-1$，从第一个人开始报数,数到 $m$ 的人出列,再由下一个人重新从 $1$ 开始报数,数到 $m$ 的人再出圈,……依次类推,直到所有的人都出圈,请输出最后一个出圈的人的编号。 今天稍微学习了一下这个玩意儿，感觉还挺神奇的。 第一种做法：暴力模拟这个我在这就不讲了，很容易就能写出来。 第二种做法：递推我们先考虑第一个出圈的人。 $m &lt; n$ 那么这个人的编号即为 $m - 1$ $m \ge n$ 那么这个人的编号即为 $(m - 1) \bmod n$ 综合一下，第一个出圈的人的编号绝对为 $(m - 1) \bmod n$ 方便起见，我们设 $k - 1 = (m - 1) \bmod n$ 。 于是这个圈就变成了这样： $k \quad k+1 \quad k+2 \quad … \quad n-2 \quad n-1 \quad 0 \quad 1 \quad 2 \quad … \quad k-3 \quad k-2$ 这个时候我们将这个圈转换一下，变成: $0 \quad 1 \quad 2 \quad … \quad n - 3 \quad n - 2$ 可以发现其实这个问题变成了 $n-1$ 个人报数的子问题。 所以我们只要将子问题的答案转换回去，就能知道最后那个人原来的编号。 稍微观察一下如何转换回去: $0 \Rightarrow k$ $1 \Rightarrow k + 1$ $…$ $n - k - 1 \Rightarrow n - 1$ $n - k \Rightarrow 0$ $n - k + 1 \Rightarrow 1$ $…$ $n - 3\Rightarrow k - 3$ $n - 2 \Rightarrow k - 2$ 不难发现 $x$ 转换回去后就变成了 $(x + k) \bmod n$ 我们设 $f[n]$ 表示 $n$ 个人报 $m$ 最后出圈人的编号。 显然，$f[1]=0$ 而根据我们刚才推的公式： $$f[n]=(f[n - 1]+k) \bmod n = (f[n - 1]+m \bmod n) \bmod n = (f[n - 1]+m ) \bmod n$$ 于是就可以愉快的递推了~ 代码1234567int Josephus(int n, int m)&#123; int res = 0; for (int i = 2; i &lt;= n; i ++) res = (res + m) % i; return res;&#125;]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的…第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>dfs</tag>
        <tag>剪枝</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$\text{W}$”或“$\text{B}$”。其中“$\text{W}$”表示白格，“$\text{B}$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}\text{W}&amp;\text{W}&amp;\text{B}&amp;\text{W}\\\text{B}&amp;\text{B}&amp;\text{W}&amp;\text{B}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{W}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{B}\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随机动漫图片]]></title>
    <url>%2FRandom_anime_picture%2F</url>
    <content type="text"><![CDATA[无聊的可以来刷一刷 刷出来se图也不能怪我，毕竟是随机的]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f[x]$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f[n-1]$ 那么我们 $f$ 的公式也就出来了。 $$f[n]=2n \times (2n-2) \times (f[n-1] + 2 \times (n-1) \times f[n-2])$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f[n-k]$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)(a\text{与}b$的最大公因数$)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\sim n$ 的阶乘逆元有两种方法： 先求出 $1\sim n$ 每个数的逆元，然后正推： $(i!)^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345inv_fac[1] = 1;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; 先求出 $n$ 的阶乘逆元，然后倒推： $(i!)^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\text{ ~ }n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过…$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出’ $No Answer$ ‘。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 御坂美琴 你指尖… $\text{Rachel·Gardner}$ Ray快来打我我爱她 小鸟游六花 邪王真眼赛高！ 桐崎千棘 自古金发多傲娇 小野寺小咲 …渣乐 休比 休比太太太太太太可爱了 $\text{Ruby Rose}$ 我也想要把新月玫瑰Ruby帅炸！ $\text{Weiss Schnee}$ 听说直男克傲娇 $\text{Blake Belladonna}$ 我爱猫娘！ $\text{Yang Xiao Long}$ 杨姐嫁我 筒隐月子 面瘫什么的 斯巴拉西 牧濑红莉栖 $\text{El psy congroo}$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $\text{QAQ}$ 雪乃太好看了 由比滨结衣 团子真的好可爱 戸塚彩加 但是，是男的。 川崎沙希 蓝发傲娇真好 一色彩羽 喜闻乐见的小妖精 古莉 虽然是个 $baka$ 但是我喜欢图是真的少啊 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样… 四糸乃 大哥哥这里有糖吃 鸢一折纸 折纸大师，受我一拜 八舞耶倶矢 幸运 $\text{E }($ 大雾 利姆鲁 利姆鲁对我一心一意 $\text{x}$毛 $\text{x}$毛天下第一 格蕾 $\lceil\mathfrak{Grave}\text{ }\mathfrak{for}\text{ }\mathfrak{you}\rfloor$ 镰刀很戳我xp 蓝毒 蓝毒可可爱爱 $2019.7.17$ 注:我还真是 $sb$ 连这都能列个表而且还不全]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下…这个博客也算是勉强搭成了，花了好久…感谢网上各位大佬帮助 $QAQ$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
