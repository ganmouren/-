<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于乐课网]]></title>
    <url>%2Fhow_to_hack_leke%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[破碎的白金色爱恋]]></title>
    <url>%2FBroken_platinum_love%2F</url>
    <content type="text"><![CDATA[我的白金精二几级了？ Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堕落的天蓝色天使]]></title>
    <url>%2FFallen_blue_angel%2F</url>
    <content type="text"><![CDATA[我本命的英文名？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2019游记]]></title>
    <url>%2FCSP2019%2F</url>
    <content type="text"><![CDATA[记录一下自己的爆零历程。 $\text{Day 0}$ 出于复习颓废的目的请了一天假。 复习了几个算法，学了一下 $\text{excrt}$ 和缩点，发现自己真的好多算法没学过…心态爆炸。 已经没有什么好害怕的了（指爆零毫无疑问）。 希望能考出个令人满意的成绩吧… $\text{TG}$$\text{Day 1}$ 进考场之前上了个厕所，看见什么移动厕所以为很高端，直到我看到了外面矗立的一排电话亭一样的东西… 压缩包密码是 $Ren2Zhen0Si1Kao9$ 可是你让我思考我也思考不出来啊。 $\text{T1}$ 我：难道不是把k的二进制输出来吗？ $\text{(1 minute later)}$ 我：打扰了。 然后就写了个递归，感觉还不错，瞄了一眼数据范围： $k\le2^{64}$ 我： 然后就想着 $80$ 分滚粗了。 自始至终我都没有想起有个东西叫 $\text{unsigned long long}$ 。 $\text{T2}$ 这啥玩意儿？啥玩意儿？ 于是写了个超级无敌暴力 $\text{DFS}$ ，大样例直接爆炸，然后心态就没了。 $\text{T3}$ 第一眼：不就是把 $1$ 移动到 $1$ 节点点然后删边再移后面几个数吗。 码量略大，打了 $1$ 小时多。 然后我看了一眼样例，发现咋有点不对呢？ 思考了一分钟：我：？ 最后直接输出 $1 \text{~} n$ 滚粗了，真自闭了。 第一次 $s$ 组就这样退役了。 $\text{Day2}$ 根本没抱多少希望进考场。 $\text{T1}$ 这尼玛啥啊？ 搁那推了半小时 $\text{DP}$ 硬是啥也没推出来… 写个 $\text{DFS}$ 就走了。 $\text{T2}$ 一眼 $\text{DP}$ 题。 看到那个 $(\sum\limits^{k_{j+1}-1}_{i=k_j} a[i])^2$ 就想起了以前看到的斜率优化。 然而没学（悲 所以自闭了， $O(n^3)$ $\text{DP}$ 写完就走了。 $T3$ 想到关于每一个点是哪些树的重心，然而完全没思路。 写了个暴力，又写了个链的情况，结果跑大样例跑爆栈了， 然后就自闭了，结果把一个对的写成错的了。 真的退役了啊… 估分：$80+30+0+30+30+30=200$ 实际：$85+45+0+32+36+55=253$ $\text{PJ}$$\text{PJ}$ 多少还是让我恢复了点自信心… $\text{T1}$ ？ $\text{T2}$ 一开始直接 $\text{std::queue}$ ，后来发现不行。 $\text{STL}$ 搞得我连队列都差点不会写… $\text{T3}$ 一眼 $\text{DP}$ 题。 但是我尼玛不会 $\text{DP}$ 啊喂！ 然后调了 $1$ 个多小时，奇迹般的写出来了。 然而是 $O(T^2nm)$ …希望数据水一点（逃 $\text{T4}$ 仔细想了一下发现这样一个传递可以在一个地方反复横跳， 我：这不就跑遍 $\text{BFS}$ 最短路吗？ 仔细想下不对，要维护奇最短路和偶最短路，于是写了个 $\text{BFS}$ ，然而并不知道有没有正确性… 估分：$100+100+80+100=380$ 实际：$100+100+70+100=370$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树状数组]]></title>
    <url>%2FBIT%2F</url>
    <content type="text"><![CDATA[树状数组是一种非常好打优美的数据结构，适用性十分广泛，而且常数非常小。 （自己花五分钟做的图） 下面蓝色的是我们的原数组，红色的即是我们的 $tree$ 数组。 树状数组的主旨是单点修改，查询前缀和，它的核心是 $\text{lowbit}$ 如 $\text{lowbit}((111)_2) = (001)_2,\text{lowbit}((110)_2) = (010)_2$ 即 $\text{lowbit}(7) = 1,\text{lowbit}(6) = 2$ 仔细观察原树，不难发现： $$tree[i]=\sum\limits_{j=i-lowbit(i)+1}^i a[j]$$ 于是我们所求的前缀和可以由 $tree$ 数组得出 $$sum[i] = tree[i] + tree[i - lowbit(i)] + tree[(i - lowbit(i)) - lowbit(i - lowbit(i))] …$$ 举个栗子： $$sum[(111)_2] = tree[(111)_2] + tree[(110)_2] + tree[(100)_2]$$ 这里需要仔细看几遍才能理解。 于是查询前缀和的操作就写好了。 1234567ll query(int p) // 查询前缀和&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 接下来考虑单点修改 当 $a[i]$ 改变的时候，所有包含 $i$ 这个位置的 $tree[j]$ 均要改变。 树状数组是一棵树！ 于是我们只需要找到 $tree[i]$ 的父亲，以及它的父亲的父亲爷爷…逐个更新 而再次仔细观察，我们惊奇的发现： 节点 $i$ 的父亲编号即为 $i + \text{lowbit}(i)$ ! 12345void add(int p, ll x) // 单点修改&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125; 单点修改 + 区间查询知道前缀和很容易计算出区间和。 区间 $[l,r]$ 的和即为 $sum[r] - sum[l-1]$ 。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125; 区间修改 + 单点查询这里我们要用到神奇的差分。 新建 $d$ 数组。 $$d[1]=a[1],d[i]=a[i]-a[i-1] (2\le i \le n)$$ 可以得出: $$a[p]=\sum\limits_{i=1}^{p}d[i]$$ 这是啥？不就是前缀和嘛！ 而当区间 $[l,r]$ 全部加上 $x$ 时，我们只需将 $d[l]$ 加上 $x$ ，$d[r + 1]$ 减去 $x$ 就好了。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 区间修改 + 区间查询这是最常用的算法，第一次看到的时候真的惊艳到我了。 $$sum[p]=\sum\limits_{i=1}^p a[i] = \sum\limits_{i=1}^p \sum\limits_{j=1}^i d[j]$$ 仔细看，发现 $d[1]$ 加了 $p$ 次， $d[2]$ 加了 $p-1$ 次， $d[3]$ 加了 $p-2$ 次… 于是可以继续推： $$sum[p]=\sum\limits_{i=1}^p d[i] \times (p - i + 1)$$ $$=(p+1)\times\sum\limits_{i=1}^p d[i] - \sum\limits_{i=1}^p d[i] \times i$$ 于是我们只需要同时维护 $\sum\limits_{i=1}^p d[i]$ 与 $\sum\limits_{i=1}^p d[i] \times i$ 便可以了。 1234567891011121314151617181920212223void add(int p, ll x)&#123; for (int i = p; i &lt;= n; i += (i &amp; -i)) tree1[i] += x, tree2[i] += x * p;&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; for (int i = p; i; i -= (i &amp; -i)) res += (p + 1) * tree1[i] - tree2[i]; return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>树状数组</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站]]></title>
    <url>%2FSome_websites%2F</url>
    <content type="text"><![CDATA[列举一些我常用的网站。 顺便方便下我自己 颓废：$\text{B站}$ $\text{generals.io}$ $\text{NGA}$ $\text{sm.ms}$ (图床) $\text{Pixiv}$ $\text{OI}$:$\text{loj}$ 洛谷 $\text{codeforces}$ $\text{OI WIKI}$ 奇奇怪怪的东西:图论 几何 函数(或许应归在颓废一类？) 数列(做题找规律神器) $\LaTeX$ 打比赛专用百度翻译]]></content>
      <tags>
        <tag>OI</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loj-2590 NOIP2009 最优贸易]]></title>
    <url>%2Floj-2590%2F</url>
    <content type="text"><![CDATA[题目描述C 国有 $n$ 个大城市和 $m$ 条道路，每条道路连接这 $n$ 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 $m$ 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 $1$ 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 $n$ 个城市的标号从 $1\sim n$ ，阿龙决定从 $1$ 号城市出发，并最终在 $n$ 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 $n$ 个城市。 阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品——水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 假设 C 国有 $5$ 个大城市，城市的编号和道路连接情况如下图，单向箭头表示这条道路为单向通行，双向箭头表示这条道路为双向通行。 假设 $1\sim n$ 号城市的水晶球价格分别为 $4,3,5,6,1$ 。 阿龙可以选择如下一条线路：$1\rightarrow 2 \rightarrow 3 \rightarrow 5$，并在 $2$ 号城市以 $3$ 的价格买入水晶球，在 $3$ 号城市以 $5$ 的价格卖出水晶球，赚取的旅费数为 $2$ 。 阿龙也可以选择如下一条线路 $1\rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 5$，并在第 $1$ 次到达 $5$ 号城市时以 $1$ 的价格买入水晶球，在第 $2$ 次到达 $4$ 号城市时以 $6$ 的价格卖出水晶球，赚取的旅费数为 $5$ 。 现在给出 $n$ 个城市的水晶球价格， $m$ 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式输入第一行包含 $2$ 个正整数 $n$ 和 $m$，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 $n$ 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 $n$ 个城市的商品价格。 接下来 $m$ 行，每行有 $3$ 个正整数， $x,y,z$ ，每两个整数之间用一个空格隔开。如果 $z=1$，表示这条道路是城市 $x$ 到城市 $y$ 之间的单向道路；如果 $z=2$，表示这条道路为城市 $x$ 和城市 $y$ 之间的双向道路。 输出格式输出共 $1$ 行，包含 $1$ 个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 $0$ 。 样例12345675 54 3 5 6 11 2 11 4 12 3 23 5 14 5 2 样例输出15 数据范围与提示输入数据保证 $1$ 号城市可以到达 $n$ 号城市。 对于 $10\%$ 的数据，$n\le 6$； 对于 $30\%$ 的数据，$n\le 100$； 对于 $50\%$ 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市； 对于 $100\%$ 的数据，$1\le n\le 100,000$，$1\le m\le 500,000$，$1\le x, y \le n$，$1\le z\le 2$，各城市水晶球价格 $\le 100$。 loj链接 我已经很久很久很久没有水更过 $blog$ 了…… 最近暑假刚好有点空所以来写点题解。 这道题是一道很经典的分层图题目，虽然我看不出来 以前我可能写过这道题，但也是半懂不懂抄题解的，现在重写了一遍，感觉理解透彻了很多。 我们可以把这张图看成有相同的 $3$ 层，每一层中节点的连接方式如题所述，然后我们将第 $1$ 层的 $i$ 的节点与第 $2$ 层的相应节点连一条单向边，边权为 $-v[i]$ ，相当于从第 $1$ 层走到第 $2$ 层就是买了这个城市的水晶球，并且我们是走不回去的。 而第 $2$ 层与第 $3$ 层的连接同理，但是边权设为 $v[i]$ ，相当于我们卖掉了水晶球赚了 $v[i]$ 。 加上代码应该很容易理解。 12345678910111213141516171819202122for (int i = 1; i &lt;= m; i ++)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125;&#125;for (int i = 1; i &lt;= n; i ++)&#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]);&#125; 最后我们还要注意一个细节：我们是可以不买的，所以我们将每一层的 $n$ 节点都连向我们的最终节点，边权为 $0$, 我这里把 $0$ 号节点设为最终节点。 123add_edge(n, 0, 0);add_edge(2 * n, 0, 0);add_edge(3 * n, 0, 0); 最后我们观察：我们从 $1$ 号节点走到 $0$ 节点的最长路即是我们能获得的最大收益。 最后附上完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;const int M = 5e5 + 5;int n, m;int v[N];struct E&#123; int to, dis, next;&#125; edge[(M * 6) + (N &lt;&lt; 1)];int num_edge, head[N * 3];void add_edge(int from, int to, int dis)&#123; edge[++ num_edge] = (E)&#123;to, dis, head[from]&#125;; head[from] = num_edge;&#125;int dis[N * 3];bool vis[N * 3];struct point&#123; int u; bool friend operator &lt; (point a, point b) &#123; return dis[a.u] &lt; dis[b.u]; &#125;&#125;;std::priority_queue &lt;point&gt; q;void dijkstra(int s) // dijkstra万岁&#123; memset(dis, -127/3, sizeof dis); dis[s] = 0; vis[s] = true; q.push((point)&#123;s&#125;); while (!q.empty()) &#123; int u = q.top().u; q.pop(); vis[u] = false; for (int p = head[u]; p; p = edge[p].next) &#123; int v = edge[p].to, d = edge[p].dis; if (dis[v] &lt; dis[u] + d) &#123; dis[v] = dis[u] + d; if (!vis[v]) q.push((point)&#123;v&#125;), vis[v] = true; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;v[i]); int x, y, z; for (int i = 1; i &lt;= m; i ++) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) &#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]); &#125; add_edge(n, 0, 0); add_edge(2 * n, 0, 0); add_edge(3 * n, 0, 0); dijkstra(1); printf("%d", dis[0]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>OI</tag>
        <tag>loj</tag>
        <tag>最短路</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约瑟夫环]]></title>
    <url>%2FJosephus%2F</url>
    <content type="text"><![CDATA[$n$ 个人围成一圈,编号按顺序从 $0$ 到 $n-1$，从第一个人开始报数,数到 $m$ 的人出列,再由下一个人重新从 $1$ 开始报数,数到 $m$ 的人再出圈,……依次类推,直到所有的人都出圈,请输出最后一个出圈的人的编号。 今天稍微学习了一下这个玩意儿，感觉还挺神奇的。 第一种做法：暴力模拟这个我在这就不讲了，很容易就能写出来。 第二种做法：递推我们先考虑第一个出圈的人。 $m &lt; n$ 那么这个人的编号即为 $m - 1$ $m \ge n$ 那么这个人的编号即为 $(m - 1) \bmod n$ 综合一下，第一个出圈的人的编号绝对为 $(m - 1) \bmod n$ 方便起见，我们设 $k - 1 = (m - 1) \bmod n$ 。 于是这个圈就变成了这样： $k \quad k+1 \quad k+2 \quad … \quad n-2 \quad n-1 \quad 0 \quad 1 \quad 2 \quad … \quad k-3 \quad k-2$ 这个时候我们将这个圈转换一下，变成: $0 \quad 1 \quad 2 \quad … \quad n - 3 \quad n - 2$ 可以发现其实这个问题变成了 $n-1$ 个人报数的子问题。 所以我们只要将子问题的答案转换回去，就能知道最后那个人原来的编号。 稍微观察一下如何转换回去: $0 \Rightarrow k$ $1 \Rightarrow k + 1$ $…$ $n - k - 1 \Rightarrow n - 1$ $n - k \Rightarrow 0$ $n - k + 1 \Rightarrow 1$ $…$ $n - 3\Rightarrow k - 3$ $n - 2 \Rightarrow k - 2$ 不难发现 $x$ 转换回去后就变成了 $(x + k) \bmod n$ 我们设 $f[n]$ 表示 $n$ 个人报 $m$ 最后出圈人的编号。 显然，$f[1]=0$ 而根据我们刚才推的公式： $$f[n]=(f[n - 1]+k) \bmod n = (f[n - 1]+m \bmod n) \bmod n = (f[n - 1]+m ) \bmod n$$ 于是就可以愉快的递推了~ 代码1234567int Josephus(int n, int m)&#123; int res = 0; for (int i = 2; i &lt;= n; i ++) res = (res + m) % i; return res;&#125;]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的…第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>dfs</tag>
        <tag>剪枝</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$\text{W}$”或“$\text{B}$”。其中“$\text{W}$”表示白格，“$\text{B}$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}\text{W}&amp;\text{W}&amp;\text{B}&amp;\text{W}\\\text{B}&amp;\text{B}&amp;\text{W}&amp;\text{B}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{W}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{B}\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随机动漫图片]]></title>
    <url>%2FRandom_anime_picture%2F</url>
    <content type="text"><![CDATA[无聊的可以来刷一刷 刷出来se图也不能怪我，毕竟是随机的]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f[x]$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f[n-1]$ 那么我们 $f$ 的公式也就出来了。 $$f[n]=2n \times (2n-2) \times (f[n-1] + 2 \times (n-1) \times f[n-2])$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f[n-k]$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)(a\text{与}b$的最大公因数$)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\sim n$ 的阶乘逆元有两种方法： 先求出 $1\sim n$ 每个数的逆元，然后正推： $(i!)^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345inv_fac[1] = 1;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; 先求出 $n$ 的阶乘逆元，然后倒推： $(i!)^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\text{ ~ }n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过…$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出’ $No Answer$ ‘。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 御坂美琴 你指尖… $\text{Rachel·Gardner}$ Ray快来打我我爱她 小鸟游六花 邪王真眼赛高！ 桐崎千棘 自古金发多傲娇 小野寺小咲 …渣乐 休比 休比太太太太太太可爱了 $\text{Ruby Rose}$ 我也想要把新月玫瑰Ruby帅炸！ $\text{Weiss Schnee}$ 听说直男克傲娇 $\text{Blake Belladonna}$ 我爱猫娘！ $\text{Yang Xiao Long}$ 杨姐嫁我 筒隐月子 面瘫什么的 斯巴拉西 牧濑红莉栖 $\text{El psy congroo}$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $\text{QAQ}$ 雪乃太好看了 由比滨结衣 团子真的好可爱 戸塚彩加 但是，是男的。 川崎沙希 蓝发傲娇真好 一色彩羽 喜闻乐见的小妖精 古莉 虽然是个 $baka$ 但是我喜欢图是真的少啊 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样… 四糸乃 大哥哥这里有糖吃 鸢一折纸 折纸大师，受我一拜 八舞耶倶矢 幸运 $\text{E }($ 大雾 利姆鲁 利姆鲁对我一心一意 $\text{x}$毛 $\text{x}$毛天下第一 格蕾 $\lceil\mathfrak{Grave}\text{ }\mathfrak{for}\text{ }\mathfrak{you}\rfloor$ 镰刀很戳我xp 蓝毒 蓝毒可可爱爱 $2019.7.17$ 注:我还真是 $sb$ 连这都能列个表而且还不全]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>暴力</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下…这个博客也算是勉强搭成了，花了好久…感谢网上各位大佬帮助 $QAQ$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
