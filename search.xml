<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[欢迎来到我的博客, 请输入密码来阅读此文章. Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$W$”或“$B$”。其中“$W$”表示白格，“$B$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}W&amp;W&amp;B&amp;W\\B&amp;B&amp;W&amp;B\\W&amp;B&amp;W&amp;W\\W&amp;B&amp;W&amp;B\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随机动漫图片]]></title>
    <url>%2FRandom_anime_picture%2F</url>
    <content type="text"><![CDATA[无聊的可以来刷一刷 刷出来se图也不能怪我，毕竟是随机的]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f(x)$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f(n-1)$ 那么我们 $f$ 的公式也就出来了。 $$f(n)=2n \times (2n-2) \times (f(n-1) + 2 \times (n-1) \times f(n-2))$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f(n-k)$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)(a\text{与}b$的最大公因数$)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数组对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\text{ ~ }n$ 的阶乘逆元有两种方法： 先求出 $1\text{ ~ }n$ 每个数的逆元，然后正推： $i!^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345for (int i = 1; i &lt;= n; i ++)&#123; inv_fac[i] = inv(i); inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p;&#125; 先求出 $n$ 的阶乘逆元，然后倒推： $i!^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\text{ ~ }n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过…$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出’ $No Answer$ ‘。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 血小板 我要太阳我的细胞 御坂美琴 你指尖… $Rachel·Gardner$ Ray快来打我我爱她 小鸟游六花 邪王真眼赛高！ 桐崎千棘 自古金发多傲娇 小野寺小咲 …渣乐 白 白，来跟我玩♂游♂戏吧 休比 休比太太太太太太可爱了 吉普莉尔 我来帮忙按摩吧⁄(⁄⁄•⁄ω⁄•⁄⁄)⁄ $Ruby\;Rose$ 我也想要把新月玫瑰Ruby帅炸！ $Weiss\;Schnee$ 听说直男克傲娇 $Blake\;Belladonna$ 我爱猫娘！ $Yang\;Xiao\;Long$ 杨姐嫁我 筒隐月子 面瘫什么的，斯巴拉西 小豆梓 强制傲娇…真是个神奇的属性 牧濑红莉栖 $El\;psy\;congroo$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $QAQ$ 雪乃太好看了 由比滨结衣 团子真的好可爱 戸塚彩加 但是，是男的。 川崎沙希 蓝发傲娇真好 一色彩羽 喜闻乐见的小妖精 阿斯托尔福 可惜也是个男的 古莉 虽然是个 $baka$ 但是我喜欢图是真的少啊 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样… 夜刀神十香 本子香 $($ 大雾 四糸乃 大哥哥这里有糖吃 五河琴里 你再傲娇试试 $?$ $($ 摘头巾 崇宮真那 又是个重度兄控的妹妹(ﾉﾟ∀ﾟ)ﾉ 时崎狂三 狂三别打我 诱宵美九 百合多好啊 $($ 痴笑 鸢一折纸 折纸大师，受我一拜 八舞耶倶矢 幸运 $E$ $($ 大雾 中野一花 我全都要！ 中野二乃 我全都要！ 中野三玖 我全都要！ 中野四叶 我全都要！ 中野五月 我全都要！ 利姆鲁 利姆鲁对我一心一意 $Saber$ 没错我就是你的 $Master$ ，我们来补魔吧]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>暴力</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下…这个博客也算是勉强搭成了，花了好久…感谢网上各位大佬帮助$qwq$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
