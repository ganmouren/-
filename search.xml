<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的…第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>dfs</tag>
        <tag>剪枝</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$W$”或“$B$”。其中“$W$”表示白格，“$B$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}W&amp;W&amp;B&amp;W\\B&amp;B&amp;W&amp;B\\W&amp;B&amp;W&amp;W\\W&amp;B&amp;W&amp;B\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随机动漫图片]]></title>
    <url>%2FRandom_anime_picture%2F</url>
    <content type="text"><![CDATA[无聊的可以来刷一刷 刷出来se图也不能怪我，毕竟是随机的]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f(x)$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f(n-1)$ 那么我们 $f$ 的公式也就出来了。 $$f(n)=2n \times (2n-2) \times (f(n-1) + 2 \times (n-1) \times f(n-2))$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f(n-k)$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)(a\text{与}b$的最大公因数$)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数组对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\text{ ~ }n$ 的阶乘逆元有两种方法： 先求出 $1\text{ ~ }n$ 每个数的逆元，然后正推： $i!^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345for (int i = 1; i &lt;= n; i ++)&#123; inv_fac[i] = inv(i); inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p;&#125; 先求出 $n$ 的阶乘逆元，然后倒推： $i!^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\text{ ~ }n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过…$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出’ $No Answer$ ‘。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 血小板 我要太阳我的细胞 御坂美琴 你指尖… $Rachel·Gardner$ Ray快来打我我爱她 小鸟游六花 邪王真眼赛高！ 桐崎千棘 自古金发多傲娇 小野寺小咲 …渣乐 白 白，来跟我玩♂游♂戏吧 休比 休比太太太太太太可爱了 吉普莉尔 我来帮忙按摩吧⁄(⁄⁄•⁄ω⁄•⁄⁄)⁄ $Ruby\;Rose$ 我也想要把新月玫瑰Ruby帅炸！ $Weiss\;Schnee$ 听说直男克傲娇 $Blake\;Belladonna$ 我爱猫娘！ $Yang\;Xiao\;Long$ 杨姐嫁我 筒隐月子 面瘫什么的，斯巴拉西 小豆梓 强制傲娇…真是个神奇的属性 牧濑红莉栖 $El\;psy\;congroo$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $QAQ$ 雪乃太好看了 由比滨结衣 团子真的好可爱 戸塚彩加 但是，是男的。 川崎沙希 蓝发傲娇真好 一色彩羽 喜闻乐见的小妖精 阿斯托尔福 可惜也是个男的 古莉 虽然是个 $baka$ 但是我喜欢图是真的少啊 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样… 夜刀神十香 本子香 $($ 大雾 四糸乃 大哥哥这里有糖吃 五河琴里 你再傲娇试试 $?$ $($ 摘头巾 崇宮真那 又是个重度兄控的妹妹(ﾉﾟ∀ﾟ)ﾉ 时崎狂三 狂三别打我 诱宵美九 百合多好啊 $($ 痴笑 鸢一折纸 折纸大师，受我一拜 八舞耶倶矢 幸运 $E$ $($ 大雾 中野一花 我全都要！ 中野二乃 我全都要！ 中野三玖 我全都要！ 中野四叶 我全都要！ 中野五月 我全都要！ 利姆鲁 利姆鲁对我一心一意 $Saber$ $\color{gold}{吾王剑锋所指}$$\color{gold}{我等心之所向}$]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>暴力</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下…这个博客也算是勉强搭成了，花了好久…感谢网上各位大佬帮助$qwq$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
