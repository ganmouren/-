<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[默哀。]]></title>
    <url>%2Fcnm%2F</url>
    <content type="text"><![CDATA[$$\rm\color{red}{ITAIYO——ITAIYO——}$$]]></content>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[517coding 题解合集]]></title>
    <url>%2F517coding%2F</url>
    <content type="text"><![CDATA[写个合集，加深一下自己的理解。 $517$ 的题切起来真的是有一种奇妙的快感。 $T3960$题意给定一个长度为 $N$ 的整数序列以及整数 $S$ 。求最短的连续子序列的长度使得这个连续子序列的和大于等于 $S$ 。如果找不着，输出 $0$ 。 $1\le N \le 10^{5}$ 题解使用双指针。 代码12345678910111213141516171819202122232425262728293031323334#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;int n, s;int sum[N];int main()&#123; scanf("%d%d", &amp;n, &amp;s); for (int i = 1; i &lt;= n; i ++) &#123; int x; scanf("%d", &amp;x); sum[i] = sum[i - 1] + x; &#125; if (sum[n] &lt; s) &#123; printf("0"); return 0; &#125; int l = 1, r = 1, ans = n; while (sum[r] &lt; s) r ++; while (r &lt;= n) &#123; while (sum[r] - sum[l] &gt;= s) l ++; ans = std::min(ans, r - l + 1); r ++; &#125; printf("%d", ans); return 0;&#125; $T3970$题意给定长度为 $N$ 整数序列，要求计算有多少区间，它里面数字的异或之和=相加之和。 $1\le N \le 2 \cdot 10^{5}$ 题解发现异或之和=相加之和的要求是这些数的二进制的1位互不相同，进而推出一个序列满足要求的前提是其任意子序列满足要求。 于是继续双指针。 代码1234567891011121314151617181920212223242526#include &lt;bits/stdc++.h&gt;typedef long long ll;const int N = 2e5 + 5;int n;ll a[N];ll s1[N], s2[N];ll ans;int main()&#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i ++) scanf("%lld", &amp;a[i]), s1[i] = s1[i - 1] + a[i], s2[i] = s2[i - 1] ^ a[i]; int l = 1, r = 1; while (r &lt;= n) &#123; while (s1[r] - s1[l - 1] != (s2[r] ^ s2[l - 1])) l ++; ans += r - l + 1; // 此处加上的是以 r 为右边界的方案 r ++; &#125; printf("%lld", ans); return 0;&#125; $T3980$题意给定 $n$ 个整数, 从中选出若干个数字（每个数字最多选一次），使得它们的和取余 $m$ 最大，求最大的余数。 $1 \le n \le 35,1 \le m \le 10^9$ 题解使用折半搜索其特征为 $O(2^n)$ 会爆，但是 $O(2^{\frac{n}{2}})$ 不会爆，而且左右两边可以以某种方式合并。 我们枚举左右两半所有情况，注意到如果两边的两种方案加起来大于 $m$ ，那么一定不是最优的。正规的说，如果有 $a,b &lt; m$ ，那么 $a + b - m &lt; \min(a,b)$ 所以对于左半边的每一种方案，我们二分右半边与其加起来小于 $m$ 的最大值的方案，并用其更新答案。 太优美了！ 代码12345678910111213141516171819202122232425262728293031#include &lt;bits/stdc++.h&gt;const int N = 35 + 5;const int INF = 1 &lt;&lt; 30;int n, m;int a[N];std::vector &lt;int&gt; ans[2];int dfs(int p, int r, int sum, int num)&#123; ans[num].push_back(sum); for (int i = p + 1; i &lt;= r; i ++) dfs(i, r, (sum + a[i]) % m, num);&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;a[i]), a[i] %= m; dfs(0, n / 2, 0, 0); dfs(n / 2, n, 0, 1); std::sort(ans[0].begin(), ans[0].end()); std::sort(ans[1].begin(), ans[1].end()); int res = 0; for (int i = 0; i &lt; ans[0].size(); i ++) res = std::max(res, ans[0][i] + *--std::lower_bound(ans[1].begin(), ans[1].end(), m - ans[0][i])); printf("%d", res); return 0;&#125; $T3990$题意给定一个长度为N的字符串 $S$ 。 每次可以从 $S$ 的开头或者结尾取出一个字符，放到一个 $T$ 字符串的尾部。 输出字典序最小的 $T$ 字符串，每 $80$ 个字符换一行输出。 $1 \le N \le 2000$ 题解$l,r$ 记录当前走到位置，当 $s[l]!=s[r]$ 时明显输出小的那个，否则往里面探同样深度，得到哪边后来最优走哪边。 代码123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;int n;std::string s;int cnt;void print(char c)&#123; putchar(c); cnt ++; if (cnt % 80 == 0) printf("\n");&#125;int main()&#123; scanf("%d", &amp;n); std::cin &gt;&gt; s; int l = 0, r = n - 1; while (l &lt;= r) &#123; bool f = 0; for (int i = 0; 2 * i &lt;= r - l; i ++) // l + i &lt;= r - i &#123; if (s[l + i] &lt; s[r - i]) &#123; f = 0; break; &#125; else if (s[l + i] &gt; s[r - i]) &#123; f = 1; break; &#125; &#125; if (!f) print(s[l ++]); else print(s[r --]); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小技巧锦集]]></title>
    <url>%2Ftips%2F</url>
    <content type="text"><![CDATA[记录一下总结出的一些小技巧。 基础开变量 or 数组 不开 long long 见祖宗，必要时开 unsigned long long 做题时一定要注意数据范围，并考虑每一步计算是否会爆 int 。 数组一定要开到足够大小 一定要结合题目，看清范围，有时需要经过一定计算。 PS: 有的时候 cf 显示 WA 实际上是数组爆了我还因为这个掉过一次分。 输入 尽量少用 cin ， scanf 永远滴神 有的时候输入速度确实能决定结果517天天卡。 输入字符串或单个字符时用 scanf + %s 需要读单个字符尽量都用 %s ,以及避免读回车。 —— 517 初始化 memset(a, 0x3f, sizeof a) 具体算法二分 二分的时候 l 与 r 不要作死定成 $\pm$INF 会被卡。嗯。 想二分的时候看清楚有无单调性，单调性是怎样的。 数论相关 题目有取模，计算中有相减的时候，计算时加上一个模数 数学题不要忘记考虑 0 $\text{To be continued}$]]></content>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2020游记]]></title>
    <url>%2FCSP2020%2F</url>
    <content type="text"><![CDATA[高中第一次考信奥，希望不会 $\rm AFO$ 。 初赛$\rm 10.11$初赛进行时，感觉比去年卷子简单一点...或者是我稍微变强了一点点？ 考完之后根据洛咕答案对了一下感觉还行，估分大概 $\rm 88$ ，但是有几道憨批题错了... $\rm 10.17$初赛成绩出来是 $\rm 89$ 所以这差了1分什么鬼啊 现在就是好好去准备复赛了...感觉我复赛可能还不一定比初赛强... $\text{To be continued}$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[真情假爱]]></title>
    <url>%2FLOVE%2F</url>
    <content type="text"><![CDATA[请输入密码证明身份以查看高级机密。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于乐课网]]></title>
    <url>%2Fhow_to_hack_leke%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[破碎的白金色爱恋]]></title>
    <url>%2FBroken_platinum_love%2F</url>
    <content type="text"><![CDATA[我的白金精二几级了？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堕落的天蓝色天使]]></title>
    <url>%2FFallen_blue_angel%2F</url>
    <content type="text"><![CDATA[我本命的英文名？ Incorrect Password! No content to display! U2FsdGVkX19Kwh/nnMZAqjsNVfwlOI3RkQrPIn2xLwHOVcnrByFRzMGgNKQnExt5r9OMk1Sp1wJUTX/3BhUe40eNUVh93Y2N/b7544sAPjgASRVeRNVuuZq7Zq1ZpAphqfHX0xMmsCXJf3QjqdU4mm0pxSubA6zThGtxOu6tnVhWfn9LXiIRM5pjCqltITrkCXeFudcu9aDGPcnjuGILcBBa0R2wz7YSZRjRuDRlP4DgCA3Fc115NBxubE4rDExyi2Zo5pmmtiIAWnPMN7SwL61Kd3Qu4bfXuo7NoypMADOG5rDM0qox2vcshT+tQtoeSMOMfDqKQjRyavQifzp59+1Hc93oC4w2RrrF6FsRM9R+0Nwt7y4E68WQ0wvTK3u1oPizngOoy7zigPa3NMZNSTUfkC28elzTntJghfPufWefHpb8vTVrY6JwXdnhjRe6xdqSDKmBLpVgsuIZeg01U5ThlWr3dCYnqCKWYFsq/VTl8OAA1cZZZJ+Rr/7GNS/9uimD/5lz+kGeDeBAb3bqxlLtza9ktZsAogWgw8/fBM2KaiAQ6hILuV4yVGvIgWSpvtN9/hGCpBoIQlEwr8R011+jbppPYhahFJChS1B41pfqUPNjSq6urIy17pxy7/W3T5JVNNXWV7gwEgiGXsihRfI1ubTy42MQFJjg5QGyCwaZFdWvp6hLa6S4PW7ebmHwIuOszBy6pWL2+BGk7QNXytt27lM6oNbOmW3yhu8tRmjRj8/EAVQWsheAtqSqx4FK/9ZaWfQ6E2rGyDybzK3MKVyNmD5nMIBmIdVwEEgaRbDWuU2CFBYTjnO+XOmvUygqDLDWBKBGAJ6aWQ65459HPfe/HAKmn2S0x75dBB60DXElelJfojSDwJv6Dy7NmH69tFuqk72UuvVincZedMCEYEyBtYASo74F68CYrz6fuMASscMTsddnlvppYf/cbpVv+SMm4ediE+CY8pTTAaquDY5VvEKsANAJti6VuadGy5sTmhKe5ZOhLXWMGFEo4ls9sfo/eFkH4q4y1pZv2+ZBCZODehQO+14BBq0SBCv4KCCkgcZJ9Mp4vTM5RTyeO716WKYMV6GdT4cxUGOWIf2Qx3NjP35/um2mw4W/fd9qc6mEn0OKfwwJ9771Guy5TE5ZIOBKSeJoNfLIb+60swLT2mEGy35r7g1CTfKiAIwPXsT3cJwpb5VNU7q9qNpPBVVXVhx5vulKu3xqF4V1aq00kLI9TTY+hryhoJDFh4oFX5mwRNPhxuC1kEiBDl+blTox3g3P2MGc9FTUwaGQUvksWfiiGASYnfmQRBrmegV6/XSWBwUhkzdHmUFQXOsnjeALi3wLxj/jf3gjtuIXSDnwyB71g2SCOiKQJz1Z1LPG33yqxUNfRNLLiHQzZaUJra6gTICC3SmM2SyxvaU0J/HPa7aZB1BSIQBnglYdFbh0eWK/SvGiXvQA9htpg4AjAJl6v9FXkZ/W0ukHdedmWKKjSuVABaVGPNoPF8p5fsTx0pKbMLE3YHg2g/POlv4TyrNHQiFXyoosjVqSu9Nc0ap5vGR+Bzi2KdFZV1O384VjimOYP1L1sCUpn3joox4NtWDu268b0GVFtsug0hSQIJUewv4s5NJyg6Oy+6DOsc6QVBgEonS+tWrThmxbdia+bkMv7HkdI4kcawcYzOanu9NVfkoEOJdny2zpbxXg+xgjML+s4Fq4zDSquisMLu5z2z80TP+y+10FaF7thmtHVYBFi0XCGEOlpcGQGBiJhg9yLgmIb6lc8FkK58g1uNSHNQYKwTLq9tMn26h6ce6mYlBdFw18xUhwAWFj74co0U7bRmK8wyIQcnI89C9CVCNJaN2hY+1i/cDS7LyADAyIbreC4r5OVjYFohlBoVvJ19FU/m3urTCpVPPQFs0YyahxrMyGh5Fcl0X/31DjoBpexYgXl/7L0JzrXX7LAouK71apb0g/HuuWInjnwByoGTy+7FjiL1CXwKlg5mx2EeTBF4Kdny4SCYkapIpxDsUugW0KyV/J0+CPuKoEN2eGAYi509WddbXqMst+QmuXkl3D3TvMEENRXPCMfbZPdG4CmtYBy34Rqbc3LCkOPqlGZ8C6fL+sL0kno7nawCB5NSkzRQ5F65GHc4nT1Cpu5+npkKC3u4U6KoEwO9eE1qr3wXDjE8N/GYRrV5qy6bD38HoZ9V9Bpw7quNBW2DWjFVQW0aLtV9/I8Xq7Pn0Z2TUmSIc51nV+ZsygXfNjisCOTO5EnB+W3rwIFVprLe3VZQ0dgPP66AJ+kU8zCFkXh3ncMxGlQjni8l6vBJ7n6b8huaTukeF1edD4fqWaCWizH2fZOg/P31oUBFFvIO0udPMDRMAbBmZgT7n7NEWeYVygn33H/C71FRBQUkGyZX88kU1qW4PjQ8f0SOXdZipR5DLUFeebFDzqsv4yKoc9+I1M8sRuCsgtfuCDQ+5yKnkDqyIJ9tkfdNaFcZYPVAgYR4P6Dl072t8vKFR88vNovCw4rnbTot3sLIQWicIgCs4l6puNI+jLCD3V15W3JaOEynISBYtpIY7zQjhrI+dptieRZQeFwsoidDIN+PuyZ5DbBYh8Z6s8bKcw4XI1s3UwF6UawhJAmG7fOMwyKzI9oFuUCP73FlQwXbhT3nnDdtn2fEThiuHxCrK75oUlJTC4ZDRSRJ9icGEJWbD7jtqSHeOsEbaddIPMSK4yCObcj3MxRbmnsn8fpFOE8Wj7x3iREphtQOo+rLVgYzLXiwr4qCPHmhEKuxkPAVI49yGC9vplmuyRG+7dFww0cGr5e/JqQ0Ay54gc4tqwqYFtpWuVO42eeQ9msQ4Lz9cXB+YFiH5itpBaL/0UaBL9rsmPMHWMlB6mln06xv/BjE/ToYXXbTc+v06CqkPsqGVxNjWY2dFbzEGDMN/06iR76TaHN3c302dWXluA7FF5RhKq7cE2Sd7am9rsq+JxW008c3b2ME67y9XZfX+YkhGQ8qwUvOkMRZkZYMw+7lxgKQCSbHvczmDk0KSgV8cyHurKA6sWiKl5zCuZEkoVpOhuSR/6LJBZYwbJvvQKkT+pqCM4RsLZTLDmjh3Zftgr7IcqnNL4dE97/ifzxvtrjPtN5QjfOjKRWPtCNO+n3wFI3rwksQwpuUpIo2SPfV1PRr+ifHHzASxt8yZbKTFE3nhXZUmU7AiIr5uWFOxVZE6w/F1qu2ua1jzi+KLMiFTNBJ5WXyq2+uSo2tqFDrcs/pXNajZeJKtBm41IE+9JJZ2CVusyH5xHosVd0X6F2iaGJMtIT2HztCWzzOxOGZmuII6VGhH3tvgbHnlnyDondtuSkaqPyAO0i/qr62NmLCcSH12Exem3uKzJD3kLe7mducSZbCJODwsssdGXJwttO+68TtVb3W/iLPmVD1vbQlUo6a6NyllbhfctfGfnPgfRYvdEg+14/ACXveFqeaujXkcx3DsKmRA88VNlZE3MjPsSU/nulTzQMzckQBMfanScIeyetFVSJaDGoynNVqL3C5mPxEfpzWsSrMX8+jVk+9yphXgmyp4ptUPAY9YxOoeksaSNZehaBRkPhAgpIIgOyJWy4csfAgPimc3EnbyrKhpJt+mcHnVtQcMeMZr2NVBfG1AiA4+1jXy95I+oQ37xaPzDNCnVTMUzRmqLVZsplAgik9sFcSJ6xPcXGutJZKilwSKuWmtLp7G/noqdYFxp4f1qdZnveSQXfkWKCmGx3KU4nQyWJ0Ob/OLpiaQ/cXgTLyernZycwkqvrN+eTfPz7u+FhnPiOmiHl6GG7Yhje3fw/q089JdtLV/k/JKmdRCXYuATJ+RDeSuXbQ0kwEo8m73od3jImA/SOhLt3j6rgPytQxo1bgpS8UtoYVc+rpWpcTpdd1KY3Pcr2+y8uxxMFHHwvaxrjp7XQEUD9ARCO5VsCX1g6BJUy25IEhY7xWxQ9fQC/ERQHjJeKewX15+Y/wrV4incRoXlovkot/ybBviv/exXNzyzh5bFDQ8UosSyqlwxVjXpxS8ZFf4oJXXQ8jB7v6ghLH+QEJFELMk5rHnmCUFmUULETk7aRiieHxNgSXOnjXpaeZt9jIJdeFVHz2qswWSEk+1lL4y1YdNg+Lqc7U18z/hqi8rZP+YhbwUIPbCb2BoaIluG4473U2O3PBOCw9SHZSubkADDxmuGS3dRi6h5kMYvoBDWt/ihhPSKCyBWWl35ziscSgUnai0TG8OSS50+o6RNfpn+FRui9cPcv//YGT7vvzTXMT+V/T6J0lFV83j/vd0lc9RjVxvqFHHpF2k+I0Kg1YPYOEC/2c26yg0L1pkaLbaXi5XeeRAYX8GHk6P16RSOprw2TUyT3V6rJ/3OSwZD2FLHVdLe0w/8yqrp9Ndvqs/cGUtpK4b4/f1PtKAUIxamhpwsoJT0kVNdQy5B3YkM3lcirjykX8lvKa8hFophkHrizoY9HIcJu9vvGifWdvDJMkGPCxb4rVGRiqvEAj4w3LNPy5WjKLarO3//lCDC/B4JvnteVZMizNwfI94mL7et00ciosUHAS34s1KkAHotSCHzrlhiJgfbzDZ4MIF/qrJLIKCTg0Kjt52RxE8AisfaZ/ci+7gsQMV0RJ3RJFNrY9U7UypF8JZZHO7jDyKov+MnUXjs5RWMSay7+Q9m97sQMI1Upgm5jsoqbAl+/g1O7ZZUcgBRWyv2EEhTdpyzmdORQ7LUKsHcNihC0g8mT8OeFeKxtowFSF6t+qQ2ZyWNpVYtmyIOGR6yvFFWwzDGtDVjZGoFxTtpy7qCvzKsqqHp/oWjDq+Zjfd8QJUt8nIZy2S3KmaNqSiZJWAo6s6WxicqQZG+qWkgXCq5sc4raMJTJo809akCLsDGEFVJyk/egprivuKqqGY0YtcCHkRw8iSZ6SJSYS9EZj7wvRJqPfzI+p4AhO0g1pUbbFu48f/1BO/ofYoXApEzhH/gGvuhp8RcaxOkc0UA9xz0A/Sgvq4c1ez8KBWcA2szLCDZ6IQYh3MHXyxLotPQ4yYKtX4cp8UCEPfHEbK0CoqjtPll97UE/hfPFytxzv2K85f+3PpsOABhFqezd8ZLqSa2VlS2fmoVj2HfcwYIBHW22YPUvbgmhsZo87k+mdmMC8AImosCNQ82gDj3aE0fc7/jgnKEcqqoulbZFhMXkI84K3UqLdA2gAUJHKEeucdItU4Q42wrtB3Myzeu8ybzNG5DLBQgIUtSsuBbHyKqR8mof+Zepb/d/UOqWF8VF+jQIKUfVtJc0AUOUHTfC29KSk/Xl1p/lhsWG8xalvu12YNgSqzRPto0JWcjxNFzpSY6eD3frnAyrJHMiNrylsYv0DPYEqDCv1H9Rmz1+7inzlPK7Sxy8tv79hgVBxsHf2qz4Raq8z2xfkgGx2pWB/cg5esaAuQ0U7Ay7OIWP2rKD+FEYjyPvzywPAZXiyAeEfqalxs/+bmV5b0988tdCMWQt4P5cl7eeX1wBZgDMUo2y4LMgyY5u7/mrb9QDR0Q30h+JjnjcF+UGFukMgbkumSRz++SmuF/um3KFeeJMxwDSX64eH4nUL4zvui9ZRVjBk87wbspPBXYeyczI53j12/t3zm+pQfzWIBDLNhRwZn236NqlFWtb0K7jU7ZZat6DQYolWXeihyYQEtT0pszNF0mC7bKtmnvTiAk3HBfoWsBVO65gfY/62KGtQX17VRrGt+EylEtMPY3Km9QyoSBaYPxt3BTvg56Ue8s4LPAaIURiXBxUcf2Mr18xr+XMpsL7E5h5QDCiGzwJrZyNLThp3v1LFaFB39JNnEzvSiyZoceljBJeG0IJ45qdDcrYQy8byrG5NG8py9k4A77Hh+4fXTzk/l57HCQfQu+W9mKUuDGgU0/usgi7FhToFbMPRnrA3w8Po2wbF4SdeHd1QzmTKf1o+p3GJC5EY67O7G5YgVG05+d4q1RWd49kl5igM7tASK/WDRjPlMBV0ZxAOg805uZNbaZXRyVfp2gD7qj2rHfdw8qK4Eya9lmsu2aA2BLDtgrL60NuQgl5f6aplB9kPat68TNcZAZaaH8swJ0lp8WjGXRBCOroTl8RFGTDXRkiLrR9KQpKdOLHx6l5Ugall0WfyqynetHP69E9yZ3kFo/XxHdNrbXXyLdg4JXKEIVtqlmDcy4UJddkCTiDNgLLtFbjMXGAEtwpd6aBdNf6ICHV0HQMBEpAbdlXsDuJ6Fwj4D/YujgOznloF5i4pXNAbfFRECHn6JplNxEEnlkcA+JobmIMP9/JYkUCqx0tSR2QAeCqQwXEbgjRd00gh7jN7GZxtCsXPKkOckm41sU5Nyy7ow+rVxg6Np11vDUmYh4XnZzYVEtFVLBki4kH6JUgWP2J+xGcFQks4Fs0BYftKrEbqLwZ8oASkWxevXzg8onCiF/1lKhDHq/d7hMlZAYDoqzJBiHmzW7YubGy8Px+9fh9MXOMHGupze4kKX+O5mSO48434MLJDtgEzAv12gl0hyzlNPTyCb7Bmj0OuoU1sH/hX9k399wXNmgySY46IskUlpGwXDCKJLdP7UXOMg6k1/vnrekm1kIXALf/OdyOJxIsSQWUxHgTvILh/6XgGTfu8An4ULeFzsJbx/ZocyXHjyYwE3i/BUQ2JcYFtnKD4Pf09Ipt2XTC7Ij1j5x44WDe+q6xe3D2maJBiV+o98VveQrM1FbqlDC59JtQr3+tv1k3BEPjb+tYUiifO9bMGeeN+HOjHYozc5LskdLikvWiek5pLYrY1Sys3PAwuMRqKtezju3dLynswqGZSTlmNSq/HlAZLoEWH22dL8matCNemDFPCUhYbVlc1FNy8vbxcLK3xM//anYhePLBKlbjNf9SVDjLPLMsFQfTFW4e6iB1btqSCpFdApfdNKbQ7QNQt+WLP8f4tU9m1ebaTRydP85yTKc8nFJnNPTRyZ7TpuLmmBgjrhS/8FwJBOZe0xmu6HHxipwzEVdEi0XRTogt993HuR3pt9BnOI8mARkyHpi7+ewM0fplIphEcq0lGP0WDnf+7+xlgSILzUDium2lO8spJrEDkNooNcj+5Mqrfzz/yzZgg6ma4YawyaBQAX3LIcBqvAjObNlmtoJdc8f1cly6Dh0ZLq4ESqEhmjbA4Kg72itCUMFdPAEEPxg910d2OKW0v+74P4VFC3dbfWYkZGdpE/fnB20GHF299/T2mTwzTgXkfWJYkNhIJjmverGHiU1qbmiQ1UI14qRzO+B8XOR7RtsdjKUkikzg2eXSu1YLQ8BDXYjBz3Pxo3D5yiFII+Au4ACMIvt2wrjkCDXx0YyUz9y8Q3ay/GgHn2lu38e6MrchSxuN2Uyby+AWEcqB5iIcvNgD6wM59hHGu5idq5SNOi+coxvZdqEl/7bqPn8ro/waCFKE6qXYuTtCh1wV2K2+DzPdvQOf7dQZDCD5Rvnbl6AgRsiIzQnfALwqC8Utf556ewwTMWrlLvAWQD1lRCv6ZeQF+t+Ka4y4JaLOMQnk+RIv4DrlfdVk1Z80OeMSHz9F1MNpCr9NvPyc2eysb7EA/0P/pbQycejGj7x2Ts7tN47VtP075e1HQ4ACyjr4B7jqQ7kVorPmfRyhSVBQYpTNyGwWTnUFwY4GnO0G2j77dbCyRdU66FwksD2au+mWJBh8oc02tfCjdFju2cvdAnrThb8+6xn5+BO48MgzoNqoIAlcptrEApbjDZGvWeUfODXDTRD/MMeOTbU983vfoqQor2AiODNhiu0XH5EnaGlttTgU6LTc2xRFSOHWHwBI83ixX7lX0uJ/OdUT6Yr8NpBfwH6PVGwOBejm9jkOtgZU13qd+PuS3sn1+MVlMV9FjEuN/P9ERQH3vA/q3wHFnrVd3gC+TksW67887MpzZgvYs7Q0ScKpIVCGu7+LEZ3bvMT6ipovDs7K29ZpvWmibJxDB3XAiWTpOKP7lrg2HHQN4NfEiDbtrUN1NEpxz+R4DcSCbb8ye0SNChY0RC/wrOw0Pvqi7FX5oC/W9NR0p6GtrnIkYx6PLmRHmQJr2HUlBS3+21V9TcA9O1GUN2MqlWa2Gsuq18Ljxpl2xr7IXidU+9M6KJ1ctQedh9eTUlyRB0ai2p0GsqbqqhGqjnNkoWCtFKoy/bQRwTMd8KW621RiE+saxxD7sh41c3RhuMUtcjyaFrVMpeb8K28u0D/D6XcAxdJxnVQGsU0dGzGIG1GF9eQQrt4aWrSSIAikpW2AoUoXa5m+FwbAqOCrbuFJkLrQikk4k9SidMs/RZGP20b42HA5SB0jh2nKyYc7i17JOkWHgOXw3TXBWcjpj7ByGMeI66iWEGGjtwHzXkthssKMMxhYbscOygavJjfrV3yhSM6w06KqKwnYE+PVK2rq6ETYZ2gYk0G8x3dkn7LMMpWS58GtKjlrCT8B7Rx0JAgvZIelXRhIroKAjEaCt0KtaRNylqshgW7ONgfLc/3oLgGxaLDYpJJ96HlSDW/5DbUp+3xL6Do9tSLYI4DLaY9CeNSvqLdPhlvdGzBFug1wqZrggJkicm75pL2CGHN5YT0CQyb3D4+aXYolr3dK+fvFhaDebGa2ooj060H2HRM9Uv8tXHJble5quFbVr7cA8sZ899nO6BpOsfaKLc1Dqqamj4H9h7hZrzLr7nA0yESNBKgxGYx7tsVfZUcRcUYlXTatACFY9Sa3TzTixBW1F2naFCuWt+2IwYTnlQFZMfDjbUK4wDlLHQ8wa5ijUWkFpX/jlji3Jus+aRkRjx18J1oDK3NeiueeLdwISxXdrHoyePTrNnEfrUkF0mksrOE8N6Qea/FNV+SCgZu4VnU2G22i9VkHNsNH+pn264bhdKEFYCpW0q5tHGFf2jza1GmDNpduTPSY1Jlx28rzF24CvuslVC3U+N19ctxU7gX0ZZ8CT0NWzoOl4MQO7M9r6hVLuiW/4vsdkQnbnMHGySvANO02V+9lFC1bLLQwwEM6Wfev8dUORzfTk/4mQ8FWjAGQ+nbNcWGplPBY/2Fb66b4dXMnbjN1vJFJrErJwcAzs0O41UOzQOYIDtq4c084y8fckT07+/YNQ4zDNzaQBFl20JDZDgaxaBXplRo4GOuLpf08qhEAZZOPW3dJ3rDq+2E18nuZvkcvaoZRMhehRKXFsulx4p4WBzJVnX3BIfX230g46nE5XYCIq2jgaA1EeK4HGIT0DNJpaey6+2I2PKqS8L9kmRpVVzPbBfrFtMgtH6mkM5J7MoeIMtWxwYvuZWwgHnCQivOIgUIEpYQeACuKQjx0vulv2WI0eD5qXJrBq8Zd+3/u/Th9W53Mo5CkzZjgtXC8sh2pi9RPyC6FdcXS+/H5f/arxFWDs/7MRXyw+gwzK8/89U7Frtgpj9xEB+woTDOcWfhvHwwLGAWwJ9Lzo23CsDlV4OBP4fJDNa/5hqkuqbArHH013dPeqNtHKuXrnCtJssW+6LbnAPY7vtJuBdQVOdwwxNpdWKcwyydJUUl2smcLsHNbcsvbXuzXhm5Qx/tGixwu/v9wgSZNatPpAPzfgJX54wYIrMdcHW4hF0KHH/iDRA34vqfVwhkmm/Mtrg5/0IpZKdD0pbOTzLHsN0iBMVJDmtY3gGnSovyMtYghCn+WKkDejif0iM7KtuYOB6+cDh019Ohvr1dbEnjhIGMpXmF+N3OTqVW0MfK3F4cZeHeOiUD1uzPQvJlfnlg/01eukPfqkiwz8AsyMl4t/5GVcN3OShiX6VPVHbG7C6AntD1WSEDO4y24ZipkvKtPr+Bd0gQRFe6ooV2ZKD7lUEjYN1nutI2dqoCoPFAY9c/AMQHHqaRlH40yAH26ju4PJBOQ89qBsT8MhI10k7m+IYHp7rEAoh2wCnMUUCO957tjyB8BBZIg7RAMgobue4OGgKCxqem8JnHNGFLxabhAfFZJdlRKT3wwkz7wrGsKpippJPJ+XTzFaxbxemdR4h7S09EF+Fi+HxrG2w0bkVJFbMrC2NXYZlxzaoqiiWSMvVzPSd/uGoWpERgsl/QHF7ZibX9BMtLoIBcFB8NIiFPAuVlVzhaNZznr4XNEY78AG44DOwwmboVGCDO3Mrd7ST1+waF0ykubXIIGd9aKPPz/gAVCQ84ITfxm4m0vLfDz8JKDoOyYeEqgHsbAFVVQVHo93j64zcMFCgCeHdJr/f4MHnOQRhIM8xtMlhiW2WcV6Zt7Y0L8Mc/ixdBSeSovpBjQIODzBZCoRC+Xcb4MYKPdep/A2bAR0G2GYzoQKYa4Z1NXBBIvhK3Ipg44A4An71O7vwVMAgCG4jT/wpw9G6YV0VkJdZp1KRa4A5+95HOTWv95CsRe7kWenHwc67Kbk2GdJPDqmVTLLtDS/cmDnSz/1hVUddxc2440fvMY6+M+gs/9U6CrPfqBJ3Qq3hf5kfEhibQldxqke6qgSUj7D8MsrvwsNycF+tPP66BWjsGVb4gk1WvwXOM04isEMWFuvLhDFNe1YIFFbLMciNz5cDUFcV6LPdDPSMNBk4uMdkz4nBLW9k5iUC44mFyaE+0XmMHtxEDDgmBYKs8f2uOPm/5m1YxmBkJgCr5vk4Wa3rgyz6yS98IpzWWPOzHqsPmCNFSyxqyfekT7/4xJVG2hGHHfrkEUcewaqV9YDdx6D9OohTPsFIdoCCLHLAh7pnJTkubUKQKzKxlg0DdS9tgoIeEtxCmwlKXjB1jmjTtzutesKRUmx7QlEAnWTk2vTwRpQ/wIwpkre6LWwEw7PLcpG67zs6JAx/xg0YhrfcFlexUv1xNLVHz39WObJOn9uB71ycJVx3BJkJyFKAOQZ3Td2etmspy1FnQeKrUPhHLsHwzwh1ri/SGIC0v4dLe2dg9oEJy8N/loG6s++38+xuE5Eqe9GRVpeCAbe19i8JnH7zdQScOctiISS0ibKhYczxmtOUL+scEqmA6e7brUXSlo0TyVov2g5botfyKfi6c1tV91TUxrvNkUiHSKsF3pk9/JAcPY29TzkABhjoqzdWtxilrpHRDZI4Y+pkWhoHWnhFeJeCWWRAE7hBfZCQIfs24/QffoeNCqJWI13soVILlwSUTFQNj7kbiXoUorT2/xIW+HTCKEFeepC/SZ/R518yyLmiwQ9QUqiT/QwF14KIrySJSxk9MRaTIBweSvhYE/WQvAZzoHi6U1/52EstYRpcwgT6eP/a4STM7TIISVfXFk7Sae+b/B1Js1YI1nI9eENT/yxZ6rkZlwOwXxQemevgWV5ql1qxjKYsMF/mChDiO4wVVnJeOQANJoIXOivFU9z4Xi/muNuuZTQ0JX+vC6QY/mfsv82dCQAIBv+7D456NUz05zh7n+uZ8MX626CkyywsYsVXY2IhJBTj+MjD0l2oVaGQpukgzS33lODvp93xJ0yOmV3P0wbjPDMRyE/Easx1Udqq/2y+bbwhJ/yucQ94SH8pdCeGjl3DLzD2iR267Yu4oYLslFYOErtP64WYLZFaNZTo5AkmfptMdFYxsGXlZURVLE6aNGHySXdLIfObKXqcIYPugVsinnVI/gGz4rYnNQRAsZY2AhVj/TKsnfk7z/8DymqnveOdjsErd6t0CV2wr6At5Zk8PfvvQ6XLk3gvSPv9YMY9w6Oyndu2cGyUTvSUovGhOQvO6vcV8iIU3kuwYNml1WShYwnbkTGvCy0Kw2dyCxFOqC3nilukbyItvN/SQgAwwFFIldlSjea5I/L9EzVoNLfiajgvDZGhwsKCUg+MxricnX9UrSJTMf5RNKD/D1h6hW1sh1+XJfcNDXDMu9oeXvzSO0xzUNTwpU8PDjL/mUjiFzNv4Z8SroIYPbDS7sxPNYdKsqsUm/A9aCGIhxSTo21YVjMcgUperyCr04rUf2WqAkRE1FOpoxbx6+fwsIncX2yatW5wD06R0tmvMSqln+0I2Y2Gd3TUlJDTdxJWXohJtMko6CXe75PPH8j7CQ515mGO9nhi4O4V/rT323fjwpXgVCOaEM27UY2FZ/VCE0Evpxp2+pe9l2b+LI4/C0SmS46144z4MSpbKEQvv+3Yz600QqiNqW8yyNr6pfc2djccATsgkB65jBmK7ZujRfpzm7rkUXMDhYaFjvttoFJPKTpYyRi0Qug0hZUsY5LPCUhmt7vWOwNKnbyV2UjnaNfxp0DOYz6EfuvGS9Bhuau9LXBSOEBRZQaZUZxm3jtMSre7jhEFsSwMRu2EKQnQSoGVJRQjeAuyWvln/WgvCMEFAuYJwLEXE9wlj6XFSHEz9GwThbtF/lNzcfMJgJhXX+Y5aZbuK1SE1wkR6aPwaseksCQ7PICMkd2rLlppDVB5Si6LL/Z4f6UcsBOoYcq/TXGdpPGD97ePnZ3R8eyW1q7oJdtsCkBc6MnMmSyirfmQwrG5nMc9Se86GAEyt9IBequaEC/LYhUmcpQ2XGze7DXUShZAHjIMtzXxzhGnZBfHN/3+MvlDSiMwcc1JEY2YRS7zpRZOsZEwvMcw9wGINT8xCgRAuSKUurzh9ioTPpEz7Mwo/OUjbzgEbjBs3eEMHYbsDqyBa8Hxbcytmi5QuLenkMCf9HENDCy+w+f7lWnBCaSbULLzfOizt8CEco6UuYUwk644Yy5w+YVtcEWE+DAGimVQzhs4kppzUBbNjIwAMTi5B5jaeardDmuEDvLYuscufggbgcrrmd77phR2nQyRHLkoeUf9S8VUQxlx1hCujip0LHMERmFtLjwBbTjVWhWQGQUmyWUCxaRIm0hDg0PN5SmOjKJy1eQx6HCpHPprRd3Bdm6EsxGKDwA/6x6IhZY4OhliO9RPod4DwjRuGorB3bgKtuu5orO1oPxyGbG3fKaHvjJrX7/cxJFtXrd4Xvfa3D5c/hJ8vojtMp3ie24/7cibWlY0aMLEeT2Nd83y7bu9WHSZXal/mSggZMI/WCx0SmhqRWLbbP7OXKBKuCXlCfbSXDGkCU17t0IfIn29zv3DjGFUlizFLPEzGeOrk68ZhuhSnDxjysIOYMDh8rYBLwrVWvDd6QY4n65VyC5bzFbvuPpDwuxQSm8sQE6PttgVeQKN6ZyQAj4oq9YjPdsh90to8jJuq1E92/csf5ZDAEwF0DWBUp+3NlSd/3FVSpBZ3bCyBwccpMIXDHfq2ovQBsIMUIoMbtCnhGDnhI7T8VRHL5R6SEQrz81VNBF/ZpRO6phujIkrxPxrbzkKHm07UHwG8dDR/v0tdvVzfdujkqVWwxwnPgOJWj/bB9436TVgskVnuApZwo7NPyqQbwyb1lbqWXVF9waOWzPH2c5Jbf65wd5bEV0k4TjRvy74pm5yaYTlSG4PS03z6OzlwU2FL31Izj49cuVAoIafsNkWRifb+xeyAvIBEwKYSfhoog+cduDBrQ8fzmqN+WdQnJcpK/uRTrWPMgsnBLXYSlQI9hZPh9qTpM3VcINDTyukT/AolCtj0qbqEl6pLSen5m8tUQBeu9t7v27G7Lvxd+T2zb0bmwIubrjuKajB7F93ZIKiDJkiYHgokR9PWHf01Zd/TvnRVu50/CkDCDHnnAWinpWAA/iR9P0SIAKHPQI34PU/kVr4NGSExzDyrl/uPebBEZ/ac/0nSjBaX19JhcNc2Gs1LGKYj3uJn63TM/HGp5VZIeuh5peo9fq8+Mp+JhMA+2ioaWhRBfdtrE2OVlPPbZKY5kvEMRMbwQ9oDFARpcARr7Amw77Atob20hD/2uETL490Tx7TXhbjMlCOelePFPBWv5jTanU7UNiMht1TwfhgV2Ozxv4o/Ow5bgX8uDjMfiFqWjuFGfb0PaR2uZZVyI3VJMEMpIWuLPkPDyaPn/5qCfHc7TpEqiVBICE0BSBhp/0kR8lVn2uA/nnJPtgtxocjjgN3JCcLxCKsiMOgksyJ0m6S+zGL7NptYjV5Af8FkVVmIbQBzQftcvY9P99QLCPv7M8ljI/5n/3xiYBgQomKjUQOUkEq/srSuTGOyhs0RU0PK6LN/fjJiOaCSgaKQmK0BUR/VMABzsTBLu6kFIWuqcjZF9iMNn8e3ZBVMIUmj0wr9BcCwJt4AEyRuwRzl7LGUcL+kmgY/waeM6VVkqfVSFpXb7GSLAfRdEgErER6PiBizm9bF63xDehSp1BJvDXLw/WDmx3m4oybWZ6mcveOfYsLyvOrOLdnWnb4a7lNsEMcPMmsDSmf0XN0t2PADO8iRP37/qzYufGlIec3U3LqCL+UDmzQFwFSOYgoNNAwT5hK0GlRMLDgIF7hPMHQx6MVnjGNnAqchardg8s1WUgKGp95Xe/HJ5kpghLQsIurWWYxWgJ4zML5sV8DzNqMpeK2JtGWyTQUDTb6nSFzNWN+7jDmuKzazNn/DwmftCBpmCf53rhTYiJdkfMgnaesWQ7Ge/WCVOc+dSg8KSQv7WoYICkAuGw7SMdYwoLJSB8eOswmigfzolZ+Gybn1cL+GafdZ+KowHmHzR/pM63T0ryHFseI1ma4XyRmNGi/ZPj1c/8SyDSPqzA+KHEKe906Xm3DdQUK5dS/3pFsII0KqMxmOmMjV6dpvC5UrQ9Q3wTefN9aoA4jFZ6sbzOPbEZPk+Suddyt74z1PXB+TZI9CCtj8iKoq/A8uBYx3jiOy74TVrBEJNgurBhjf0JmUxJfwM1NoBPj1RxMRlM6Xxj0HgS44VaF/gP/TOk32lmjvOcMOn9ugAVqI8re3HQjZrAojqoeCqQjCAjOw3KJG2s6QahvhKaLjOK71xsN4LLPoaz9uD6MyhcegAVy8LCxLQ46ApW4XaDtJAOSWWux1QXExrSgts9l6xspB+3dh4jt7wPFlTvpI/f2dhVHVu2EVWtmJsqcpYUUZY3UNQSya2hEx6q0h8mE1+oiFLTLBDzwdFBuBvwmeFBvL1v6JYKL265yzQmeZ9crsTsu0+z+a0QNirwuSSzJaycvKbbCnoBJFvPsgHBkPl79gsKO6FHWB2eMZL+ltR65B52sJzKzaocE4D4cojtqx5hS0FYQILPJ0In/7iI1tIYaUc27GSQCgozNGIrBe/B4vLPR+dv2QEGiLM0me0jer/r/3pnhblNsrtiXTWT2jVgXR5h5d6PKZp+gur8jTKZg3RuZHlsgxleGiCSTfH4CBSzicq7DraJ8CYYfltsV6vfYZjdsJqoz0948bp00TNKbczH90FPGx1W8wHjxfqWp7aCuZg+XzuJXU3/Rqj2wsija1vus6FmXPY5a4cZAD3t/o+retG4i9SDxNomtxqniFdyzRoISFPjcw7yxzMUm47LhlDJGoRVN37B1flfXQTEhMfqhVxUdlgKnu6yEKhletoV8rpAOiYWrVpKmnqD7waBAE0i1tPZoTvot1TRWc7XpnI32z3oa+vv3l5XPsYbT3244HPM7Qor7XICOQP8eR85pyCGMXiaWvrPbyaHepgosL+89o5L+jhrpGS+qaWUBC736rYMVbvCti3iTvKSjFeuIjvRAILMHvtf6Zqwiyd110ZR/VFKWKmz2eCEqSNUPBlOgRkWTJZbxrZuXApKo6k03fhXJXNLTYUw+xwjFX3PEOKt63ibeM/Wd3ksuayApE2FSlDl3JuYshGFbNqqrtsb82z/VM7SRMe96Mr6vPOeTgjALlasOhtPmu9zdPsfGH517XTJXrIogX5lY3mJy+Fq4ixsf7YGmO8N01etAYPfq+kG2D1xV4hGcYS1JLYAM6yVbVxi+i2Miq5cRpLDv3/Lxkh/uohiHEIdQRkJtc7G02L88GKRGCJOvZWsQBkYGc7PaV3MUA2qFWeg6J5C5mvwYydhyi6A0TeGcHSfC8H4U+TjSb1AmS3dabGdnz5IVFp8kubY7byJkqG6ER15dT4mALjqQi3c2Go+rjb00H/gydhX41IZ4JN5nWNtleAd9N4nD1XjG5QSAOb7AsiAoXFSzTVWMrC5fx0BApzbDswP1poHXjpAhInJ6//GlpyY1c8gXvcPea3ib6Vz5NYO6DDgepwiR10ki7YWq9ftcwkew7hO4D8qaoELnl8+v+13s97ZFnV5OKrE8EZEzFTQcuSsEVpCiO6pAondaPsA9J3PrYb/CjjSjJP/MwwI1xG+4hiXcNYJtt67SNuHlXPVkWRDomim8wQ9iSqrpN5RKBR3WE8OI0lblHAbV8VAKl1wAVSSH6p6/1yiSukbzwPMKuw1kQP50lGLQL35oyJTOdN1N9HEeEzQ2HfXAJApR0F+rKS5d6zlFbpJKVjn7hWtK0/HpFsIDPdRWSegekMoz9vaFqtWtXO8ZmDIUU+/xwcN1hfdrESYrjyGMP7zU6yMaTaFxjtXyL+VcGD9nRuTBDiExcq7dzebHSvFIUTt2GRnYrTP5SLLXxcNZ6Hsb6Lx6R10DDX41TIGanbRn9WRf41KOeLhhCFH9MIzFqOzG37CP+/gpU2rTs+AtoK9e3+tb0hfXv2mmiDJOkAJzFbvumhUw1/vzZ4BwXMX3Re1xy5XnfOVq8cpkZmnAFe448PELTwJKFUopnuKJcN7zauYP2gOjanP4567dx075ZXDmVx3Ksq9Rplnd0XEA9xeX2QC5QgXZ8KDZL6mnmUOltAddmmIyVWNF39gLLVVy5mVyp2m5RqkUZmO0AKXgYw6tlqi5gTL9Efc3UBj3GNbPnpA6AQrzJobTUgwvuAeJR7iLKKdmnMVeSIwiC13bxRSSV5zx5FzuyVyJFU69ITv+4ccSDjNXoICROnpQA4pxUsOjQnNqyzxfkYZetwjJQOAEBG9mKVt2YbvLW3LGCiLjiYQREXIeu7jDtv5XTrmZzSEDYMO8HLvYOXugoT2IPjO+kjTsj7VK8aMVfWi64RzyZJXW/6wuYP6bYou+Et3T4UaELku0qyc6SkISnByhsVksX38+e5gvHcXUvBiXu0bxdYbk2jEvp3Q1NAxYSJMDymrVx7MQoTjqh4H+Cz1kVgsN1SGmu1daBXMdfsCQjnDZY0BnrGJP4+RjTXVSX7amoDBfTHUQN1e/sLTDXfqLgvhkx/2E5r/4i7k0evKO0fmepE3vMi7H2xwTyJSvz4KUzFKEqCv1NLQB8T88BdmobAxEfWRgoEkjgOO5GotYvSzPN7+tw+sVZYl1j/wU3dG2Gh0uMcIrZw4KZ7m02KzKvgQch5h3PaahwjkvQFgsex/6O8JcgCGUzpxBSm9zA2tw0DnAsJXaYc0XV/W4Uv2k9JPWAYWH6UvO4sQOzvKbWSCKk9QrN4w+UIUJfjosXV2Njfzc9ADsmCtCW6ZhUGvBmnA0rvfV5HBpmgFlcZewWLOYqyTxiT1E61M/Gc7llzH9uV6Epneht1MGqxfXfgCJYnLf9sa405I5wGqR2AnQ2xCxINKBBzL0qftDivTSLLjnfofbfVJGZoOyFx+wk6i0v6ofynBT38tq0SqIOyZxV0oC8pka5TN2bjSobHXo0DV13BCV0sBY5OAlKA1dWpeqRwDsU3D+ftdWjevRq2mzmRzOvdkLL3i9j0b3iUD2/XVUT3eXFTi4iGHTVQ68SK45ViQEmHvg8JOvczMkBqJdXVg8weGkMP8Q3kcSvvlTeEBv1CU+lKuzzpQ8plQHogJuLU0zCc6x5ZTWqjH5Wo0xe5dHx9Dc1b7ZO+vinhLFkAwEfClG5OZOl90w+lR/9JclXddzLj3whmrKZOrWj48ZbMm8p7IErMO/2rdpIR4jO8GiImCnX/GrdTqW8s97VebjuF6NblXZxVJGNOKItsXi2AFj5dgpR3rA/368FrWeEhJCUKTuXYiy6XA8S5FAIJLlY2CVZInnbbsduHncOr60Mtq/AGNiMSMKv1naqGiHUy1iq6RRykylkAUBmInpfPjUIuQILfIoUBa/stcSy3MO8mUSN+OOHCE97X0/BpC00o3eW0Rec50yVLUCjZOwlrRX88hCun2mDHxto9XuMh8AqR2GCvvcBMRV/pRjxs/WR/Andf6oMN2NwWxx65apmdCsT4sfz4lPhJ2klSiu+/bqsgRyoZoR/kMRKKC3Rw14ZjIEHnPC1LPSO7RtDRvtT24yTBpd1Etn2Yr6pG+wPaYGRWU58NVwMbWss+njlvUVjDBlzQWn4uvLN9KT7yt/+NHq4XxjM/qmSxDZfdCbwpFuc21ef/8HdyfVfbuHUFE9l65jRi8yBeeP4un2iJgz/bhbaf7S6RpxonAkFwfwFbu85VLyxI9DeQag1aaHh8vAEDb5wf30WR574GlaNqdoIOuxYKDg6keW3xq123jKFJgwjC0eYOGRbqny9X+d4RKGNLlvIhL1txqXO/NczDTlSRGvZzvy9tNNTsBXFzp7eOMfYv1+YHnGPS9L5+TvHF4YyKckFKn/Gyfqlr2GvfgYMkptlVKfmVDH/y/RSBwGMQoma4k3xJOOHSx+65jAgev4meXV7xbGGuajvt1N67rIF5zvOOgPnLXJ0BmXM25kovcJyF+4oIXpEi6hmYYSBOt/53K8xgFRvolthFDiwwbC7EYnSGBMvysgOknMB9AXbV99xDH5dVOKM8+E837eMj5+Z7C3ESj2rr8b6vPAJF8NatWTsi8J+bcna6bclKrWCf6MpH3hj0SJpKTyjLkWlNG3T55zQkx4Y41Nr9qXiXm9cybxxPuUl9Gl4mpNEJ88KnlvVJ0dGeaJ1YasTLjiW6d0/ZUUD934wXBBUdjvjZb8lbaN+JnRyexf6Lba4o5DczaRbhW3k6N56N57+x44Uhl2yh6yMMDnhtrlQDZeDG5ixNtZpJzFIAiDRFAu/BoQnZDoBv9+TctxR+aIphbZ8MLhYXjFaX9GJ/xGg4/0UHViq8I2E+nni2iHXrQeLqLl4GpBRhqZqaJC/coBFfGpVgHk+3JIYdBoFcCnkAo9/QVpXBnoRbIjS1SZNtR8HQasl99s1GYiV8qddiiYn70FLoGGVl4qAgvZJCbnHoclskUETYhfoYeztdyYxxe3fswXjMhK9nnBzv+TMzGHTBcSXzOKap0lOV3A5/BG4vpGoCWqYn45zUfZtEiAbDqwiWzycr6X9FLItlbYExq4HUPGASHU8rdvH317NVFbvSkX/ML0QbQP1pGW1nw0iLjoRlz2/T4zZ3koPgEcVOWr3KydWxaxlHUcLEKZw4kbZdunfH1VcdtDg3bU3B7EoAY133F2ut/uaOv0sr54CYZl9An6zxOsT94cmcovVHuEZS4ydMCjMvTML1CsUyxXtDKvh2Dtj3DR7qERJUoGo0/vl/9tVVr5xOzdq2XNVopO8SK3OUnDs2UJxJcFyso5+fVYc5aMJokx9OI42PWqXLiUI58nrBsFjYvhXhiqf0qukCVGv8i1BGpNvb9EQ6Z93U6v7QDZ2esNf16GZmY+ljeRTP6zXodrzOAIGKkpnnSrekSowHiVNlMNIxoTXGOQR2Ai9+WZoNC67nkGi7SiJchM7gEin2wkkfL4a5OMVE9YMt4OXLx/UP3CS4r/nMaNpExOYYf/PQPKynAG21oX7nPpSd3QKFrxCkQAEtNRBS9kpbGOounigQbfxkxJeq39MafTTR8vgvVSetZJK8qoebt5e7//oVA9ydCKE2Y6JMIOu416wIoyykiaTju8P9+Oy6of5/3PDeTg56G+wRTvQjf1GJti4prfhm4zPa9IQEMGldiuGU/2+uBqzOlZ5IgJgYDh5pMrMQZflAwpRS1j17dFhlWa/qpXSuut0NW4jmGibEmwrpgb+m1cd4p3lL6EuEHcMcg0lk8iIhLCNsCbd4Ii3afdpQADY80uRlIG5EIGlTSIJnzME/VeJ27/n6pC1DHUDwyFEzhJ9q2H+mN++xGIunkyqhopAPYk3QtuMbhG9K/vUruWjA7pMylgh/5+0FA6Bf9H0mmCM1OQR1OLegOo+wb+3U0Te6Cno4VgMeioPTfyS6jUiv8eHGrcQByG9p0R9cIU55tyAgH/r59ZNxhlzakuXaa9keYhDDOPDdjSVtuJVf+QUsFIpCbkGwsoEf+rX9DmgPzXZVlIYqwcpRfKXwUK+n/+HPr9mFUYOilENIcbeSI2Pk13KwG+6AwS90h9I4ZJCMD30NaclOB9EviHGf7xXwqQ6aWKpjgWjzMrIGTzfPjiBvK1aXDaioYdAdI5J9l5FGP0lnY0WkqYdb2Ur835V3xtQV0wvVMsaC3ay8N+bPzYZ/f/+IlTLRNvT7p9TI21CftXFWtfer8OO6EpNsPW78OHVA5TG4cYOBpfL7zMJj/ej6KAzPgbtBFpEglMJU0NfAxv0ipXEQ7wOZLAk5drp2tz4B8f36FUXL5H3uDZpjn/bLPqo6nrOp9TfiJ+41WeXCwkVMOlZqdPszOMc4GV10bzQBuS7oEvdG9LO45iNBz9kQ7YnEq0oDoORmC6DVDiMe7HYAFIc9X/xThiTpCZLwHc6rc/OvIIlbeDMyd89cyoz+zERSArUL7BWwqTUGyL7zE6tNqtINdP2MHP/8og6X4RN+fV3eSd2imH2eXjJi0K/WPz4RCjclLWImUidvdXfGcTTJMiGRhr7RmhZ6ucmPB3HFADO8NGvj+fRp0tGT5N9Gg6yCiM/lewOyMBzGTr4p4n1reMxrxbS+WVP7vhzmipjQ2cXOuMsPk7AFzvT5MCmRyrhoSzWw8nQiedt+0aW5Go48W5/lBd9b3xhbUDetc0wRn/iYvC+FclABE5hBUpba7H7ZTaky55AsKWauAaQF1Af8YL5dkTdlasKvlPELiwti1ql1tFuj4KoRRRRR8x43UeZPBYxQGHAKs/fPdzDio28PaJJDTaesujRxCD5xi7QjEV0yYeRBTF7LW1Z2QUvk7z2g2Iier0/vbOcuYEaWiwnbEaG+acL0+Lty2Z4DgQ+KrTd8Lgp6SBXUV7Q+5IaUkwyIrMS+mEh9J5ljDp9M0C8Hd/0oCelkW66xuua3CiWeW4/UYs9qKoEtrrpajSSU6bVXrDCxKeFxvT+6lWdGgyjEmmeJl8AFLL7bbbuTP+4Qz9aofAjVwBoiKLqfCzRJur2HMMVidhlhYo6QMHmzhXIxb1wB2mkIVf0FmHh8S0ioLTKl9c7eVj6HZQE9Szqzjb81VJ7cupEWr4vTzKaQ7nSHCJq/hb/OSxMPoLw7fNuwIGiWw80lheSLlI1iuoGJ3VEQt8nJVZOI/pPss+B9WIx6mEg2/+Bx5p82Tz0SoUVo9SEMiZOvQpGF8F/PH71xWP/+zK1oEIA2wpR4WByHU59oTCMFhB2921Q1pMG6VP0RRxRCrqNGNnl8/OmOeWBDkG/zmr8o76Nq7wXJXfOvAzFFFu3aGuR1GTCKJ31O9hTlNpgOYFMG0q0oDuApnG+4W2VoYQ8sL16tFpMApxJO6Ush2l/ZOyfd6H/OOzHPVMpkcy6xToDZwk//V1wHPLFS54Vo7ww7MvJeHTrcLHTpqjBKhBJVpMSSVmDD276qMHQ23FHKEkf2opBsaEPW3u31xJkr5ruRqMbie9OCtO3GqPSD1stxViEIzV78BVrPIqTgSx3X7Olw4pCQNqs7vvon13Q/ZVSgzIbZsfgTrvzndQexgWm0wB5uyLGOUvGdB5HTHZKca5mJR3mXWlOhHdlqcqqv9USwkpxDgpTWeh514tJQH09ftTHqf67Rf0xCMmTPRr3HD+uGwAHl9/hb7eTRe1IHyzvZOOrY1D+ga/8pOZ5ZXXy7aiul9A0gF7dNQQQWpK5G8XCC7LHyquSae6nCY7FgUpGCMQQF5BUObdx62M5l4earHnOJOS50HpIrIzKKd9/BrO6gj8NRSbqMKohpsuXMik9K09vSlGd/90s/SoY1LvkMlIMVyv4ckAaqA9vWz7J+/X2lMLqYqPeM2ieon9yngr7PC3uyFwvNQ3swhK4hExWzsjeXOJlcA4po/qdvAM5JdJO0/VcbSyYB8q13L87x7R3d28oxy5ghjzJ1KxkyV1Et6y2FL6EkYOXfcHDVcxyxzWOgjvaCzAGmD5XcZwYNqtHqLXCyZOY2dMBkY0jm05Gevcfrudw++mUQU5Jo1xynzRsxoGJL1CWVUeoxEQdsBqtK+/EJkT3E1qYP5X1hvQzz16JaDhNsQofvOYs0WSHU5Q6r5QF6jG+WfGU3UrHThJGZvZpAaVvUsjHN9Kf1h83IynxvBcIlz3xynUO4u2IhX0MByDzz5d0i8YmN2FvzbHdlDzpcKx/SF6KLaEFZLAu2PGOEJYtOkdEPkVjHli3XNFJTAqRk5X71Rwma8McZkUYi7LwnlPacPHrRWYBCJ4t3BCEWQDJnBnlsbRGvyVlAz+2tnYtslXAfXRSk/Dq8rypxhSbkJabFfVVhUMOAGQR1oELlWlYyfZJmJ6nrunMGf3UC/jPdOWDFP+0EapWy4B2eg6YBZQ5cIqjeGnEkkWnkNJXLAk9U9n9T2fh5i7za9NIPTL4HPtZ4Rdry1YlOSHAT3aCVkm2fod+XnFuk2XDZuQYY02nAulJwFcT4j9+hx+EfbKSpdxs89xq4tamQdQTEqjwKz9DuySrSZiL4yYWMulfE4IauPHBsTTM8Mc+adlKLuHrphFdT8UdhD8c/K4L03j3sgHMOQo/sDMPh9KNhfeD9rl8pY4tH1MhecfRUqJ6wi7ToK3+mrISvsDt4fX6xuY+eTlGPAhRTLRrckPUEVhaB32AsFLfyweHIEu9jmNi2rB510jgXyi72xU1OzmTZ+MXht+esRy30s756533j0EjKrR+Y9P0dV00emTNfygVe78DB5OBkNgVlERBiXXc2WxvQy8T5HOW8KHoc/uq2B0i8F4e9Hn7qZRcde6ezfydQ8fhXAB/hlVcC/orldMdnDrDA1lreMxZqFgXQZN7/n3OE3XzCfSYGSuyx+h4RJ2sd9nkUDns2JEgyiT8Gl6jFFYzycE+GckccSV9vdkSW0r9i+BeY/Ht2aUdNTYCO7hdORgRRdB8E4TkuVuHKcs/KA38KYkOw5ITvDtzGXGBNyqkV4yh69yxD0M4pcbR788xEsJkfIw0AyVQackenBr6N7reB1ohLapNe5pSQgj2yWRbSJ4iSE78XrHbn4J2ReIGxrazMK9zL4NMWCDoexedBQfg0HyIZtaGx4jTKgCs85lB2vH+jXfLVT0zOyNa8oowyuiyFGDJCmZI0duK+0UdwOYRPJ8AYGwd2lE1q46V4783toFIRwFiirf8OveAt7sZkGcKmJjaYJE3Z4rtbxec/ARIc9EKtP2QwDTqtIuS8oQ3Aae5qxag6Qr04MPOG+V3aRWrUFr/w8BVyPlwaPm7O4RL/NE+exlbVnfln3C/7m4r+HZLKTOulYF1MqmhTWRdJbtU9MkSoQ2t4HWM9Dp7Ezofw7MrcwQkZeecxALeTQmkFAQqyoFguTyCnpKII8Kyu0sTjxqBEgA6YwhJ3CNXVYGXFjA2dbVfzdpup6Idb34JqCtHaOw6bHvqfW+wX5u4bYgpOs+R5qwd1coO/xAqtvcsHiAMpqrd5IrBmJR8CpXp6qrk3KAcNlyClZruUj0twfftS84e7p4nXBQGDRNuEt9G4vtVIx8XCSm8uIQUuIMBgnE8Q8CrbSUmtg2196RztozlpEzZBziI8fS2Os05cFXHjBbK+eYIHr3YEFERXWwxHdLBGITSGYXXx+hVmwhAXpl0t5f9T04okS6U8fzPmB9urxYkR/CEKljLQ157JAW5283a4MV+WzeQseppi1Dgqq64gnLYEcxW6E5ikKEOiKFyKu9zJb1mrkiewJw4pMutoUaj/DFZKaWZ+td0SM5B0iI2t360oCs7qUMpFqV5DNC2YT+8qahihyopRVTWRQ2VE4ZkRi7IBeIzbFo2TFBQtIL+aFgj77Ji+jWuz5VJ+TFSSQ7dmTHknNelYdqiT9ON7kuS+ai0MPNjk2DYDCbSyYClk96yvQMur78nD5gNsyxYpDKblmeFLCL/2RR9WGb+ujvh6kpjwmZOfyZ0/u4IYRcw7GQXBTvegcwmlhGb0hCE6MJiGGbo6GOjPzSJp3o6oAtPer+D5P72phQJGYV0JLDdUevNw/i/0CTQeP1UvTPzDvIsFJQmo+c9a3KdIBXfJkD3qbjRBgB9Y/VTEZej+ECzW10gKxB91sFFAPQdfFrYNyqByvtGi9QCkKeEFfdd0s++zItyGKTh4uiVVjB0QhaSAzBZ7hSZ/tCl3cd3R9q3yI38pS/ibOvQ0vENPqIsLGzi2pAgWpCOO+0tFOwDy5/42kPGxAwx6i6LyhNZVE59O017aWtj6VWVHhhhInTsTd0dfvZ014zhDd/+hr+Ppr1TsJQo2R36wNPSi/tKNuGqY1yccdPdRPFV/1pKP5OoNF4Lhdqzvk1anFODeScilp3MmbJin3tc0Ns2V+OgdqYaUSQjz5vA9Ub3JnUSNCYkQjO2omkLf8VfLXer3z0jfEaIHRtqFQm8+uE8b3McSfEPGspOiS7VoKRLUafq7Aetf94+YK5HYEjbB3cwvQmyn/QrEMHG5AAHgNO766F7zKQ3rr/m5lNRb6+zSKLNbIcD2EFokhCYI3OOsybJPwrahU/XkaHfL5WnrTI1mEgkZoCQ+kMF8vJoVLeKguaBkAgI4unDk/4lEVWyUMNh1BRILbvfp8zjYMaceMxcRLN2+Wpp25otroRNSuvqmluKKLwL8BrRmOYV4nns5Z2ZH48RwI/SI5Jgqd02U9C134Pdyj1/l3DMxlkJSxr7XXApZ8Z0LEuYLBhnFBYpDfm5eQvT0W32nLtU/vSTsQKYXf2RuWLJS9X2oi1bHhZ1rixLAOQkWC5xDUUmvqxs8P7vnnKIVTGjSe3l54hhLZk8AQFCUyNTkObAPYt3DeWbma68bJUuSS36CVZDmi7+ud3Z1bMS1ElfXy8MXPgIdYnDu0ilqRSA4b96to9J0rKvZi8NmN0oIVbipXeOiKIDK+kP70ju1qubXP6NWw0Em2RkHEVoG6JnLEz3e9NuzlJEbV8acfFdqrbRoRUWbSLwNmR5EzYit0LLUOHGBKxhZ7GHDAZN9QwB7mLeDglfR0Y4+LMtpcaYjQZ2pb1jC2pbTcrcj/jBE4xFTPkLmshkT0wy0IMHxDxSLF111ooydBHUvirhplQEn/ItNg+VoCRGQqsugW/k0XixVa8tBjP8D1n9NdTeYpC18H2O6XAkjeMdYJFps7yPFeuKeVshMsoEdQJvNKHRd769Lq8dyKNQ0RJTRhnf+dyoAkVrxylnqJGZmH0PRUa51lp8nw3uRLG4QZHzKDYuI6qmXrcAig1pxRG+Cls/FlN99naEt7yIOXjvrJygiVPcRASn7C0ApDxPoyZzZbvZ+c21DzcYKPR4ml7P81pMbueZwQ9cxHQeaO2sZ04inYVGUm0dgxMKdmnWVDM9dxe0E6B4vD8tYeJjLOa5JR14HAHcky3i6l+AdDjhxVzfck+mfOgvqislK4Ew9h+0f8mFIOvnqRgGkih4Yat1+wuJJU8f604Ad6OyYZyVslGXhuoRDbo543iRxSN0u8xLWAAmFF0VfIKm8m9DJc3GEJhMFQof8ps=]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2019游记]]></title>
    <url>%2FCSP2019%2F</url>
    <content type="text"><![CDATA[记录一下自己的爆零历程。 $\rm Day 0$ 出于复习颓废的目的请了一天假。 复习了几个算法，学了一下 $\rm excrt$ 和缩点，发现自己真的好多算法没学过...心态爆炸。 已经没有什么好害怕的了（指爆零毫无疑问）。 希望能考出个令人满意的成绩吧... $\text{TG}$$\rm Day 1$ 进考场之前上了个厕所，看见什么移动厕所以为很高端，直到我看到了外面矗立的一排电话亭一样的东西... 压缩包密码是 $Ren2Zhen0Si1Kao9$ 可是你让我思考我也思考不出来啊。 $\rm T1$ 我：难道不是把k的二进制输出来吗？ $\text{(1 minute later)}$ 我：打扰了。 然后就写了个递归，感觉还不错，瞄了一眼数据范围： $k\le2^{64}$ 我： 然后就想着 $80$ 分滚粗了。 自始至终我都没有想起有个东西叫 $\text{unsigned long long}$ 。 $\rm T2$ 这啥玩意儿？啥玩意儿？ 于是写了个超级无敌暴力 $\rm DFS$ ，大样例直接爆炸，然后心态就没了。 $\rm T3$ 第一眼：不就是把 $1$ 移动到 $1$ 节点点然后删边再移后面几个数吗。 码量略大，打了 $1$ 小时多。 然后我看了一眼样例，发现咋有点不对呢？ 思考了一分钟：我：？ 最后直接输出 $1 \rm ~ n$ 滚粗了，真自闭了。 第一次 $s$ 组就这样退役了。 $\rm Day2$ 根本没抱多少希望进考场。 $\rm T1$ 这尼玛啥啊？ 搁那推了半小时 $\rm DP$ 硬是啥也没推出来... 写个 $\rm DFS$ 就走了。 $\rm T2$ 一眼 $\rm DP$ 题。 看到那个 $(\sum\limits^{k_{j+1}-1}_{i=k_j} a[i])^2$ 就想起了以前看到的斜率优化。 然而没学（悲 所以自闭了， $O(n^3)$ $\rm DP$ 写完就走了。 $T3$ 想到关于每一个点是哪些树的重心，然而完全没思路。 写了个暴力，又写了个链的情况，结果跑大样例跑爆栈了， 然后就自闭了，结果把一个对的写成错的了。 真的退役了啊... 估分：$80+30+0+30+30+30=200$ 实际：$85+45+0+32+36+55=253$ $\rm PJ$$\rm PJ$ 多少还是让我恢复了点自信心... $\rm T1$ ？ $\rm T2$ 一开始直接 $\rm std::queue$ ，后来发现不行。 $\rm STL$ 搞得我连队列都差点不会写... $\rm T3$ 一眼 $\rm DP$ 题。 但是我尼玛不会 $\rm DP$ 啊喂！ 然后调了 $1$ 个多小时，奇迹般的写出来了。 然而是 $O(T^2nm)$ ...希望数据水一点（逃 $\rm T4$ 仔细想了一下发现这样一个传递可以在一个地方反复横跳， 我：这不就跑遍 $\rm BFS$ 最短路吗？ 仔细想下不对，要维护奇最短路和偶最短路，于是写了个 $\rm BFS$ ，然而并不知道有没有正确性... 估分：$100+100+80+100=380$ 实际：$100+100+70+100=370$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树状数组]]></title>
    <url>%2FBIT%2F</url>
    <content type="text"><![CDATA[树状数组是一种非常好打优美的数据结构，适用性十分广泛，而且常数非常小。 （自己花五分钟做的图） 下面蓝色的是我们的原数组，红色的即是我们的 $tree$ 数组。 树状数组的主旨是单点修改，查询前缀和，它的核心是 $\rm lowbit$ 如 $\rm lowbit((111)_2) = (001)_2,\rm lowbit((110)_2) = (010)_2$ 即 $\rm lowbit(7) = 1,\rm lowbit(6) = 2$ 仔细观察原树，不难发现： $$tree[i]=\sum\limits_{j=i-lowbit(i)+1}^i a[j]$$ 于是我们所求的前缀和可以由 $tree$ 数组得出 $$sum[i] = tree[i] + tree[i - lowbit(i)] + tree[(i - lowbit(i)) - lowbit(i - lowbit(i))] ...$$ 举个栗子： $$sum[(111)_2] = tree[(111)_2] + tree[(110)_2] + tree[(100)_2]$$ 这里需要仔细看几遍才能理解。 于是查询前缀和的操作就写好了。 1234567ll query(int p) // 查询前缀和&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 接下来考虑单点修改 当 $a[i]$ 改变的时候，所有包含 $i$ 这个位置的 $tree[j]$ 均要改变。 树状数组是一棵树！ 于是我们只需要找到 $tree[i]$ 的父亲，以及它的父亲的父亲爷爷...逐个更新 而再次仔细观察，我们惊奇的发现： 节点 $i$ 的父亲编号即为 $i + \rm lowbit(i)$ ! 12345void add(int p, ll x) // 单点修改&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125; 单点修改 + 区间查询知道前缀和很容易计算出区间和。 区间 $[l,r]$ 的和即为 $sum[r] - sum[l-1]$ 。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125; 区间修改 + 单点查询这里我们要用到神奇的差分。 新建 $d$ 数组。 $$d[1]=a[1],d[i]=a[i]-a[i-1] (2\le i \le n)$$ 可以得出: $$a[p]=\sum\limits_{i=1}^{p}d[i]$$ 这是啥？不就是前缀和嘛！ 而当区间 $[l,r]$ 全部加上 $x$ 时，我们只需将 $d[l]$ 加上 $x$ ，$d[r + 1]$ 减去 $x$ 就好了。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 区间修改 + 区间查询这是最常用的算法，第一次看到的时候真的惊艳到我了。 $$sum[p]=\sum\limits_{i=1}^p a[i] = \sum\limits_{i=1}^p \sum\limits_{j=1}^i d[j]$$ 仔细看，发现 $d[1]$ 加了 $p$ 次， $d[2]$ 加了 $p-1$ 次， $d[3]$ 加了 $p-2$ 次... 于是可以继续推： $$sum[p]=\sum\limits_{i=1}^p d[i] \times (p - i + 1)$$ $$=(p+1)\times\sum\limits_{i=1}^p d[i] - \sum\limits_{i=1}^p d[i] \times i$$ 于是我们只需要同时维护 $\sum\limits_{i=1}^p d[i]$ 与 $\sum\limits_{i=1}^p d[i] \times i$ 便可以了。 1234567891011121314151617181920212223void add(int p, ll x)&#123; for (int i = p; i &lt;= n; i += (i &amp; -i)) tree1[i] += x, tree2[i] += x * p;&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; for (int i = p; i; i -= (i &amp; -i)) res += (p + 1) * tree1[i] - tree2[i]; return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>树状数组</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站]]></title>
    <url>%2FSome_websites%2F</url>
    <content type="text"><![CDATA[列举一些我常用的网站。 顺便方便下我自己 颓废：$\rm B$站 $\rm generals.io$ $\rm NGA$ $\rm sm.ms$ (图床) $\rm Pixiv$ $\text{OI}$:$\rm loj$ 洛谷 $\rm codeforces$ $\rm OI WIKI$ 奇奇怪怪的东西:图论 几何 函数(或许应归在颓废一类？) 数列(做题找规律神器) $\LaTeX$ 打比赛专用百度翻译]]></content>
      <tags>
        <tag>OI</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loj-2590 NOIP2009 最优贸易]]></title>
    <url>%2Floj-2590%2F</url>
    <content type="text"><![CDATA[题目描述C 国有 $n$ 个大城市和 $m$ 条道路，每条道路连接这 $n$ 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 $m$ 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 $1$ 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 $n$ 个城市的标号从 $1\sim n$ ，阿龙决定从 $1$ 号城市出发，并最终在 $n$ 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 $n$ 个城市。 阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品——水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 假设 C 国有 $5$ 个大城市，城市的编号和道路连接情况如下图，单向箭头表示这条道路为单向通行，双向箭头表示这条道路为双向通行。 假设 $1\sim n$ 号城市的水晶球价格分别为 $4,3,5,6,1$ 。 阿龙可以选择如下一条线路：$1\rightarrow 2 \rightarrow 3 \rightarrow 5$，并在 $2$ 号城市以 $3$ 的价格买入水晶球，在 $3$ 号城市以 $5$ 的价格卖出水晶球，赚取的旅费数为 $2$ 。 阿龙也可以选择如下一条线路 $1\rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 5$，并在第 $1$ 次到达 $5$ 号城市时以 $1$ 的价格买入水晶球，在第 $2$ 次到达 $4$ 号城市时以 $6$ 的价格卖出水晶球，赚取的旅费数为 $5$ 。 现在给出 $n$ 个城市的水晶球价格， $m$ 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式输入第一行包含 $2$ 个正整数 $n$ 和 $m$，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 $n$ 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 $n$ 个城市的商品价格。 接下来 $m$ 行，每行有 $3$ 个正整数， $x,y,z$ ，每两个整数之间用一个空格隔开。如果 $z=1$，表示这条道路是城市 $x$ 到城市 $y$ 之间的单向道路；如果 $z=2$，表示这条道路为城市 $x$ 和城市 $y$ 之间的双向道路。 输出格式输出共 $1$ 行，包含 $1$ 个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 $0$ 。 样例12345675 54 3 5 6 11 2 11 4 12 3 23 5 14 5 2 样例输出15 数据范围与提示输入数据保证 $1$ 号城市可以到达 $n$ 号城市。 对于 $10\%$ 的数据，$n\le 6$； 对于 $30\%$ 的数据，$n\le 100$； 对于 $50\%$ 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市； 对于 $100\%$ 的数据，$1\le n\le 100,000$，$1\le m\le 500,000$，$1\le x, y \le n$，$1\le z\le 2$，各城市水晶球价格 $\le 100$。 loj链接 我已经很久很久很久没有水更过 $blog$ 了...... 最近暑假刚好有点空所以来写点题解。 这道题是一道很经典的分层图题目，虽然我看不出来 以前我可能写过这道题，但也是半懂不懂抄题解的，现在重写了一遍，感觉理解透彻了很多。 我们可以把这张图看成有相同的 $3$ 层，每一层中节点的连接方式如题所述，然后我们将第 $1$ 层的 $i$ 的节点与第 $2$ 层的相应节点连一条单向边，边权为 $-v[i]$ ，相当于从第 $1$ 层走到第 $2$ 层就是买了这个城市的水晶球，并且我们是走不回去的。 而第 $2$ 层与第 $3$ 层的连接同理，但是边权设为 $v[i]$ ，相当于我们卖掉了水晶球赚了 $v[i]$ 。 加上代码应该很容易理解。 12345678910111213141516171819202122for (int i = 1; i &lt;= m; i ++)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125;&#125;for (int i = 1; i &lt;= n; i ++)&#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]);&#125; 最后我们还要注意一个细节：我们是可以不买的，所以我们将每一层的 $n$ 节点都连向我们的最终节点，边权为 $0$, 我这里把 $0$ 号节点设为最终节点。 123add_edge(n, 0, 0);add_edge(2 * n, 0, 0);add_edge(3 * n, 0, 0); 最后我们观察：我们从 $1$ 号节点走到 $0$ 节点的最长路即是我们能获得的最大收益。 最后附上完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;const int M = 5e5 + 5;int n, m;int v[N];struct E&#123; int to, dis, next;&#125; edge[(M * 6) + (N &lt;&lt; 1)];int num_edge, head[N * 3];void add_edge(int from, int to, int dis)&#123; edge[++ num_edge] = (E)&#123;to, dis, head[from]&#125;; head[from] = num_edge;&#125;int dis[N * 3];bool vis[N * 3];struct point&#123; int u; bool friend operator &lt; (point a, point b) &#123; return dis[a.u] &lt; dis[b.u]; &#125;&#125;;std::priority_queue &lt;point&gt; q;void dijkstra(int s) // dijkstra万岁&#123; memset(dis, -127/3, sizeof dis); dis[s] = 0; vis[s] = true; q.push((point)&#123;s&#125;); while (!q.empty()) &#123; int u = q.top().u; q.pop(); vis[u] = false; for (int p = head[u]; p; p = edge[p].next) &#123; int v = edge[p].to, d = edge[p].dis; if (dis[v] &lt; dis[u] + d) &#123; dis[v] = dis[u] + d; if (!vis[v]) q.push((point)&#123;v&#125;), vis[v] = true; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;v[i]); int x, y, z; for (int i = 1; i &lt;= m; i ++) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) &#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]); &#125; add_edge(n, 0, 0); add_edge(2 * n, 0, 0); add_edge(3 * n, 0, 0); dijkstra(1); printf("%d", dis[0]); return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>loj</tag>
        <tag>最短路</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约瑟夫环]]></title>
    <url>%2FJosephus%2F</url>
    <content type="text"><![CDATA[$n$ 个人围成一圈,编号按顺序从 $0$ 到 $n-1$，从第一个人开始报数,数到 $m$ 的人出列,再由下一个人重新从 $1$ 开始报数,数到 $m$ 的人再出圈,……依次类推,直到所有的人都出圈,请输出最后一个出圈的人的编号。 今天稍微学习了一下这个玩意儿，感觉还挺神奇的。 第一种做法：暴力模拟这个我在这就不讲了，很容易就能写出来。 第二种做法：递推我们先考虑第一个出圈的人。 $m &lt; n$ 那么这个人的编号即为 $m - 1$ $m \ge n$ 那么这个人的编号即为 $(m - 1) \bmod n$ 综合一下，第一个出圈的人的编号绝对为 $(m - 1) \bmod n$ 方便起见，我们设 $k - 1 = (m - 1) \bmod n$ 。 于是这个圈就变成了这样： $k \quad k+1 \quad k+2 \quad ... \quad n-2 \quad n-1 \quad 0 \quad 1 \quad 2 \quad ... \quad k-3 \quad k-2$ 这个时候我们将这个圈转换一下，变成: $0 \quad 1 \quad 2 \quad ... \quad n - 3 \quad n - 2$ 可以发现其实这个问题变成了 $n-1$ 个人报数的子问题。 所以我们只要将子问题的答案转换回去，就能知道最后那个人原来的编号。 稍微观察一下如何转换回去: $0 \Rightarrow k$ $1 \Rightarrow k + 1$ $...$ $n - k - 1 \Rightarrow n - 1$ $n - k \Rightarrow 0$ $n - k + 1 \Rightarrow 1$ $...$ $n - 3\Rightarrow k - 3$ $n - 2 \Rightarrow k - 2$ 不难发现 $x$ 转换回去后就变成了 $(x + k) \bmod n$ 我们设 $f[n]$ 表示 $n$ 个人报 $m$ 最后出圈人的编号。 显然，$f[1]=0$ 而根据我们刚才推的公式： $$f[n]=(f[n - 1]+k) \bmod n = (f[n - 1]+m \bmod n) \bmod n = (f[n - 1]+m ) \bmod n$$ 于是就可以愉快的递推了~ 代码1234567int Josephus(int n, int m)&#123; int res = 0; for (int i = 2; i &lt;= n; i ++) res = (res + m) % i; return res;&#125;]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的...第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>OI</tag>
        <tag>dfs</tag>
        <tag>剪枝</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$\rm W$”或“$\rm B}$”。其中“$\rm W}$”表示白格，“$\rm B$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}\text{W}&amp;\text{W}&amp;\text{B}&amp;\text{W}\\\text{B}&amp;\text{B}&amp;\text{W}&amp;\text{B}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{W}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{B}\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f[x]$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f[n-1]$ 那么我们 $f$ 的公式也就出来了。 $$f[n]=2n \times (2n-2) \times (f[n-1] + 2 \times (n-1) \times f[n-2])$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f[n-k]$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\sim n$ 的阶乘逆元有两种方法： 先求出 $1\sim n$ 每个数的逆元，然后正推： $(i!)^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345inv_fac[1] = 1;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; 先求出 $n$ 的阶乘逆元，然后倒推： $(i!)^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\sim n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过...$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出&#39; $No Answer$ &#39;。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 $\rm Rachel·Gardner$ Ray快来打我我爱她 小野寺小咲 ...渣乐 $\rm Ruby Rose$ 我也想要把新月玫瑰Ruby帅炸！ $\rm Weiss Schnee$ 傲娇 $\rm Blake Belladonna$ 我爱猫娘！ $\rm Yang Xiao Long$ 杨姐帅 牧濑红莉栖 $\text{El psy congroo}$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $\rm QAQ$ 雪乃好看 由比滨结衣 团子可爱 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样... $\rm x$毛 $\rm x$毛天下第一 格蕾 $\lceil\mathfrak{Grave} \, \mathfrak{for} \, \mathfrak{you}\rfloor$ 镰刀很戳我xp 蓝毒 蓝毒可可爱爱 $2019.7.17$ 注:我还真是 $\rm sb$ 连这都能列个表而且还不全]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下...这个博客也算是勉强搭成了，花了好久...感谢网上各位大佬帮助 $QAQ$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
