<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[小技巧锦集]]></title>
    <url>%2Ftips%2F</url>
    <content type="text"><![CDATA[记录一下总结出的一些小技巧。 不开longlong见祖宗做题时一定要注意数据范围，并考虑每一步计算是否会爆 int 。 这个在做517的题时尤为明显，天天卡天天卡... 尽量少用cin，scanf永远滴神有的时候输入速度确实能决定结果517依旧天天卡。 输入字符串或单个字符时用scanf + %s 需要读单个字符尽量都用%s,以及避免读回车—— 517 以前为了这个发愁死了。 数组一定要开到足够大小这个一定要结合题目，看清范围，有时需要经过计算。 PS:有的时候cf显示WA实际上是数组爆了我还因为这个掉过一次分。 题目有取模，计算中有相减的时候，计算时加上一个模数防爆。 数学题不要忘记考虑0这个一定要记住，有的时候能把50分都卡没。 $\text{To be continued}$]]></content>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2020游记]]></title>
    <url>%2FCSP2020%2F</url>
    <content type="text"><![CDATA[高中第一次考信奥，希望别爆$\rm QAQ$ 初赛$\rm 10.11$初赛进行时，感觉比去年卷子简单一点...或者是我稍微变强了一点点？ 考完之后根据洛咕答案对了一下感觉还行，估分大概 $\rm 88$ ，但是有几道憨批题错了... #3 $\rm 10.17$ 初赛成绩出来是 $\rm 89$ 所以这差了1分什么鬼啊 现在就是好好去准备复赛了...感觉我复赛可能还不一定比初赛强... $\text{To be continued}$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[真情假爱]]></title>
    <url>%2FLOVE%2F</url>
    <content type="text"><![CDATA[请输入密码证明身份以查看高级机密。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于乐课网]]></title>
    <url>%2Fhow_to_hack_leke%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[破碎的白金色爱恋]]></title>
    <url>%2FBroken_platinum_love%2F</url>
    <content type="text"><![CDATA[我的白金精二几级了？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>写作</tag>
        <tag>二次元</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堕落的天蓝色天使]]></title>
    <url>%2FFallen_blue_angel%2F</url>
    <content type="text"><![CDATA[我本命的英文名？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>写作</tag>
        <tag>二次元</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2019游记]]></title>
    <url>%2FCSP2019%2F</url>
    <content type="text"><![CDATA[记录一下自己的爆零历程。 $\rm Day 0$ 出于复习颓废的目的请了一天假。 复习了几个算法，学了一下 $\rm excrt$ 和缩点，发现自己真的好多算法没学过...心态爆炸。 已经没有什么好害怕的了（指爆零毫无疑问）。 希望能考出个令人满意的成绩吧... $\text{TG}$$\rm Day 1$ 进考场之前上了个厕所，看见什么移动厕所以为很高端，直到我看到了外面矗立的一排电话亭一样的东西... 压缩包密码是 $Ren2Zhen0Si1Kao9$ 可是你让我思考我也思考不出来啊。 $\rm T1$ 我：难道不是把k的二进制输出来吗？ $\text{(1 minute later)}$ 我：打扰了。 然后就写了个递归，感觉还不错，瞄了一眼数据范围： $k\le2^{64}$ 我： 然后就想着 $80$ 分滚粗了。 自始至终我都没有想起有个东西叫 $\text{unsigned long long}$ 。 $\rm T2$ 这啥玩意儿？啥玩意儿？ 于是写了个超级无敌暴力 $\rm DFS$ ，大样例直接爆炸，然后心态就没了。 $\rm T3$ 第一眼：不就是把 $1$ 移动到 $1$ 节点点然后删边再移后面几个数吗。 码量略大，打了 $1$ 小时多。 然后我看了一眼样例，发现咋有点不对呢？ 思考了一分钟：我：？ 最后直接输出 $1 \rm ~ n$ 滚粗了，真自闭了。 第一次 $s$ 组就这样退役了。 $\rm Day2$ 根本没抱多少希望进考场。 $\rm T1$ 这尼玛啥啊？ 搁那推了半小时 $\rm DP$ 硬是啥也没推出来... 写个 $\rm DFS$ 就走了。 $\rm T2$ 一眼 $\rm DP$ 题。 看到那个 $(\sum\limits^{k_{j+1}-1}_{i=k_j} a[i])^2$ 就想起了以前看到的斜率优化。 然而没学（悲 所以自闭了， $O(n^3)$ $\rm DP$ 写完就走了。 $T3$ 想到关于每一个点是哪些树的重心，然而完全没思路。 写了个暴力，又写了个链的情况，结果跑大样例跑爆栈了， 然后就自闭了，结果把一个对的写成错的了。 真的退役了啊... 估分：$80+30+0+30+30+30=200$ 实际：$85+45+0+32+36+55=253$ $\rm PJ$$\rm PJ$ 多少还是让我恢复了点自信心... $\rm T1$ ？ $\rm T2$ 一开始直接 $\rm std::queue$ ，后来发现不行。 $\rm STL$ 搞得我连队列都差点不会写... $\rm T3$ 一眼 $\rm DP$ 题。 但是我尼玛不会 $\rm DP$ 啊喂！ 然后调了 $1$ 个多小时，奇迹般的写出来了。 然而是 $O(T^2nm)$ ...希望数据水一点（逃 $\rm T4$ 仔细想了一下发现这样一个传递可以在一个地方反复横跳， 我：这不就跑遍 $\rm BFS$ 最短路吗？ 仔细想下不对，要维护奇最短路和偶最短路，于是写了个 $\rm BFS$ ，然而并不知道有没有正确性... 估分：$100+100+80+100=380$ 实际：$100+100+70+100=370$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树状数组]]></title>
    <url>%2FBIT%2F</url>
    <content type="text"><![CDATA[树状数组是一种非常好打优美的数据结构，适用性十分广泛，而且常数非常小。 （自己花五分钟做的图） 下面蓝色的是我们的原数组，红色的即是我们的 $tree$ 数组。 树状数组的主旨是单点修改，查询前缀和，它的核心是 $\rm lowbit$ 如 $\rm lowbit((111)_2) = (001)_2,\rm lowbit((110)_2) = (010)_2$ 即 $\rm lowbit(7) = 1,\rm lowbit(6) = 2$ 仔细观察原树，不难发现： $$tree[i]=\sum\limits_{j=i-lowbit(i)+1}^i a[j]$$ 于是我们所求的前缀和可以由 $tree$ 数组得出 $$sum[i] = tree[i] + tree[i - lowbit(i)] + tree[(i - lowbit(i)) - lowbit(i - lowbit(i))] ...$$ 举个栗子： $$sum[(111)_2] = tree[(111)_2] + tree[(110)_2] + tree[(100)_2]$$ 这里需要仔细看几遍才能理解。 于是查询前缀和的操作就写好了。 1234567ll query(int p) // 查询前缀和&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 接下来考虑单点修改 当 $a[i]$ 改变的时候，所有包含 $i$ 这个位置的 $tree[j]$ 均要改变。 树状数组是一棵树！ 于是我们只需要找到 $tree[i]$ 的父亲，以及它的父亲的父亲爷爷...逐个更新 而再次仔细观察，我们惊奇的发现： 节点 $i$ 的父亲编号即为 $i + \rm lowbit(i)$ ! 12345void add(int p, ll x) // 单点修改&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125; 单点修改 + 区间查询知道前缀和很容易计算出区间和。 区间 $[l,r]$ 的和即为 $sum[r] - sum[l-1]$ 。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125; 区间修改 + 单点查询这里我们要用到神奇的差分。 新建 $d$ 数组。 $$d[1]=a[1],d[i]=a[i]-a[i-1] (2\le i \le n)$$ 可以得出: $$a[p]=\sum\limits_{i=1}^{p}d[i]$$ 这是啥？不就是前缀和嘛！ 而当区间 $[l,r]$ 全部加上 $x$ 时，我们只需将 $d[l]$ 加上 $x$ ，$d[r + 1]$ 减去 $x$ 就好了。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 区间修改 + 区间查询这是最常用的算法，第一次看到的时候真的惊艳到我了。 $$sum[p]=\sum\limits_{i=1}^p a[i] = \sum\limits_{i=1}^p \sum\limits_{j=1}^i d[j]$$ 仔细看，发现 $d[1]$ 加了 $p$ 次， $d[2]$ 加了 $p-1$ 次， $d[3]$ 加了 $p-2$ 次... 于是可以继续推： $$sum[p]=\sum\limits_{i=1}^p d[i] \times (p - i + 1)$$ $$=(p+1)\times\sum\limits_{i=1}^p d[i] - \sum\limits_{i=1}^p d[i] \times i$$ 于是我们只需要同时维护 $\sum\limits_{i=1}^p d[i]$ 与 $\sum\limits_{i=1}^p d[i] \times i$ 便可以了。 1234567891011121314151617181920212223void add(int p, ll x)&#123; for (int i = p; i &lt;= n; i += (i &amp; -i)) tree1[i] += x, tree2[i] += x * p;&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; for (int i = p; i; i -= (i &amp; -i)) res += (p + 1) * tree1[i] - tree2[i]; return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>树状数组</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站]]></title>
    <url>%2FSome_websites%2F</url>
    <content type="text"><![CDATA[列举一些我常用的网站。 顺便方便下我自己 颓废：$\rm B$站 $\rm generals.io$ $\rm NGA$ $\rm sm.ms$ (图床) $\rm Pixiv$ $\text{OI}$:$\rm loj$ 洛谷 $\rm codeforces$ $\rm OI WIKI$ 奇奇怪怪的东西:图论 几何 函数(或许应归在颓废一类？) 数列(做题找规律神器) $\LaTeX$ 打比赛专用百度翻译]]></content>
      <tags>
        <tag>OI</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loj-2590 NOIP2009 最优贸易]]></title>
    <url>%2Floj-2590%2F</url>
    <content type="text"><![CDATA[题目描述C 国有 $n$ 个大城市和 $m$ 条道路，每条道路连接这 $n$ 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 $m$ 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 $1$ 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 $n$ 个城市的标号从 $1\sim n$ ，阿龙决定从 $1$ 号城市出发，并最终在 $n$ 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 $n$ 个城市。 阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品——水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 假设 C 国有 $5$ 个大城市，城市的编号和道路连接情况如下图，单向箭头表示这条道路为单向通行，双向箭头表示这条道路为双向通行。 假设 $1\sim n$ 号城市的水晶球价格分别为 $4,3,5,6,1$ 。 阿龙可以选择如下一条线路：$1\rightarrow 2 \rightarrow 3 \rightarrow 5$，并在 $2$ 号城市以 $3$ 的价格买入水晶球，在 $3$ 号城市以 $5$ 的价格卖出水晶球，赚取的旅费数为 $2$ 。 阿龙也可以选择如下一条线路 $1\rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 5$，并在第 $1$ 次到达 $5$ 号城市时以 $1$ 的价格买入水晶球，在第 $2$ 次到达 $4$ 号城市时以 $6$ 的价格卖出水晶球，赚取的旅费数为 $5$ 。 现在给出 $n$ 个城市的水晶球价格， $m$ 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式输入第一行包含 $2$ 个正整数 $n$ 和 $m$，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 $n$ 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 $n$ 个城市的商品价格。 接下来 $m$ 行，每行有 $3$ 个正整数， $x,y,z$ ，每两个整数之间用一个空格隔开。如果 $z=1$，表示这条道路是城市 $x$ 到城市 $y$ 之间的单向道路；如果 $z=2$，表示这条道路为城市 $x$ 和城市 $y$ 之间的双向道路。 输出格式输出共 $1$ 行，包含 $1$ 个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 $0$ 。 样例12345675 54 3 5 6 11 2 11 4 12 3 23 5 14 5 2 样例输出15 数据范围与提示输入数据保证 $1$ 号城市可以到达 $n$ 号城市。 对于 $10\%$ 的数据，$n\le 6$； 对于 $30\%$ 的数据，$n\le 100$； 对于 $50\%$ 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市； 对于 $100\%$ 的数据，$1\le n\le 100,000$，$1\le m\le 500,000$，$1\le x, y \le n$，$1\le z\le 2$，各城市水晶球价格 $\le 100$。 loj链接 我已经很久很久很久没有水更过 $blog$ 了...... 最近暑假刚好有点空所以来写点题解。 这道题是一道很经典的分层图题目，虽然我看不出来 以前我可能写过这道题，但也是半懂不懂抄题解的，现在重写了一遍，感觉理解透彻了很多。 我们可以把这张图看成有相同的 $3$ 层，每一层中节点的连接方式如题所述，然后我们将第 $1$ 层的 $i$ 的节点与第 $2$ 层的相应节点连一条单向边，边权为 $-v[i]$ ，相当于从第 $1$ 层走到第 $2$ 层就是买了这个城市的水晶球，并且我们是走不回去的。 而第 $2$ 层与第 $3$ 层的连接同理，但是边权设为 $v[i]$ ，相当于我们卖掉了水晶球赚了 $v[i]$ 。 加上代码应该很容易理解。 12345678910111213141516171819202122for (int i = 1; i &lt;= m; i ++)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125;&#125;for (int i = 1; i &lt;= n; i ++)&#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]);&#125; 最后我们还要注意一个细节：我们是可以不买的，所以我们将每一层的 $n$ 节点都连向我们的最终节点，边权为 $0$, 我这里把 $0$ 号节点设为最终节点。 123add_edge(n, 0, 0);add_edge(2 * n, 0, 0);add_edge(3 * n, 0, 0); 最后我们观察：我们从 $1$ 号节点走到 $0$ 节点的最长路即是我们能获得的最大收益。 最后附上完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;const int M = 5e5 + 5;int n, m;int v[N];struct E&#123; int to, dis, next;&#125; edge[(M * 6) + (N &lt;&lt; 1)];int num_edge, head[N * 3];void add_edge(int from, int to, int dis)&#123; edge[++ num_edge] = (E)&#123;to, dis, head[from]&#125;; head[from] = num_edge;&#125;int dis[N * 3];bool vis[N * 3];struct point&#123; int u; bool friend operator &lt; (point a, point b) &#123; return dis[a.u] &lt; dis[b.u]; &#125;&#125;;std::priority_queue &lt;point&gt; q;void dijkstra(int s) // dijkstra万岁&#123; memset(dis, -127/3, sizeof dis); dis[s] = 0; vis[s] = true; q.push((point)&#123;s&#125;); while (!q.empty()) &#123; int u = q.top().u; q.pop(); vis[u] = false; for (int p = head[u]; p; p = edge[p].next) &#123; int v = edge[p].to, d = edge[p].dis; if (dis[v] &lt; dis[u] + d) &#123; dis[v] = dis[u] + d; if (!vis[v]) q.push((point)&#123;v&#125;), vis[v] = true; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;v[i]); int x, y, z; for (int i = 1; i &lt;= m; i ++) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) &#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]); &#125; add_edge(n, 0, 0); add_edge(2 * n, 0, 0); add_edge(3 * n, 0, 0); dijkstra(1); printf("%d", dis[0]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>OI</tag>
        <tag>loj</tag>
        <tag>最短路</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约瑟夫环]]></title>
    <url>%2FJosephus%2F</url>
    <content type="text"><![CDATA[$n$ 个人围成一圈,编号按顺序从 $0$ 到 $n-1$，从第一个人开始报数,数到 $m$ 的人出列,再由下一个人重新从 $1$ 开始报数,数到 $m$ 的人再出圈,……依次类推,直到所有的人都出圈,请输出最后一个出圈的人的编号。 今天稍微学习了一下这个玩意儿，感觉还挺神奇的。 第一种做法：暴力模拟这个我在这就不讲了，很容易就能写出来。 第二种做法：递推我们先考虑第一个出圈的人。 $m &lt; n$ 那么这个人的编号即为 $m - 1$ $m \ge n$ 那么这个人的编号即为 $(m - 1) \bmod n$ 综合一下，第一个出圈的人的编号绝对为 $(m - 1) \bmod n$ 方便起见，我们设 $k - 1 = (m - 1) \bmod n$ 。 于是这个圈就变成了这样： $k \quad k+1 \quad k+2 \quad ... \quad n-2 \quad n-1 \quad 0 \quad 1 \quad 2 \quad ... \quad k-3 \quad k-2$ 这个时候我们将这个圈转换一下，变成: $0 \quad 1 \quad 2 \quad ... \quad n - 3 \quad n - 2$ 可以发现其实这个问题变成了 $n-1$ 个人报数的子问题。 所以我们只要将子问题的答案转换回去，就能知道最后那个人原来的编号。 稍微观察一下如何转换回去: $0 \Rightarrow k$ $1 \Rightarrow k + 1$ $...$ $n - k - 1 \Rightarrow n - 1$ $n - k \Rightarrow 0$ $n - k + 1 \Rightarrow 1$ $...$ $n - 3\Rightarrow k - 3$ $n - 2 \Rightarrow k - 2$ 不难发现 $x$ 转换回去后就变成了 $(x + k) \bmod n$ 我们设 $f[n]$ 表示 $n$ 个人报 $m$ 最后出圈人的编号。 显然，$f[1]=0$ 而根据我们刚才推的公式： $$f[n]=(f[n - 1]+k) \bmod n = (f[n - 1]+m \bmod n) \bmod n = (f[n - 1]+m ) \bmod n$$ 于是就可以愉快的递推了~ 代码1234567int Josephus(int n, int m)&#123; int res = 0; for (int i = 2; i &lt;= n; i ++) res = (res + m) % i; return res;&#125;]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的...第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>dfs</tag>
        <tag>剪枝</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$\rm W$”或“$\rm B}$”。其中“$\rm W}$”表示白格，“$\rm B$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}\text{W}&amp;\text{W}&amp;\text{B}&amp;\text{W}\\\text{B}&amp;\text{B}&amp;\text{W}&amp;\text{B}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{W}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{B}\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f[x]$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f[n-1]$ 那么我们 $f$ 的公式也就出来了。 $$f[n]=2n \times (2n-2) \times (f[n-1] + 2 \times (n-1) \times f[n-2])$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f[n-k]$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\sim n$ 的阶乘逆元有两种方法： 先求出 $1\sim n$ 每个数的逆元，然后正推： $(i!)^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345inv_fac[1] = 1;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; 先求出 $n$ 的阶乘逆元，然后倒推： $(i!)^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\sim n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过...$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出&#39; $No Answer$ &#39;。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 $\rm Rachel·Gardner$ Ray快来打我我爱她 小野寺小咲 ...渣乐 $\rm Ruby Rose$ 我也想要把新月玫瑰Ruby帅炸！ $\rm Weiss Schnee$ 傲娇 $\rm Blake Belladonna$ 我爱猫娘！ $\rm Yang Xiao Long$ 杨姐帅 牧濑红莉栖 $\text{El psy congroo}$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $\rm QAQ$ 雪乃好看 由比滨结衣 团子可爱 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样... $\rm x$毛 $\rm x$毛天下第一 格蕾 $\lceil\mathfrak{Grave} \, \mathfrak{for} \, \mathfrak{you}\rfloor$ 镰刀很戳我xp 蓝毒 蓝毒可可爱爱 $2019.7.17$ 注:我还真是 $\rm sb$ 连这都能列个表而且还不全]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下...这个博客也算是勉强搭成了，花了好久...感谢网上各位大佬帮助 $QAQ$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
