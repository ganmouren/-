<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[小技巧锦集]]></title>
    <url>%2Ftips%2F</url>
    <content type="text"><![CDATA[记录一下总结出的一些小技巧。 不开longlong见祖宗做题时一定要注意数据范围，并考虑每一步计算是否会爆 int 。 这个在做517的题时尤为明显，天天卡天天卡... 尽量少用cin，scanf永远滴神有的时候输入速度确实能决定结果517依旧天天卡。 输入字符串或单个字符时用scanf + %s 需要读单个字符尽量都用%s,以及避免读回车—— 517 以前为了这个发愁死了。 数组一定要开到足够大小这个一定要结合题目，看清范围，有时需要经过计算。 PS:有的时候cf显示WA实际上是数组爆了我还因为这个掉过一次分。 题目有取模，计算中有相减的时候，计算时加上一个模数防爆。 数学题不要忘记考虑0这个一定要记住，有的时候能把50分都卡没。 $\text{To be continued}$]]></content>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2020游记]]></title>
    <url>%2FCSP2020%2F</url>
    <content type="text"><![CDATA[高中第一次考信奥，希望不会 $\rm AFO$ 。 初赛$\rm 10.11$初赛进行时，感觉比去年卷子简单一点...或者是我稍微变强了一点点？ 考完之后根据洛咕答案对了一下感觉还行，估分大概 $\rm 88$ ，但是有几道憨批题错了... #3 $\rm 10.17$ 初赛成绩出来是 $\rm 89$ 所以这差了1分什么鬼啊 现在就是好好去准备复赛了...感觉我复赛可能还不一定比初赛强... $\text{To be continued}$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[真情假爱]]></title>
    <url>%2FLOVE%2F</url>
    <content type="text"><![CDATA[请输入密码证明身份以查看高级机密。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于乐课网]]></title>
    <url>%2Fhow_to_hack_leke%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! U2FsdGVkX1/Jx1FvPYB1kOnYSECfc8HWyOOpdmthoMFmBPZZlWUoZXW3wTJz+8gWZ+EsHzU/SDXQDgqGOkQP5y+IGW9aY7Kl9MJCyC2SflSycpDBDwHN7R/mJpCGAanCSVYOITfmnNTGegjF0CtJf5m06hhxBnDa8JSil7Hlu33Dd3MLUbdP82PTtpU5tGp4wezEvLIsBBTdrg4ICAmqKknecz257QXPmbgroeEp5ASDxvPZv+smBmAEoLl7/sO8WtNx0uJCkYls0KKW3K007rVCcfsWhJRzesMWUDx+YBFkEN3fleLViUriWpdUxPXaFXQUseS6HgcdzexXS1EiQxSaGsd6P7L6Tlw5CioMRvGPxqkrOtpiaSG2aK2sDRVvaFShkYnjehCV7PieY1hmByqsyqt+a9Pyo8/YgyhnjbCOldce3XWQSMBR5qvP6xgvCvmPnQhE80rEKcYi6fJYt+PyE/FS/NUq7Ar2m+DGMI/TXywIl70E2JDNYaGYzrVk4JRCAIZMXEyw84ErHJZpp+Jo9kHyyoPvhjP4jVtoBe1e8CsDBwDzhod6d6Cn/dnbzaZOkOrz5W29EX0YTPxCKEFj03bDozrLHsycoANxJ7wFYQPjxkieAwLIHQSxZBzwTw1DRU/ZIqq/FMavYpCxVywL0pUcK994ByHXOhXo+UhJOvoVtYvN0ybvlmWykhj2YM2NpsIpcBDwnZ9YIS4ww/TF2IhPKb8l8iMMGOnwuUQKcqSxSnnVm0CjU6JaYDyD4kZmlHTcR1hf9fdy5FuZQGa78FEbkfCls57XDsJie2yjB7qvqscm6gneHt/dIgVGol8SvUD916THVWnecj8BTpH9N3+ZWBV7vaLOHwk3he+T0ko2lV8gXEMdqSKcyxSfiDHGB1wQOAH3/iC+yFLOR9utkW5+KsLu2JeSRdrbtoiOvg8TuumVdYGsrQMAmjXXvBOrE1YPZp08PmlM+4EFxJpcHthKdZHgPNjsozFDtX5tRBno74SPLE4n6Kd68BKLjv+Hpf8Ov/dXIA4if3RBp3udGacxcJ/eVjTX3HYyAIrPr0iunmWkrzTTACUKrT4r+fZkloI/XtLBXHP5gC0mothAtVitrxupPb4A1gNZDA5u5PFjmpy8+/Dwuj7PBjwoBZqTXlqr4U21vachgUR3Oagf7Qmhnldn8vySYKkvES6eKVEzjcoq+7eINk5Unm2amUCmBcfSAJ3JkxBqsUboZCW8TPnaXqP/PvUzVmt28lHlJpMbwrsoHj6AsS2isBBUZCLI6HgHsng8J34jpuhtYzLyoQb8HYIO9mgQUiw6RAppUGIt2mYnEhv1vz749zX1csat6JdDDOkrjnv2PToCfUFOr8miQz1RmyXluxYIYeh51g4TSQ1O74Ffv8tZOZ3cMb3fO9t1fs1eXArpcilgjcMlu7PFrZF18FTjekN9DlUyc1ekHbJ+cA2FDnqFo3KfMTDRic8QrlbypPh97ETfZ6NL3nZbsEZb9lYkg8/VUMPtTVZlfUe5uO8UeovBT1rxcwzOJMpSJiMErN8rqavuJJrd+u1bEJwhOnLG9H666Ajk+rq0TJs/LaYjb7DxSbWW8gfH5DCy6Yf1WMlFF10m3pnFh6LUzWTjDESX1OIU9qtwSfqmxvM7aFgQFAGmLSGQsmrgrzNEUoJ/Z+ly1H2ofV1SeY4UriwvlzkyYwH5vHY/gtqVgqzLPRdOUTFqWcBO/4/aeWMdWgJHjjZg3qpR8ntD732OEZiDsEG+7ZXwHy+dGZzxfQqvtY2NMhgXHxamo6NN3d4SmXNuuTBVQJKvwTPnEGIq+1IFX2gaTr26Y/zOQhTP6EL4Bpkc2x8Cj8/xiliqB+Xwf6zannIK9li8Zk4iorNKTveMPXFkD5DFw2EYSOyrshY3prgYG3HzqqZSuU1zT0ALT4uU8rd5Vmhxdy76nHEzbJS6wSI5ZeqL9pv2p+D3J57EvSfvAW9dUxfK0hdkCeGQB6+1NNbvStZQLYljxTetuEQLWdllk9rsU8cqKvNcq8T3Okx2eBntHCOl7C2UcYjJ4YQ2JXSeJbcEbhD2mxehXvh7hxnqLP1hK0ZYW6zwKCJxKv617h9wNc7HMtNEHeFaLzeUmKctzOOry/UT5H6t8JojFc46bUQ5jtDgplmW4nU27GtaWQxvJEE5DK16RAda4GCD2LYiuZbZgfU8sixC39hCLNq2urQW98kIPWh2xCMVcM2xzp67GYDXPUEKZU1YeHr5ofru5J4gP9fUCu5ur2AuQ3cFW1bAv3wsaqlwj76r9jXUCkg5i/bcRUTiOIqdPCj/U7B4ycT7Bwy6zdoS29SjBrSUXovfrZtHUEQUFpI1SDyT8mlTuhKuLIaSYPTV1I3GQIeOitqjUDfhAgcYhqF8bh99zrPnFsGDfI69aC7A9u9uL86ul+ZigwIYfsg2G8mPj1erHUdCcZmDrHXskt5QBMcNDlWGoxzMwRPa9eLTFxpwb1D7TxM9JtwAqgnVuufmTSNQH0fujMzBhNzRqeSRFN4hS+H+ik/eHRywwFCeYJxbGNsqexwh50LXQlZwRf7ajPSYaYEXh+VT971EQgIS6Jupbdjttd00Jgh0TytfQZI026Ie7O/0t0CI/0pJUQvM+7okNDYf9LzkNZJ6cEQHogASkyLiqCNKuB6KG1GNiggqLDnRPcF0LhfAgryV6m4W+ClgW4UaUxTHmQI1qJZCixELpoROaJ+LE29rpiNv6nWWSY+FTeBlV5m4RHLrlYA/Y+AUkw7wY+6Oyr74TewB86QrUkoyk0VW8fP6/xKy2UItFZ1GyiSV+UwwZmf+mD+ZyOxOM0nH4IfzXDAibEXHP5/Isn1ORokf93zT58h19q+mbfKUDOV9GMyIP2tLKCqanmKTJC1U2csrjAhhTbFbMQCrtC1RJp99uEGziLulJmI9vVNxBRyUkuxFrZgT25PQnvkMvPJLiZWzaGs+THGSse+2o4elVIMv3LOCyPNf5jP2rVf/xgixNKYkQqO08a46Im4BznqMeWMJU/UW093hr7dMS1h3tk0QoAsVcI/+t2GjWMv4Ze7l9tCB9VJ08LphAZg3/owcj7EHpQJhRDzq8JNN88xvAgxj8ReiK8/nu2dMlaqLCHiK3QUl/HwDU7O5Pev8dDV4a5HaGBgAtS3xYSEEtOqr2uBnSCGDicTlAMReruyaO9/KktArk9Rcg0gcQNXYlWqnN4FnibD8XD9s2PpzRRfSQOAM04WAVrD7cQHQHWB/a6WsplB8orsi18xcLjct9ivbJghk81pdosF6M9gOdP3Fc6gO+GGUHEOFacpXMBOKI6Q5fzR5ROiXI/zhLXGyidNGljtMA2TVQkqhDAAvttw23Z1NanIlg6HoxRXzqxkwnHOKclq+1kgIxnJKgnqTjw/wNBAGf56eOh38PuYEhtsw0AyJfjjzcL5z+XrquXpYOkheHdPPfwSiKlHrpZfWtueEKnBJByFE4IjiiAw+RIzfU/h0UlMRmH4tj+EQX7Z56C03FfmkXjcUkxdPFtC3kWKGYTz8gi6P8wwCg4NP3s1XR0pzQmkoKKTspDnNKCCNP7cQouxNnKdU0xDHWvnwYNpWeqwJow+kapX05dbUFj6n/Sa7fLkMtERpuRQ2TnWIEEE04e+OrfmRxyUZ+mWF32xLtSja+UycraIFBK+70VckuNa9dUFMmPGA+vSlyKzndgnd2L911x2NSnB0xvC/Y36VAcZkW9Fbgv5CXX36m/KaQq9RteYrP87Hk8QpUdWxhG+wct4PuSthoreAMT0+LpGEmJIvA9IfLHJ7a/AvzUMoJgzZpfL21nAQEemyaxNKKq9JnXi6wv6i2tiCNdcRzEbov9FvOGBVoVtyrr2H4UQ5BnhKfbIbmVd1VkFVKCgH4hCgdF0q5pysvvBOAk+bs8r5kt0I3HrEIlxYgKPBcgJ9nLd1Pz9CzVWt6px4r/xTXopcFtOpmH4fFE7TZAQ/Xsla/urTRdLEYPmmjJlAtlJHTGTZHxmWgr5wEC8ygTD+JQWNMfHmomZCWCvpkDsqhLunLJhvZ/k5AktAAiNBF5DVXwfmoJSxOUbF6f93lvPCCjpxd70wVgadajude+47FGwdhTmPAXT4+tKcSm45B0pn1Tk4R60P/CLCu1vXz2QIF0gW301vGTpV8Ldiy8vl1ULGmz3dAwkjeksv9n19dh+3Adj6I2EHYZ5LqzDYer+3fZfO7WGfxTDkU3ABLzknKzpd81Q5XmpHSziDDr0FECtMfUUdzdMnTHEDPBYG5fZDov9/r0bnikVZXWzozjjKpC/PRSMaNoG34+yIuajO2D3yOfbVmfDZJL0+b0cdFa9VhPKni8jZ+UjizzqqxTOSztNljGSJ4nQuZm8Cgy5uoLrqULZshIXuQ/Ql3hhJ5da/ye6vAHngSLxeLtEWXCAzrAaRF0HI0uC4GZrEK5BWsvbxn+NfsauIoLYltDE3Fs09YTx/b3F2glAM4w4I7y1zIiA5x9PVcQoZBTbJWYvBjRGASpbQzjRxm3GiMWoKoAPPf1d0k3Ve6bdo+iL6JiqyefiOX52RWLmxlVYQoXG6sT4GAhBC5vaMWVHPWum1rsI7JTuofX7orbZZST6ocp2uNzliIO/5cIG14NQLFnhzu+spK5HBTkUbSWtlMOCkEBuNkzxShc2ThPUBbZz883pvFo9kqjn7eTHN4B4qgzdMsI2yUUwPrMVEsD9MhCUS8TEGPJcwEZA+TCOstPM3I45WD9y7BQrEUVzm6ZBM89+DEaWYxdrSgi6GEeU6tmBnSHjsLOkxUyaopGNyrec36L+67TnBcOnN+qmctL7IUJ2jWNd3qx7v3de1xFONJKsFcMiEeKVo0eYr76EhN4s6/NzTF2B8Whi9xjk1uJVHbx7glGDFYqV8Gt6JkIYH1aMvNQYa3cli4f73ZcnO2jqO5hdShjCvcCshBF6ndIW3ol4hXwkUTGD37jpsMacJBpfJluYM4wM4MtH3G9NMxRjMNkKW818ROxS04VLhswdw1QmjRLK9UD55MsVd+CVhHTEkSnKJXIm2+hG8lRNdi9gFQwJZsG15wBou0PrNs42QWCZ6YDtU9Dkz4iAB+/NSXcTmqH46UgXf8Jyw/MnJdjRL4bMtNIUzgz11W9ZJvd9CJtLwxlFXnREvjXkLfAzV2rONJ3CafhlWAXWm64YEnWUrsdGrqeBPBo2KooJRD6fE372ewTnKLc3yMCFLQXH5Ax/VwB5G02uRoFZdUKT80KhPIEw0rlx1nrBW3NDZ9+rkvJy0jOfr/KDdv+BjXXtlHZ+JRCpmwdwfizCol2eGt9VXTiT72y75gix6Nzu32Do8ASakiL8w34R8sHJXVoTVI/dFb3YouwNpuXrNM7Kaji2gIiB7WI48vdgk5gHJ2iKZpr09Tapkw9ZB85EXXErpXF2p3hTjmDKLxWBiH96G8UERdHz7ocIYSXRJGoNLlyWqni5BbfTMICeyfRyfzrvLGv1Vkvqn4jk/lNt+t3VWGtFroeImjOUYmTjG7uif6Guk/yLYYi4oHWm2z3UCnoHkRELfR8JdjSxTiyPzqh6eYk1hHtLvl9382K91dR1qTVdKJXAXpkExTIxe8AFlKQZZHMPfG2KVfMoiGHmwubWmDPhxaht1hp8pD4w4DFIgIirV3zwI1+XNK4YntlKhtZWF38nXu6HCjdTgeprjQ5a+DaE3hKAtoB27/rKlNyIvhpgsLO66jgwvpV7hBzmUBxSsUajRCi+L9wIY0+UvrNXodJ7PNIbEMLxNyEYUgOtp8rDl+0NaQH05qOlmKOuaviBNtWqnlsfVtoQHQzvC0l662U4DcsQ2fvPxQDycg431Lh/SDwn8zxuFGH141VT/fYmPUO8iv91RLkk/8LIuAjAbZGam3W5D0BzSFoDc0d3VH8BlGRJzFH/1LfgM7y9X9Ou0JgMJ5fEQM4vOEGYbaK0nk9aNLOu3Z0f0Xt2hCKpp78gpqXxwhE5ny3dWMzj5F6KwfthZXhteGmgj4ifu9nc+vhwkV3fPEBUleoLg/ITXEkQQBxQ4IqB9PbCfQ9G67gUHLarYwyL5e1TyiKF/6ZG5wrdC+2pwTGZ9+Rk8f58TlQC5LV6xGo/+UOW8Z6kuHVcn6BBVwAZzczR6UCrSLqFi3mr0QjoX0iZVgw==]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[破碎的白金色爱恋]]></title>
    <url>%2FBroken_platinum_love%2F</url>
    <content type="text"><![CDATA[我的白金精二几级了？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>写作</tag>
        <tag>二次元</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堕落的天蓝色天使]]></title>
    <url>%2FFallen_blue_angel%2F</url>
    <content type="text"><![CDATA[我本命的英文名？ Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>写作</tag>
        <tag>二次元</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2019游记]]></title>
    <url>%2FCSP2019%2F</url>
    <content type="text"><![CDATA[记录一下自己的爆零历程。 $\rm Day 0$ 出于复习颓废的目的请了一天假。 复习了几个算法，学了一下 $\rm excrt$ 和缩点，发现自己真的好多算法没学过...心态爆炸。 已经没有什么好害怕的了（指爆零毫无疑问）。 希望能考出个令人满意的成绩吧... $\text{TG}$$\rm Day 1$ 进考场之前上了个厕所，看见什么移动厕所以为很高端，直到我看到了外面矗立的一排电话亭一样的东西... 压缩包密码是 $Ren2Zhen0Si1Kao9$ 可是你让我思考我也思考不出来啊。 $\rm T1$ 我：难道不是把k的二进制输出来吗？ $\text{(1 minute later)}$ 我：打扰了。 然后就写了个递归，感觉还不错，瞄了一眼数据范围： $k\le2^{64}$ 我： 然后就想着 $80$ 分滚粗了。 自始至终我都没有想起有个东西叫 $\text{unsigned long long}$ 。 $\rm T2$ 这啥玩意儿？啥玩意儿？ 于是写了个超级无敌暴力 $\rm DFS$ ，大样例直接爆炸，然后心态就没了。 $\rm T3$ 第一眼：不就是把 $1$ 移动到 $1$ 节点点然后删边再移后面几个数吗。 码量略大，打了 $1$ 小时多。 然后我看了一眼样例，发现咋有点不对呢？ 思考了一分钟：我：？ 最后直接输出 $1 \rm ~ n$ 滚粗了，真自闭了。 第一次 $s$ 组就这样退役了。 $\rm Day2$ 根本没抱多少希望进考场。 $\rm T1$ 这尼玛啥啊？ 搁那推了半小时 $\rm DP$ 硬是啥也没推出来... 写个 $\rm DFS$ 就走了。 $\rm T2$ 一眼 $\rm DP$ 题。 看到那个 $(\sum\limits^{k_{j+1}-1}_{i=k_j} a[i])^2$ 就想起了以前看到的斜率优化。 然而没学（悲 所以自闭了， $O(n^3)$ $\rm DP$ 写完就走了。 $T3$ 想到关于每一个点是哪些树的重心，然而完全没思路。 写了个暴力，又写了个链的情况，结果跑大样例跑爆栈了， 然后就自闭了，结果把一个对的写成错的了。 真的退役了啊... 估分：$80+30+0+30+30+30=200$ 实际：$85+45+0+32+36+55=253$ $\rm PJ$$\rm PJ$ 多少还是让我恢复了点自信心... $\rm T1$ ？ $\rm T2$ 一开始直接 $\rm std::queue$ ，后来发现不行。 $\rm STL$ 搞得我连队列都差点不会写... $\rm T3$ 一眼 $\rm DP$ 题。 但是我尼玛不会 $\rm DP$ 啊喂！ 然后调了 $1$ 个多小时，奇迹般的写出来了。 然而是 $O(T^2nm)$ ...希望数据水一点（逃 $\rm T4$ 仔细想了一下发现这样一个传递可以在一个地方反复横跳， 我：这不就跑遍 $\rm BFS$ 最短路吗？ 仔细想下不对，要维护奇最短路和偶最短路，于是写了个 $\rm BFS$ ，然而并不知道有没有正确性... 估分：$100+100+80+100=380$ 实际：$100+100+70+100=370$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树状数组]]></title>
    <url>%2FBIT%2F</url>
    <content type="text"><![CDATA[树状数组是一种非常好打优美的数据结构，适用性十分广泛，而且常数非常小。 （自己花五分钟做的图） 下面蓝色的是我们的原数组，红色的即是我们的 $tree$ 数组。 树状数组的主旨是单点修改，查询前缀和，它的核心是 $\rm lowbit$ 如 $\rm lowbit((111)_2) = (001)_2,\rm lowbit((110)_2) = (010)_2$ 即 $\rm lowbit(7) = 1,\rm lowbit(6) = 2$ 仔细观察原树，不难发现： $$tree[i]=\sum\limits_{j=i-lowbit(i)+1}^i a[j]$$ 于是我们所求的前缀和可以由 $tree$ 数组得出 $$sum[i] = tree[i] + tree[i - lowbit(i)] + tree[(i - lowbit(i)) - lowbit(i - lowbit(i))] ...$$ 举个栗子： $$sum[(111)_2] = tree[(111)_2] + tree[(110)_2] + tree[(100)_2]$$ 这里需要仔细看几遍才能理解。 于是查询前缀和的操作就写好了。 1234567ll query(int p) // 查询前缀和&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 接下来考虑单点修改 当 $a[i]$ 改变的时候，所有包含 $i$ 这个位置的 $tree[j]$ 均要改变。 树状数组是一棵树！ 于是我们只需要找到 $tree[i]$ 的父亲，以及它的父亲的父亲爷爷...逐个更新 而再次仔细观察，我们惊奇的发现： 节点 $i$ 的父亲编号即为 $i + \rm lowbit(i)$ ! 12345void add(int p, ll x) // 单点修改&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125; 单点修改 + 区间查询知道前缀和很容易计算出区间和。 区间 $[l,r]$ 的和即为 $sum[r] - sum[l-1]$ 。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125; 区间修改 + 单点查询这里我们要用到神奇的差分。 新建 $d$ 数组。 $$d[1]=a[1],d[i]=a[i]-a[i-1] (2\le i \le n)$$ 可以得出: $$a[p]=\sum\limits_{i=1}^{p}d[i]$$ 这是啥？不就是前缀和嘛！ 而当区间 $[l,r]$ 全部加上 $x$ 时，我们只需将 $d[l]$ 加上 $x$ ，$d[r + 1]$ 减去 $x$ 就好了。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 区间修改 + 区间查询这是最常用的算法，第一次看到的时候真的惊艳到我了。 $$sum[p]=\sum\limits_{i=1}^p a[i] = \sum\limits_{i=1}^p \sum\limits_{j=1}^i d[j]$$ 仔细看，发现 $d[1]$ 加了 $p$ 次， $d[2]$ 加了 $p-1$ 次， $d[3]$ 加了 $p-2$ 次... 于是可以继续推： $$sum[p]=\sum\limits_{i=1}^p d[i] \times (p - i + 1)$$ $$=(p+1)\times\sum\limits_{i=1}^p d[i] - \sum\limits_{i=1}^p d[i] \times i$$ 于是我们只需要同时维护 $\sum\limits_{i=1}^p d[i]$ 与 $\sum\limits_{i=1}^p d[i] \times i$ 便可以了。 1234567891011121314151617181920212223void add(int p, ll x)&#123; for (int i = p; i &lt;= n; i += (i &amp; -i)) tree1[i] += x, tree2[i] += x * p;&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; for (int i = p; i; i -= (i &amp; -i)) res += (p + 1) * tree1[i] - tree2[i]; return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>树状数组</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站]]></title>
    <url>%2FSome_websites%2F</url>
    <content type="text"><![CDATA[列举一些我常用的网站。 顺便方便下我自己 颓废：$\rm B$站 $\rm generals.io$ $\rm NGA$ $\rm sm.ms$ (图床) $\rm Pixiv$ $\text{OI}$:$\rm loj$ 洛谷 $\rm codeforces$ $\rm OI WIKI$ 奇奇怪怪的东西:图论 几何 函数(或许应归在颓废一类？) 数列(做题找规律神器) $\LaTeX$ 打比赛专用百度翻译]]></content>
      <tags>
        <tag>OI</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loj-2590 NOIP2009 最优贸易]]></title>
    <url>%2Floj-2590%2F</url>
    <content type="text"><![CDATA[题目描述C 国有 $n$ 个大城市和 $m$ 条道路，每条道路连接这 $n$ 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 $m$ 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 $1$ 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 $n$ 个城市的标号从 $1\sim n$ ，阿龙决定从 $1$ 号城市出发，并最终在 $n$ 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 $n$ 个城市。 阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品——水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 假设 C 国有 $5$ 个大城市，城市的编号和道路连接情况如下图，单向箭头表示这条道路为单向通行，双向箭头表示这条道路为双向通行。 假设 $1\sim n$ 号城市的水晶球价格分别为 $4,3,5,6,1$ 。 阿龙可以选择如下一条线路：$1\rightarrow 2 \rightarrow 3 \rightarrow 5$，并在 $2$ 号城市以 $3$ 的价格买入水晶球，在 $3$ 号城市以 $5$ 的价格卖出水晶球，赚取的旅费数为 $2$ 。 阿龙也可以选择如下一条线路 $1\rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 5$，并在第 $1$ 次到达 $5$ 号城市时以 $1$ 的价格买入水晶球，在第 $2$ 次到达 $4$ 号城市时以 $6$ 的价格卖出水晶球，赚取的旅费数为 $5$ 。 现在给出 $n$ 个城市的水晶球价格， $m$ 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式输入第一行包含 $2$ 个正整数 $n$ 和 $m$，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 $n$ 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 $n$ 个城市的商品价格。 接下来 $m$ 行，每行有 $3$ 个正整数， $x,y,z$ ，每两个整数之间用一个空格隔开。如果 $z=1$，表示这条道路是城市 $x$ 到城市 $y$ 之间的单向道路；如果 $z=2$，表示这条道路为城市 $x$ 和城市 $y$ 之间的双向道路。 输出格式输出共 $1$ 行，包含 $1$ 个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 $0$ 。 样例12345675 54 3 5 6 11 2 11 4 12 3 23 5 14 5 2 样例输出15 数据范围与提示输入数据保证 $1$ 号城市可以到达 $n$ 号城市。 对于 $10\%$ 的数据，$n\le 6$； 对于 $30\%$ 的数据，$n\le 100$； 对于 $50\%$ 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市； 对于 $100\%$ 的数据，$1\le n\le 100,000$，$1\le m\le 500,000$，$1\le x, y \le n$，$1\le z\le 2$，各城市水晶球价格 $\le 100$。 loj链接 我已经很久很久很久没有水更过 $blog$ 了...... 最近暑假刚好有点空所以来写点题解。 这道题是一道很经典的分层图题目，虽然我看不出来 以前我可能写过这道题，但也是半懂不懂抄题解的，现在重写了一遍，感觉理解透彻了很多。 我们可以把这张图看成有相同的 $3$ 层，每一层中节点的连接方式如题所述，然后我们将第 $1$ 层的 $i$ 的节点与第 $2$ 层的相应节点连一条单向边，边权为 $-v[i]$ ，相当于从第 $1$ 层走到第 $2$ 层就是买了这个城市的水晶球，并且我们是走不回去的。 而第 $2$ 层与第 $3$ 层的连接同理，但是边权设为 $v[i]$ ，相当于我们卖掉了水晶球赚了 $v[i]$ 。 加上代码应该很容易理解。 12345678910111213141516171819202122for (int i = 1; i &lt;= m; i ++)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125;&#125;for (int i = 1; i &lt;= n; i ++)&#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]);&#125; 最后我们还要注意一个细节：我们是可以不买的，所以我们将每一层的 $n$ 节点都连向我们的最终节点，边权为 $0$, 我这里把 $0$ 号节点设为最终节点。 123add_edge(n, 0, 0);add_edge(2 * n, 0, 0);add_edge(3 * n, 0, 0); 最后我们观察：我们从 $1$ 号节点走到 $0$ 节点的最长路即是我们能获得的最大收益。 最后附上完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;const int M = 5e5 + 5;int n, m;int v[N];struct E&#123; int to, dis, next;&#125; edge[(M * 6) + (N &lt;&lt; 1)];int num_edge, head[N * 3];void add_edge(int from, int to, int dis)&#123; edge[++ num_edge] = (E)&#123;to, dis, head[from]&#125;; head[from] = num_edge;&#125;int dis[N * 3];bool vis[N * 3];struct point&#123; int u; bool friend operator &lt; (point a, point b) &#123; return dis[a.u] &lt; dis[b.u]; &#125;&#125;;std::priority_queue &lt;point&gt; q;void dijkstra(int s) // dijkstra万岁&#123; memset(dis, -127/3, sizeof dis); dis[s] = 0; vis[s] = true; q.push((point)&#123;s&#125;); while (!q.empty()) &#123; int u = q.top().u; q.pop(); vis[u] = false; for (int p = head[u]; p; p = edge[p].next) &#123; int v = edge[p].to, d = edge[p].dis; if (dis[v] &lt; dis[u] + d) &#123; dis[v] = dis[u] + d; if (!vis[v]) q.push((point)&#123;v&#125;), vis[v] = true; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;v[i]); int x, y, z; for (int i = 1; i &lt;= m; i ++) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) &#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]); &#125; add_edge(n, 0, 0); add_edge(2 * n, 0, 0); add_edge(3 * n, 0, 0); dijkstra(1); printf("%d", dis[0]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>OI</tag>
        <tag>loj</tag>
        <tag>最短路</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约瑟夫环]]></title>
    <url>%2FJosephus%2F</url>
    <content type="text"><![CDATA[$n$ 个人围成一圈,编号按顺序从 $0$ 到 $n-1$，从第一个人开始报数,数到 $m$ 的人出列,再由下一个人重新从 $1$ 开始报数,数到 $m$ 的人再出圈,……依次类推,直到所有的人都出圈,请输出最后一个出圈的人的编号。 今天稍微学习了一下这个玩意儿，感觉还挺神奇的。 第一种做法：暴力模拟这个我在这就不讲了，很容易就能写出来。 第二种做法：递推我们先考虑第一个出圈的人。 $m &lt; n$ 那么这个人的编号即为 $m - 1$ $m \ge n$ 那么这个人的编号即为 $(m - 1) \bmod n$ 综合一下，第一个出圈的人的编号绝对为 $(m - 1) \bmod n$ 方便起见，我们设 $k - 1 = (m - 1) \bmod n$ 。 于是这个圈就变成了这样： $k \quad k+1 \quad k+2 \quad ... \quad n-2 \quad n-1 \quad 0 \quad 1 \quad 2 \quad ... \quad k-3 \quad k-2$ 这个时候我们将这个圈转换一下，变成: $0 \quad 1 \quad 2 \quad ... \quad n - 3 \quad n - 2$ 可以发现其实这个问题变成了 $n-1$ 个人报数的子问题。 所以我们只要将子问题的答案转换回去，就能知道最后那个人原来的编号。 稍微观察一下如何转换回去: $0 \Rightarrow k$ $1 \Rightarrow k + 1$ $...$ $n - k - 1 \Rightarrow n - 1$ $n - k \Rightarrow 0$ $n - k + 1 \Rightarrow 1$ $...$ $n - 3\Rightarrow k - 3$ $n - 2 \Rightarrow k - 2$ 不难发现 $x$ 转换回去后就变成了 $(x + k) \bmod n$ 我们设 $f[n]$ 表示 $n$ 个人报 $m$ 最后出圈人的编号。 显然，$f[1]=0$ 而根据我们刚才推的公式： $$f[n]=(f[n - 1]+k) \bmod n = (f[n - 1]+m \bmod n) \bmod n = (f[n - 1]+m ) \bmod n$$ 于是就可以愉快的递推了~ 代码1234567int Josephus(int n, int m)&#123; int res = 0; for (int i = 2; i &lt;= n; i ++) res = (res + m) % i; return res;&#125;]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的...第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>dfs</tag>
        <tag>剪枝</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$\rm W$”或“$\rm B}$”。其中“$\rm W}$”表示白格，“$\rm B$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}\text{W}&amp;\text{W}&amp;\text{B}&amp;\text{W}\\\text{B}&amp;\text{B}&amp;\text{W}&amp;\text{B}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{W}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{B}\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f[x]$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f[n-1]$ 那么我们 $f$ 的公式也就出来了。 $$f[n]=2n \times (2n-2) \times (f[n-1] + 2 \times (n-1) \times f[n-2])$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f[n-k]$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\sim n$ 的阶乘逆元有两种方法： 先求出 $1\sim n$ 每个数的逆元，然后正推： $(i!)^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345inv_fac[1] = 1;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; 先求出 $n$ 的阶乘逆元，然后倒推： $(i!)^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\sim n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过...$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出&#39; $No Answer$ &#39;。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 $\rm Rachel·Gardner$ Ray快来打我我爱她 小野寺小咲 ...渣乐 $\rm Ruby Rose$ 我也想要把新月玫瑰Ruby帅炸！ $\rm Weiss Schnee$ 傲娇 $\rm Blake Belladonna$ 我爱猫娘！ $\rm Yang Xiao Long$ 杨姐帅 牧濑红莉栖 $\text{El psy congroo}$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $\rm QAQ$ 雪乃好看 由比滨结衣 团子可爱 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样... $\rm x$毛 $\rm x$毛天下第一 格蕾 $\lceil\mathfrak{Grave} \, \mathfrak{for} \, \mathfrak{you}\rfloor$ 镰刀很戳我xp 蓝毒 蓝毒可可爱爱 $2019.7.17$ 注:我还真是 $\rm sb$ 连这都能列个表而且还不全]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下...这个博客也算是勉强搭成了，花了好久...感谢网上各位大佬帮助 $QAQ$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
