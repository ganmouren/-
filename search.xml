<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[破碎的白金色爱恋]]></title>
    <url>%2FBroken_platinum_love%2F</url>
    <content type="text"><![CDATA[我的白金精二几级了？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堕落的天蓝色天使]]></title>
    <url>%2FFallen_blue_angel%2F</url>
    <content type="text"><![CDATA[我本命的英文名？ Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2019游记]]></title>
    <url>%2FCSP2019%2F</url>
    <content type="text"><![CDATA[记录一下自己的爆零历程。 $\text{Day 0}$ 出于复习颓废的目的请了一天假。 复习了几个算法，学了一下 $\text{excrt}$ 和缩点，发现自己真的好多算法没学过…心态爆炸。 已经没有什么好害怕的了（指爆零毫无疑问）。 希望能考出个令人满意的成绩吧… $\text{TG}$$\text{Day 1}$ 进考场之前上了个厕所，看见什么移动厕所以为很高端，直到我看到了外面矗立的一排电话亭一样的东西… 压缩包密码是 $Ren2Zhen0Si1Kao9$ 可是你让我思考我也思考不出来啊。 $\text{T1}$ 我：难道不是把k的二进制输出来吗？ $\text{(1 minute later)}$ 我：打扰了。 然后就写了个递归，感觉还不错，瞄了一眼数据范围： $k\le2^{64}$ 我： 然后就想着 $80$ 分滚粗了。 自始至终我都没有想起有个东西叫 $\text{unsigned long long}$ 。 $\text{T2}$ 这啥玩意儿？啥玩意儿？ 于是写了个超级无敌暴力 $\text{DFS}$ ，大样例直接爆炸，然后心态就没了。 $\text{T3}$ 第一眼：不就是把 $1$ 移动到 $1$ 节点点然后删边再移后面几个数吗。 码量略大，打了 $1$ 小时多。 然后我看了一眼样例，发现咋有点不对呢？ 思考了一分钟：我：？ 最后直接输出 $1 \text{~} n$ 滚粗了，真自闭了。 第一次 $s$ 组就这样退役了。 $\text{Day2}$ 根本没抱多少希望进考场。 $\text{T1}$ 这尼玛啥啊？ 搁那推了半小时 $\text{DP}$ 硬是啥也没推出来… 写个 $\text{DFS}$ 就走了。 $\text{T2}$ 一眼 $\text{DP}$ 题。 看到那个 $(\sum\limits^{k_{j+1}-1}_{i=k_j} a[i])^2$ 就想起了以前看到的斜率优化。 然而没学（悲 所以自闭了， $O(n^3)$ $\text{DP}$ 写完就走了。 $T3$ 想到关于每一个点是哪些树的重心，然而完全没思路。 写了个暴力，又写了个链的情况，结果跑大样例跑爆栈了， 然后就自闭了，结果把一个对的写成错的了。 真的退役了啊… 估分：$80+30+0+30+30+30=200$ 实际：$85+45+0+32+36+55=253$ $\text{PJ}$$\text{PJ}$ 多少还是让我恢复了点自信心… $\text{T1}$ ？ $\text{T2}$ 一开始直接 $\text{std::queue}$ ，后来发现不行。 $\text{STL}$ 搞得我连队列都差点不会写… $\text{T3}$ 一眼 $\text{DP}$ 题。 但是我尼玛不会 $\text{DP}$ 啊喂！ 然后调了 $1$ 个多小时，奇迹般的写出来了。 然而是 $O(T^2nm)$ …希望数据水一点（逃 $\text{T4}$ 仔细想了一下发现这样一个传递可以在一个地方反复横跳， 我：这不就跑遍 $\text{BFS}$ 最短路吗？ 仔细想下不对，要维护奇最短路和偶最短路，于是写了个 $\text{BFS}$ ，然而并不知道有没有正确性… 估分：$100+100+80+100=380$ 实际：$100+100+70+100=370$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树状数组]]></title>
    <url>%2FBIT%2F</url>
    <content type="text"><![CDATA[树状数组是一种非常好打优美的数据结构，适用性十分广泛，而且常数非常小。 （自己花五分钟做的图） 下面蓝色的是我们的原数组，红色的即是我们的 $tree$ 数组。 树状数组的主旨是单点修改，查询前缀和，它的核心是 $\text{lowbit}$ 如 $\text{lowbit}((111)_2) = (001)_2,\text{lowbit}((110)_2) = (010)_2$ 即 $\text{lowbit}(7) = 1,\text{lowbit}(6) = 2$ 仔细观察原树，不难发现： $$tree[i]=\sum\limits_{j=i-lowbit(i)+1}^i a[j]$$ 于是我们所求的前缀和可以由 $tree$ 数组得出 $$sum[i] = tree[i] + tree[i - lowbit(i)] + tree[(i - lowbit(i)) - lowbit(i - lowbit(i))] …$$ 举个栗子： $$sum[(111)_2] = tree[(111)_2] + tree[(110)_2] + tree[(100)_2]$$ 这里需要仔细看几遍才能理解。 于是查询前缀和的操作就写好了。 1234567ll query(int p) // 查询前缀和&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 接下来考虑单点修改 当 $a[i]$ 改变的时候，所有包含 $i$ 这个位置的 $tree[j]$ 均要改变。 树状数组是一棵树！ 于是我们只需要找到 $tree[i]$ 的父亲，以及它的父亲的父亲爷爷…逐个更新 而再次仔细观察，我们惊奇的发现： 节点 $i$ 的父亲编号即为 $i + \text{lowbit}(i)$ ! 12345void add(int p, ll x) // 单点修改&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125; 单点修改 + 区间查询知道前缀和很容易计算出区间和。 区间 $[l,r]$ 的和即为 $sum[r] - sum[l-1]$ 。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125; 区间修改 + 单点查询这里我们要用到神奇的差分。 新建 $d$ 数组。 $$d[1]=a[1],d[i]=a[i]-a[i-1] (2\le i \le n)$$ 可以得出: $$a[p]=\sum\limits_{i=1}^{p}d[i]$$ 这是啥？不就是前缀和嘛！ 而当区间 $[l,r]$ 全部加上 $x$ 时，我们只需将 $d[l]$ 加上 $x$ ，$d[r + 1]$ 减去 $x$ 就好了。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 区间修改 + 区间查询这是最常用的算法，第一次看到的时候真的惊艳到我了。 $$sum[p]=\sum\limits_{i=1}^p a[i] = \sum\limits_{i=1}^p \sum\limits_{j=1}^i d[j]$$ 仔细看，发现 $d[1]$ 加了 $p$ 次， $d[2]$ 加了 $p-1$ 次， $d[3]$ 加了 $p-2$ 次… 于是可以继续推： $$sum[p]=\sum\limits_{i=1}^p d[i] \times (p - i + 1)$$ $$=(p+1)\times\sum\limits_{i=1}^p d[i] - \sum\limits_{i=1}^p d[i] \times i$$ 于是我们只需要同时维护 $\sum\limits_{i=1}^p d[i]$ 与 $\sum\limits_{i=1}^p d[i] \times i$ 便可以了。 1234567891011121314151617181920212223void add(int p, ll x)&#123; for (int i = p; i &lt;= n; i += (i &amp; -i)) tree1[i] += x, tree2[i] += x * p;&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; for (int i = p; i; i -= (i &amp; -i)) res += (p + 1) * tree1[i] - tree2[i]; return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>树状数组</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站]]></title>
    <url>%2FSome_websites%2F</url>
    <content type="text"><![CDATA[列举一些我常用的网站。 顺便方便下我自己 颓废：$\text{B站}$ $\text{generals.io}$ $\text{NGA}$ $\text{sm.ms}$ (图床) $\text{Pixiv}$ $\text{OI}$:$\text{loj}$ 洛谷 $\text{codeforces}$ $\text{OI WIKI}$ 奇奇怪怪的东西:图论 几何 函数(或许应归在颓废一类？) 数列(做题找规律神器) $\LaTeX$ 打比赛专用百度翻译]]></content>
      <tags>
        <tag>OI</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loj-2590 NOIP2009 最优贸易]]></title>
    <url>%2Floj-2590%2F</url>
    <content type="text"><![CDATA[题目描述C 国有 $n$ 个大城市和 $m$ 条道路，每条道路连接这 $n$ 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 $m$ 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 $1$ 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 $n$ 个城市的标号从 $1\sim n$ ，阿龙决定从 $1$ 号城市出发，并最终在 $n$ 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 $n$ 个城市。 阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品——水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 假设 C 国有 $5$ 个大城市，城市的编号和道路连接情况如下图，单向箭头表示这条道路为单向通行，双向箭头表示这条道路为双向通行。 假设 $1\sim n$ 号城市的水晶球价格分别为 $4,3,5,6,1$ 。 阿龙可以选择如下一条线路：$1\rightarrow 2 \rightarrow 3 \rightarrow 5$，并在 $2$ 号城市以 $3$ 的价格买入水晶球，在 $3$ 号城市以 $5$ 的价格卖出水晶球，赚取的旅费数为 $2$ 。 阿龙也可以选择如下一条线路 $1\rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 5$，并在第 $1$ 次到达 $5$ 号城市时以 $1$ 的价格买入水晶球，在第 $2$ 次到达 $4$ 号城市时以 $6$ 的价格卖出水晶球，赚取的旅费数为 $5$ 。 现在给出 $n$ 个城市的水晶球价格， $m$ 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式输入第一行包含 $2$ 个正整数 $n$ 和 $m$，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 $n$ 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 $n$ 个城市的商品价格。 接下来 $m$ 行，每行有 $3$ 个正整数， $x,y,z$ ，每两个整数之间用一个空格隔开。如果 $z=1$，表示这条道路是城市 $x$ 到城市 $y$ 之间的单向道路；如果 $z=2$，表示这条道路为城市 $x$ 和城市 $y$ 之间的双向道路。 输出格式输出共 $1$ 行，包含 $1$ 个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 $0$ 。 样例12345675 54 3 5 6 11 2 11 4 12 3 23 5 14 5 2 样例输出15 数据范围与提示输入数据保证 $1$ 号城市可以到达 $n$ 号城市。 对于 $10\%$ 的数据，$n\le 6$； 对于 $30\%$ 的数据，$n\le 100$； 对于 $50\%$ 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市； 对于 $100\%$ 的数据，$1\le n\le 100,000$，$1\le m\le 500,000$，$1\le x, y \le n$，$1\le z\le 2$，各城市水晶球价格 $\le 100$。 loj链接 我已经很久很久很久没有水更过 $blog$ 了…… 最近暑假刚好有点空所以来写点题解。 这道题是一道很经典的分层图题目，虽然我看不出来 以前我可能写过这道题，但也是半懂不懂抄题解的，现在重写了一遍，感觉理解透彻了很多。 我们可以把这张图看成有相同的 $3$ 层，每一层中节点的连接方式如题所述，然后我们将第 $1$ 层的 $i$ 的节点与第 $2$ 层的相应节点连一条单向边，边权为 $-v[i]$ ，相当于从第 $1$ 层走到第 $2$ 层就是买了这个城市的水晶球，并且我们是走不回去的。 而第 $2$ 层与第 $3$ 层的连接同理，但是边权设为 $v[i]$ ，相当于我们卖掉了水晶球赚了 $v[i]$ 。 加上代码应该很容易理解。 12345678910111213141516171819202122for (int i = 1; i &lt;= m; i ++)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125;&#125;for (int i = 1; i &lt;= n; i ++)&#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]);&#125; 最后我们还要注意一个细节：我们是可以不买的，所以我们将每一层的 $n$ 节点都连向我们的最终节点，边权为 $0$, 我这里把 $0$ 号节点设为最终节点。 123add_edge(n, 0, 0);add_edge(2 * n, 0, 0);add_edge(3 * n, 0, 0); 最后我们观察：我们从 $1$ 号节点走到 $0$ 节点的最长路即是我们能获得的最大收益。 最后附上完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;const int M = 5e5 + 5;int n, m;int v[N];struct E&#123; int to, dis, next;&#125; edge[(M * 6) + (N &lt;&lt; 1)];int num_edge, head[N * 3];void add_edge(int from, int to, int dis)&#123; edge[++ num_edge] = (E)&#123;to, dis, head[from]&#125;; head[from] = num_edge;&#125;int dis[N * 3];bool vis[N * 3];struct point&#123; int u; bool friend operator &lt; (point a, point b) &#123; return dis[a.u] &lt; dis[b.u]; &#125;&#125;;std::priority_queue &lt;point&gt; q;void dijkstra(int s) // dijkstra万岁&#123; memset(dis, -127/3, sizeof dis); dis[s] = 0; vis[s] = true; q.push((point)&#123;s&#125;); while (!q.empty()) &#123; int u = q.top().u; q.pop(); vis[u] = false; for (int p = head[u]; p; p = edge[p].next) &#123; int v = edge[p].to, d = edge[p].dis; if (dis[v] &lt; dis[u] + d) &#123; dis[v] = dis[u] + d; if (!vis[v]) q.push((point)&#123;v&#125;), vis[v] = true; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;v[i]); int x, y, z; for (int i = 1; i &lt;= m; i ++) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) &#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]); &#125; add_edge(n, 0, 0); add_edge(2 * n, 0, 0); add_edge(3 * n, 0, 0); dijkstra(1); printf("%d", dis[0]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>OI</tag>
        <tag>loj</tag>
        <tag>最短路</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约瑟夫环]]></title>
    <url>%2FJosephus%2F</url>
    <content type="text"><![CDATA[$n$ 个人围成一圈,编号按顺序从 $0$ 到 $n-1$，从第一个人开始报数,数到 $m$ 的人出列,再由下一个人重新从 $1$ 开始报数,数到 $m$ 的人再出圈,……依次类推,直到所有的人都出圈,请输出最后一个出圈的人的编号。 今天稍微学习了一下这个玩意儿，感觉还挺神奇的。 第一种做法：暴力模拟这个我在这就不讲了，很容易就能写出来。 第二种做法：递推我们先考虑第一个出圈的人。 $m &lt; n$ 那么这个人的编号即为 $m - 1$ $m \ge n$ 那么这个人的编号即为 $(m - 1) \bmod n$ 综合一下，第一个出圈的人的编号绝对为 $(m - 1) \bmod n$ 方便起见，我们设 $k - 1 = (m - 1) \bmod n$ 。 于是这个圈就变成了这样： $k \quad k+1 \quad k+2 \quad … \quad n-2 \quad n-1 \quad 0 \quad 1 \quad 2 \quad … \quad k-3 \quad k-2$ 这个时候我们将这个圈转换一下，变成: $0 \quad 1 \quad 2 \quad … \quad n - 3 \quad n - 2$ 可以发现其实这个问题变成了 $n-1$ 个人报数的子问题。 所以我们只要将子问题的答案转换回去，就能知道最后那个人原来的编号。 稍微观察一下如何转换回去: $0 \Rightarrow k$ $1 \Rightarrow k + 1$ $…$ $n - k - 1 \Rightarrow n - 1$ $n - k \Rightarrow 0$ $n - k + 1 \Rightarrow 1$ $…$ $n - 3\Rightarrow k - 3$ $n - 2 \Rightarrow k - 2$ 不难发现 $x$ 转换回去后就变成了 $(x + k) \bmod n$ 我们设 $f[n]$ 表示 $n$ 个人报 $m$ 最后出圈人的编号。 显然，$f[1]=0$ 而根据我们刚才推的公式： $$f[n]=(f[n - 1]+k) \bmod n = (f[n - 1]+m \bmod n) \bmod n = (f[n - 1]+m ) \bmod n$$ 于是就可以愉快的递推了~ 代码1234567int Josephus(int n, int m)&#123; int res = 0; for (int i = 2; i &lt;= n; i ++) res = (res + m) % i; return res;&#125;]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的…第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>dfs</tag>
        <tag>剪枝</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$\text{W}$”或“$\text{B}$”。其中“$\text{W}$”表示白格，“$\text{B}$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}\text{W}&amp;\text{W}&amp;\text{B}&amp;\text{W}\\\text{B}&amp;\text{B}&amp;\text{W}&amp;\text{B}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{W}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{B}\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随机动漫图片]]></title>
    <url>%2FRandom_anime_picture%2F</url>
    <content type="text"><![CDATA[无聊的可以来刷一刷 刷出来se图也不能怪我，毕竟是随机的]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f[x]$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f[n-1]$ 那么我们 $f$ 的公式也就出来了。 $$f[n]=2n \times (2n-2) \times (f[n-1] + 2 \times (n-1) \times f[n-2])$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f[n-k]$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)(a\text{与}b$的最大公因数$)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\sim n$ 的阶乘逆元有两种方法： 先求出 $1\sim n$ 每个数的逆元，然后正推： $(i!)^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345inv_fac[1] = 1;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; 先求出 $n$ 的阶乘逆元，然后倒推： $(i!)^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\text{ ~ }n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过…$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出’ $No Answer$ ‘。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 御坂美琴 你指尖… $\text{Rachel·Gardner}$ Ray快来打我我爱她 小鸟游六花 邪王真眼赛高！ 桐崎千棘 自古金发多傲娇 小野寺小咲 …渣乐 休比 休比太太太太太太可爱了 $\text{Ruby Rose}$ 我也想要把新月玫瑰Ruby帅炸！ $\text{Weiss Schnee}$ 听说直男克傲娇 $\text{Blake Belladonna}$ 我爱猫娘！ $\text{Yang Xiao Long}$ 杨姐嫁我 筒隐月子 面瘫什么的 斯巴拉西 牧濑红莉栖 $\text{El psy congroo}$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $\text{QAQ}$ 雪乃太好看了 由比滨结衣 团子真的好可爱 戸塚彩加 但是，是男的。 川崎沙希 蓝发傲娇真好 一色彩羽 喜闻乐见的小妖精 古莉 虽然是个 $baka$ 但是我喜欢图是真的少啊 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样… 四糸乃 大哥哥这里有糖吃 鸢一折纸 折纸大师，受我一拜 八舞耶倶矢 幸运 $\text{E }($ 大雾 利姆鲁 利姆鲁对我一心一意 $\text{x}$毛 $\text{x}$毛天下第一 格蕾 $\lceil\mathfrak{Grave}\text{ }\mathfrak{for}\text{ }\mathfrak{you}\rfloor$ 镰刀很戳我xp 蓝毒 蓝毒可可爱爱 $2019.7.17$ 注:我还真是 $sb$ 连这都能列个表而且还不全]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>暴力</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下…这个博客也算是勉强搭成了，花了好久…感谢网上各位大佬帮助 $QAQ$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
