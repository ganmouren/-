<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[蓝白之争]]></title>
    <url>%2FShuraba%2F</url>
    <content type="text"><![CDATA[白的英文名？ Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堕落的天蓝色天使]]></title>
    <url>%2FFallen_blue_angel%2F</url>
    <content type="text"><![CDATA[我本命的英文名？ Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>写作</tag>
        <tag>Arknights</tag>
        <tag>R18</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2019游记]]></title>
    <url>%2FCSP2019%2F</url>
    <content type="text"><![CDATA[记录一下自己的爆零历程。 $\text{Day 0}$ 出于复习颓废的目的请了一天假。 复习了几个算法，学了一下 $\text{excrt}$ 和缩点，发现自己真的好多算法没学过…心态爆炸。 已经没有什么好害怕的了（指爆零毫无疑问）。 希望能考出个令人满意的成绩吧… $\text{TG}$$\text{Day 1}$ 进考场之前上了个厕所，看见什么移动厕所以为很高端，直到我看到了外面矗立的一排电话亭一样的东西… 压缩包密码是 $Ren2Zhen0Si1Kao9$ 可是你让我思考我也思考不出来啊。 $\text{T1}$ 我：难道不是把k的二进制输出来吗？ $\text{(1 minute later)}$ 我：打扰了。 然后就写了个递归，感觉还不错，瞄了一眼数据范围： $k\le2^{64}$ 我： 然后就想着 $80$ 分滚粗了。 自始至终我都没有想起有个东西叫 $\text{unsigned long long}$ 。 $\text{T2}$ 这啥玩意儿？啥玩意儿？ 于是写了个超级无敌暴力 $\text{DFS}$ ，大样例直接爆炸，然后心态就没了。 $\text{T3}$ 第一眼：不就是把 $1$ 移动到 $1$ 节点点然后删边再移后面几个数吗。 码量略大，打了 $1$ 小时多。 然后我看了一眼样例，发现咋有点不对呢？ 思考了一分钟：我：？ 最后直接输出 $1 \text{~} n$ 滚粗了，真自闭了。 第一次 $s$ 组就这样退役了。 $\text{Day2}$ 根本没抱多少希望进考场。 $\text{T1}$ 这尼玛啥啊？ 搁那推了半小时 $\text{DP}$ 硬是啥也没推出来… 写个 $\text{DFS}$ 就走了。 $\text{T2}$ 一眼 $\text{DP}$ 题。 看到那个 $(\sum\limits^{k_{j+1}-1}_{i=k_j} a[i])^2$ 就想起了以前看到的斜率优化。 然而没学（悲 所以自闭了， $O(n^3)$ $\text{DP}$ 写完就走了。 $T3$ 想到关于每一个点是哪些树的重心，然而完全没思路。 写了个暴力，又写了个链的情况，结果跑大样例跑爆栈了， 然后就自闭了，结果把一个对的写成错的了。 真的退役了啊… 估分：$80+30+0+30+30+30=200$ 实际：$85+45+0+32+36+55=253$ $\text{PJ}$$\text{PJ}$ 多少还是让我恢复了点自信心… $\text{T1}$ ？ $\text{T2}$ 一开始直接 $\text{std::queue}$ ，后来发现不行。 $\text{STL}$ 搞得我连队列都差点不会写… $\text{T3}$ 一眼 $\text{DP}$ 题。 但是我尼玛不会 $\text{DP}$ 啊喂！ 然后调了 $1$ 个多小时，奇迹般的写出来了。 然而是 $O(T^2nm)$ …希望数据水一点（逃 $\text{T4}$ 仔细想了一下发现这样一个传递可以在一个地方反复横跳， 我：这不就跑遍 $\text{BFS}$ 最短路吗？ 仔细想下不对，要维护奇最短路和偶最短路，于是写了个 $\text{BFS}$ ，然而并不知道有没有正确性… 估分：$100+100+80+100=380$ 实际：$100+100+70+100=370$]]></content>
      <tags>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树状数组]]></title>
    <url>%2FBIT%2F</url>
    <content type="text"><![CDATA[树状数组是一种非常好打优美的数据结构，适用性十分广泛，而且常数非常小。 （自己花五分钟做的图） 下面蓝色的是我们的原数组，红色的即是我们的 $tree$ 数组。 树状数组的主旨是单点修改，查询前缀和，它的核心是 $\text{lowbit}$ 如 $\text{lowbit}((111)_2) = (001)_2,\text{lowbit}((110)_2) = (010)_2$ 即 $\text{lowbit}(7) = 1,\text{lowbit}(6) = 2$ 仔细观察原树，不难发现： $$tree[i]=\sum\limits_{j=i-lowbit(i)+1}^i a[j]$$ 于是我们所求的前缀和可以由 $tree$ 数组得出 $$sum[i] = tree[i] + tree[i - lowbit(i)] + tree[(i - lowbit(i)) - lowbit(i - lowbit(i))] …$$ 举个栗子： $$sum[(111)_2] = tree[(111)_2] + tree[(110)_2] + tree[(100)_2]$$ 这里需要仔细看几遍才能理解。 于是查询前缀和的操作就写好了。 1234567ll query(int p) // 查询前缀和&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 接下来考虑单点修改 当 $a[i]$ 改变的时候，所有包含 $i$ 这个位置的 $tree[j]$ 均要改变。 树状数组是一棵树！ 于是我们只需要找到 $tree[i]$ 的父亲，以及它的父亲的父亲爷爷…逐个更新 而再次仔细观察，我们惊奇的发现： 节点 $i$ 的父亲编号即为 $i + \text{lowbit}(i)$ ! 12345void add(int p, ll x) // 单点修改&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125; 单点修改 + 区间查询知道前缀和很容易计算出区间和。 区间 $[l,r]$ 的和即为 $sum[r] - sum[l-1]$ 。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125; 区间修改 + 单点查询这里我们要用到神奇的差分。 新建 $d$ 数组。 $$d[1]=a[1],d[i]=a[i]-a[i-1] (2\le i \le n)$$ 可以得出: $$a[p]=\sum\limits_{i=1}^{p}d[i]$$ 这是啥？不就是前缀和嘛！ 而当区间 $[l,r]$ 全部加上 $x$ 时，我们只需将 $d[l]$ 加上 $x$ ，$d[r + 1]$ 减去 $x$ 就好了。 123456789101112131415161718void add(int p, ll x)&#123; while (p &lt;= n) tree[p] += x, p += (p &amp; - p);&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; while (p) res += tree[p], p -= (p &amp; -p); return res; &#125; 区间修改 + 区间查询这是最常用的算法，第一次看到的时候真的惊艳到我了。 $$sum[p]=\sum\limits_{i=1}^p a[i] = \sum\limits_{i=1}^p \sum\limits_{j=1}^i d[j]$$ 仔细看，发现 $d[1]$ 加了 $p$ 次， $d[2]$ 加了 $p-1$ 次， $d[3]$ 加了 $p-2$ 次… 于是可以继续推： $$sum[p]=\sum\limits_{i=1}^p d[i] \times (p - i + 1)$$ $$=(p+1)\times\sum\limits_{i=1}^p d[i] - \sum\limits_{i=1}^p d[i] \times i$$ 于是我们只需要同时维护 $\sum\limits_{i=1}^p d[i]$ 与 $\sum\limits_{i=1}^p d[i] \times i$ 便可以了。 1234567891011121314151617181920212223void add(int p, ll x)&#123; for (int i = p; i &lt;= n; i += (i &amp; -i)) tree1[i] += x, tree2[i] += x * p;&#125;void range_add(int l, int r, ll x)&#123; add(l, x), add(r + 1, -x);&#125;ll query(int p)&#123; ll res = 0; for (int i = p; i; i -= (i &amp; -i)) res += (p + 1) * tree1[i] - tree2[i]; return res; &#125;ll range_query(int l, int r)&#123; return query(r) - query(l - 1);&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>树状数组</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站]]></title>
    <url>%2FSome_websites%2F</url>
    <content type="text"><![CDATA[列举一些我常用的网站。 顺便方便下我自己 颓废：$\text{B站}$ $\text{generals.io}$ $\text{NGA}$ $\text{sm.ms}$ (图床) $\text{Pixiv}$ $\text{OI}$:$\text{loj}$ 洛谷 $\text{codeforces}$ $\text{OI WIKI}$ 奇奇怪怪的东西:图论 几何 函数(或许应归在颓废一类？) 数列(做题找规律神器) $\LaTeX$ 打比赛专用百度翻译]]></content>
      <tags>
        <tag>OI</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loj-2590 NOIP2009 最优贸易]]></title>
    <url>%2Floj-2590%2F</url>
    <content type="text"><![CDATA[题目描述C 国有 $n$ 个大城市和 $m$ 条道路，每条道路连接这 $n$ 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 $m$ 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 $1$ 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 $n$ 个城市的标号从 $1\sim n$ ，阿龙决定从 $1$ 号城市出发，并最终在 $n$ 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 $n$ 个城市。 阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品——水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 假设 C 国有 $5$ 个大城市，城市的编号和道路连接情况如下图，单向箭头表示这条道路为单向通行，双向箭头表示这条道路为双向通行。 假设 $1\sim n$ 号城市的水晶球价格分别为 $4,3,5,6,1$ 。 阿龙可以选择如下一条线路：$1\rightarrow 2 \rightarrow 3 \rightarrow 5$，并在 $2$ 号城市以 $3$ 的价格买入水晶球，在 $3$ 号城市以 $5$ 的价格卖出水晶球，赚取的旅费数为 $2$ 。 阿龙也可以选择如下一条线路 $1\rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 5$，并在第 $1$ 次到达 $5$ 号城市时以 $1$ 的价格买入水晶球，在第 $2$ 次到达 $4$ 号城市时以 $6$ 的价格卖出水晶球，赚取的旅费数为 $5$ 。 现在给出 $n$ 个城市的水晶球价格， $m$ 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式输入第一行包含 $2$ 个正整数 $n$ 和 $m$，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 $n$ 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 $n$ 个城市的商品价格。 接下来 $m$ 行，每行有 $3$ 个正整数， $x,y,z$ ，每两个整数之间用一个空格隔开。如果 $z=1$，表示这条道路是城市 $x$ 到城市 $y$ 之间的单向道路；如果 $z=2$，表示这条道路为城市 $x$ 和城市 $y$ 之间的双向道路。 输出格式输出共 $1$ 行，包含 $1$ 个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 $0$ 。 样例12345675 54 3 5 6 11 2 11 4 12 3 23 5 14 5 2 样例输出15 数据范围与提示输入数据保证 $1$ 号城市可以到达 $n$ 号城市。 对于 $10\%$ 的数据，$n\le 6$； 对于 $30\%$ 的数据，$n\le 100$； 对于 $50\%$ 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市； 对于 $100\%$ 的数据，$1\le n\le 100,000$，$1\le m\le 500,000$，$1\le x, y \le n$，$1\le z\le 2$，各城市水晶球价格 $\le 100$。 loj链接 我已经很久很久很久没有水更过 $blog$ 了…… 最近暑假刚好有点空所以来写点题解。 这道题是一道很经典的分层图题目，虽然我看不出来 以前我可能写过这道题，但也是半懂不懂抄题解的，现在重写了一遍，感觉理解透彻了很多。 我们可以把这张图看成有相同的 $3$ 层，每一层中节点的连接方式如题所述，然后我们将第 $1$ 层的 $i$ 的节点与第 $2$ 层的相应节点连一条单向边，边权为 $-v[i]$ ，相当于从第 $1$ 层走到第 $2$ 层就是买了这个城市的水晶球，并且我们是走不回去的。 而第 $2$ 层与第 $3$ 层的连接同理，但是边权设为 $v[i]$ ，相当于我们卖掉了水晶球赚了 $v[i]$ 。 加上代码应该很容易理解。 12345678910111213141516171819202122for (int i = 1; i &lt;= m; i ++)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125;&#125;for (int i = 1; i &lt;= n; i ++)&#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]);&#125; 最后我们还要注意一个细节：我们是可以不买的，所以我们将每一层的 $n$ 节点都连向我们的最终节点，边权为 $0$, 我这里把 $0$ 号节点设为最终节点。 123add_edge(n, 0, 0);add_edge(2 * n, 0, 0);add_edge(3 * n, 0, 0); 最后我们观察：我们从 $1$ 号节点走到 $0$ 节点的最长路即是我们能获得的最大收益。 最后附上完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 5;const int M = 5e5 + 5;int n, m;int v[N];struct E&#123; int to, dis, next;&#125; edge[(M * 6) + (N &lt;&lt; 1)];int num_edge, head[N * 3];void add_edge(int from, int to, int dis)&#123; edge[++ num_edge] = (E)&#123;to, dis, head[from]&#125;; head[from] = num_edge;&#125;int dis[N * 3];bool vis[N * 3];struct point&#123; int u; bool friend operator &lt; (point a, point b) &#123; return dis[a.u] &lt; dis[b.u]; &#125;&#125;;std::priority_queue &lt;point&gt; q;void dijkstra(int s) // dijkstra万岁&#123; memset(dis, -127/3, sizeof dis); dis[s] = 0; vis[s] = true; q.push((point)&#123;s&#125;); while (!q.empty()) &#123; int u = q.top().u; q.pop(); vis[u] = false; for (int p = head[u]; p; p = edge[p].next) &#123; int v = edge[p].to, d = edge[p].dis; if (dis[v] &lt; dis[u] + d) &#123; dis[v] = dis[u] + d; if (!vis[v]) q.push((point)&#123;v&#125;), vis[v] = true; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++) scanf("%d", &amp;v[i]); int x, y, z; for (int i = 1; i &lt;= m; i ++) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (z == 1) &#123; for (int j = 1; j &lt;= 3; j ++) add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); &#125; else &#123; for (int j = 1; j &lt;= 3; j ++) &#123; add_edge(x + (j - 1) * n, y + (j - 1) * n, 0); add_edge(y + (j - 1) * n, x + (j - 1) * n, 0); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) &#123; add_edge(i, i + n, -v[i]); add_edge(i + n, i + 2 * n, v[i]); &#125; add_edge(n, 0, 0); add_edge(2 * n, 0, 0); add_edge(3 * n, 0, 0); dijkstra(1); printf("%d", dis[0]); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>OI</tag>
        <tag>loj</tag>
        <tag>最短路</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约瑟夫环]]></title>
    <url>%2FJosephus%2F</url>
    <content type="text"><![CDATA[$n$ 个人围成一圈,编号按顺序从 $0$ 到 $n-1$，从第一个人开始报数,数到 $m$ 的人出列,再由下一个人重新从 $1$ 开始报数,数到 $m$ 的人再出圈,……依次类推,直到所有的人都出圈,请输出最后一个出圈的人的编号。 今天稍微学习了一下这个玩意儿，感觉还挺神奇的。 第一种做法：暴力模拟这个我在这就不讲了，很容易就能写出来。 第二种做法：递推我们先考虑第一个出圈的人。 $m &lt; n$ 那么这个人的编号即为 $m - 1$ $m \ge n$ 那么这个人的编号即为 $(m - 1) \bmod n$ 综合一下，第一个出圈的人的编号绝对为 $(m - 1) \bmod n$ 方便起见，我们设 $k - 1 = (m - 1) \bmod n$ 。 于是这个圈就变成了这样： $k \quad k+1 \quad k+2 \quad … \quad n-2 \quad n-1 \quad 0 \quad 1 \quad 2 \quad … \quad k-3 \quad k-2$ 这个时候我们将这个圈转换一下，变成: $0 \quad 1 \quad 2 \quad … \quad n - 3 \quad n - 2$ 可以发现其实这个问题变成了 $n-1$ 个人报数的子问题。 所以我们只要将子问题的答案转换回去，就能知道最后那个人原来的编号。 稍微观察一下如何转换回去: $0 \Rightarrow k$ $1 \Rightarrow k + 1$ $…$ $n - k - 1 \Rightarrow n - 1$ $n - k \Rightarrow 0$ $n - k + 1 \Rightarrow 1$ $…$ $n - 3\Rightarrow k - 3$ $n - 2 \Rightarrow k - 2$ 不难发现 $x$ 转换回去后就变成了 $(x + k) \bmod n$ 我们设 $f[n]$ 表示 $n$ 个人报 $m$ 最后出圈人的编号。 显然，$f[1]=0$ 而根据我们刚才推的公式： $$f[n]=(f[n - 1]+k) \bmod n = (f[n - 1]+m \bmod n) \bmod n = (f[n - 1]+m ) \bmod n$$ 于是就可以愉快的递推了~ 代码1234567int Josephus(int n, int m)&#123; int res = 0; for (int i = 2; i &lt;= n; i ++) res = (res + m) % i; return res;&#125;]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1074 靶形数独]]></title>
    <url>%2FLuogu_P1074%2F</url>
    <content type="text"><![CDATA[题目描述小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 $Z$ 博士请教，$Z$ 博士拿出了他最近发明的“靶形数独”，作为这两个孩子比试的题目。 靶形数独的方格同普通数独一样，在 $9$ 格宽 $\times 9$ 格高的大九宫格中有 $9$ 个 $3$ 格宽 $\times 3$ 格高的小九宫格 $($ 用粗黑色线隔开的 $)$。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 $1$ 到 $9$ 的数字。每个数字在每个小九宫格内不能重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。$($ 如图 $)$ 上图具体的分值分布是：最里面一格 $($ 黄色区域 $)$ 为 $10$ 分，黄色区域外面的一圈 $($ 红色区域 $)$ 每个格子为 $9 $分，再外面一圈 $($ 蓝色区域 $)$ 每个格子为 $8$ 分，蓝色区域外面一圈 $($ 棕色区域 $)$ 每个格子为 $7$ 分，最外面一圈 $($ 白色区域 $)$ 每个格子为 $6$ 分，如上图所示。比赛的要求是：每个人必须完成一个给定的数独 $($ 每个给定数独可能有不同的填法 $)$，而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和 总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为 $2829$ 。游戏规定，将以总分数的高低决出胜负。 输入输出格式输入格式： 一共 $9$ 行。每行 $9$ 个整数 $($ 每个数都在 $0-9$ 的范围内 $)$ ，表示一个尚未填满的数独方格，未填的空格用“ $0$ ”表示。每两个数字之间用一个空格隔开。 输出格式： 输出共 $1$ 行。输出可以得到的靶形数独的最高分数。如果这个数独无解，则输出整数 $−1$ 。 输入输出样例输入样例#1： 1234567897 0 0 9 0 0 0 0 1 1 0 0 0 0 5 9 0 0 0 0 0 2 0 0 0 8 0 0 0 5 0 2 0 0 0 3 0 0 0 0 0 0 6 4 8 4 1 3 0 0 0 0 0 0 0 0 7 0 0 2 0 9 0 2 0 1 0 6 0 8 0 4 0 8 0 5 0 4 0 1 2 输出样例#1： 12829 输入样例#2： 1234567890 0 0 7 0 2 4 5 3 9 0 0 0 0 8 0 0 0 7 4 0 0 0 5 0 1 0 1 9 5 0 8 0 0 0 0 0 7 0 0 0 0 0 2 5 0 3 0 5 7 9 1 0 8 0 0 0 6 0 1 0 0 0 0 6 0 9 0 0 0 0 1 0 0 0 0 0 0 0 0 6 输出样例#2： 12852 说明【数据范围】 $40\%$ 的数据，数独中非 %0% 数的个数不少于 %30% 。 $80\%$ 的数据，数独中非 %0% 数的个数不少于 %26% 。 $100\%$ 的数据，数独中非 %0% 数的个数不少于 %24% 。 $NOIP\;2009$ 提高组 第四题 题解第一眼就可以看出这是个暴力 $dfs$ 的题目。 但是写起来还是很烦的…第一次写完调好兴奋地交上去 $T$ 了五个点，所以需要一些剪枝。 这个剪枝还是蛮好想的，我们把每一行按照 $0$ 的个数排序，从少到多填，明显会快很多。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;const int score[11][11]=&#123; &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 10, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 9, 9, 9, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 8, 8, 8, 8, 8, 7, 6, 0&#125;, &#123;0, 6, 7, 7, 7, 7, 7, 7, 7, 6, 0&#125;, &#123;0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0&#125;, &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;,&#125;;struct h&#123; int data, i; bool operator &lt; (const h &amp;a) const &#123; if(data != a.data) return data &lt; a.data; else return i &lt; a.i; &#125;&#125;tot0[11];int Map[11][11], ans = -1, next[11];bool x[11][11], y[11][11], z[11][11];inline int belong(int a, int b)&#123; return (a - 1) / 3 * 3 + (b - 1) / 3 + 1;&#125;inline void dfs(int a, int b, int s)&#123; if(a == 0) &#123; ans = max(ans, s); return; &#125; if(Map[a][b]) &#123; if(b == 9) &#123; dfs(next[a], 1, s); &#125; else &#123; dfs(a, b + 1, s); &#125; return; &#125; for(register int i = 1; i &lt;= 9; i ++) &#123; if(!x[a][i] &amp;&amp; !y[b][i] &amp;&amp; !z[ belong(a, b) ][i]) &#123; Map[a][b] = i; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = true; if(b == 9) &#123; dfs(next[a], 1, s + score[a][b] * i); &#125; else &#123; dfs(a, b + 1, s + score[a][b] * i); &#125; Map[a][b] = 0; x[a][i] = y[b][i] = z[ belong(a, b) ][i] = false; &#125; &#125; return;&#125;int inline read()&#123; int x = 0, flag = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9')&#123;if(ch == '-')flag = -1; ch = getchar();&#125; while(ch &gt;= '0' &amp;&amp; ch &lt;= '9')&#123;x = x * 10 + ch - '0'; ch = getchar();&#125; return x * flag;&#125;int main()&#123; int tmp = 0; for(register int i = 1; i &lt;= 9; i ++) &#123; tot0[i].i = i; for(register int j = 1; j &lt;= 9; j ++) &#123; Map[i][j] = read(); if(Map[i][j] == 0) &#123; tot0[i].data ++; continue; &#125; x[i][ Map[i][j] ] = true; y[j][ Map[i][j] ] = true; z[ belong(i, j) ][ Map[i][j] ] = true; tmp += Map[i][j] * score[i][j]; &#125; &#125; sort(tot0 + 1, tot0 + 9 + 1); for(register int i = 1; i &lt;= 9; i ++) next[tot0[i].i] = tot0[i + 1].i; dfs(tot0[1].i, 1, tmp); printf("%d", ans); return 0;&#125; 至于为什么码风跟我现在不太一样是因为这是以前写的现在来水篇博客]]></content>
      <tags>
        <tag>dfs</tag>
        <tag>剪枝</tag>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妹调玩后感]]></title>
    <url>%2FSister_training_diary%2F</url>
    <content type="text"><![CDATA[此文章已被加密，请输入密码。 Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>二次元</tag>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1191 矩形]]></title>
    <url>%2FLuogu_P1191%2F</url>
    <content type="text"><![CDATA[题目描述给出一个 $n \times n$ 的矩阵，矩阵中，有些格子被染成白色，有些格子被染成黑色，现要求矩阵中白色矩形的数量。 输入输出格式输入格式： 第一行，一个整数 $n$ ，表示矩形的大小。 接下来 $n$ 行，每行 $n$ 个字符，这些字符为“$\text{W}$”或“$\text{B}$”。其中“$\text{W}$”表示白格，“$\text{B}$”表示黑格。 输出格式： 一个正整数，为白色矩形数量。 输入输出样例输入样例#1： 123454WWBWBBWBWBWWWBWB 输出样例#1： 115 说明对于 $30\%$ 的数据，$n \leq 50$ ； 对于 $100\%$ 的数据，$n \leq 150$ ； 题解写这道题的题解主要还是为了巩固一下二维前缀和。 为啥这题能用二维前缀和解呢，因为我们可以把这个矩阵看成一个 $01$ 矩阵。 $$\begin{matrix}\text{W}&amp;\text{W}&amp;\text{B}&amp;\text{W}\\\text{B}&amp;\text{B}&amp;\text{W}&amp;\text{B}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{W}\\\text{W}&amp;\text{B}&amp;\text{W}&amp;\text{B}\end{matrix} \quad \Rightarrow \quad \begin{matrix}0&amp;0&amp;1&amp;0\\1&amp;1&amp;0&amp;1\\0&amp;1&amp;0&amp;0\\0&amp;1&amp;0&amp;1\end{matrix}$$ 很明显的可以看出，若一个矩阵为白色矩阵，则其包含的数之和为 $0$ 。所以我们可以暴力 $O(n^4)$ 枚举每个矩阵判断。 然而这题能用二维前缀和做的根本原因是数据太水 那么接下来就是二维前缀和的部分。 $sum[n][m]$ 表示左上角为 $(1,1)$ 右下角为 $(n,m)$ 的这个子矩阵中所有数的和。即： $$sum[n][m] = \sum\limits_{i = 1}^{n} \sum\limits_{j = 1}^{m}map[i][j]$$ 易得： $$sum[n][m] = sum [n - 1][m] + sum[n][m - 1] - sum[n - 1][m - 1] + map[n][m]$$ 这个画张图看一看就知道了。 如果想得到左上角为 $(i,j)$ 右下角为 $(k,l)$ 的这个子矩阵中所有数的和： $$ans = sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1]$$ 这个也可以画张图推出来。 于是我们就可以水掉一道蓝题了 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 150;int n, ans;int map[N + 5][N + 5];int sum[N + 5][N + 5];void pre()&#123; for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) sum[i][j] = sum [i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + map[i][j];&#125;int main()&#123; scanf("%d", &amp;n); char c; for (int i = 1; i &lt;= n; i ++) &#123; for (int j = 1; j &lt;= n; j ++) &#123; std::cin &gt;&gt; c; //输入有坑，可能有空格 map[i][j] = (c == 'B'); &#125; &#125; pre(); for (int i = 1; i &lt;= n; i ++) for (int j = 1; j &lt;= n; j ++) for (int k = i; k &lt;= n; k ++) for (int l = j; l &lt;= n; l ++) if (sum[k][l] - sum[i - 1][l] - sum[k][j - 1] + sum[i - 1][j - 1] == 0) ans ++; printf("%d", ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>二维前缀和</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随机动漫图片]]></title>
    <url>%2FRandom_anime_picture%2F</url>
    <content type="text"><![CDATA[无聊的可以来刷一刷 刷出来se图也不能怪我，毕竟是随机的]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P4931 情侣？给我烧了！（加强版）]]></title>
    <url>%2FLuogu_P4931%2F</url>
    <content type="text"><![CDATA[题目描述有 $n$ 对情侣来到电影院观看电影。在电影院，恰好留有 $n$ 排座位，每排包含 $2$ 个座位，共 $2\times n$ 个座位。 现在，每个人将会随机坐在某一个位置上，且恰好将这 $2\times n$ 个座位坐满。 如果一对情侣坐在了同一排的座位上，那么我们称这对情侣是和睦的。 你的任务是求出共有多少种不同的就坐方案满足恰好有 $k$ 对情侣是和睦的。 两种就坐方案不同当且仅当存在一个人在两种方案中坐在了不同的位置。不难发现，在没有任何限制条件的情况下，每个人任意就坐一共会有 $(2n)!$ 种不同的就坐方案。 输入输出格式输入格式： 输入包含多组数据。 输入的第一行包含一个正整数 $T$ ，表示数据组数。 接下来 $T$ 行，每行包含两个非负整数 $n,k$ ，其意义见题目描述。 输出格式： 对于每组输入数据，输出一行，表示对应的就坐方案数。由于结果可能较大，因此输出对 $998244353$ 取模的结果。 输入输出样例输入样例#1： 12345651 12 02 22333 6662333333 1000000 输出样例#1： 123452168798775522300377435 说明对于 $10\%$ 的数据，满足 $1 \leq T \leq 10,1 \leq n \leq 5$ 对于 $40\%$ 的数据，满足 $1 \leq n \leq 3 \times 10^3$ 对于 $100\%$ 的数据，满足 $1 \leq T \leq 2 \times 10^5,1 \leq n \leq 5 \times 10^6, 0 \leq k \leq n$ 题解这题看上去很难，仔细思考一下的话也不是很复杂。 首先我们要在 $n$ 个情侣中选出 $k$ 对。 $C_n^k$ 然后在在 $n$ 排座位中选出 $k$ 排给这 $k$ 对情侣坐。 $k$ 排可以任意排列。 $C_n^k \times k!=A_n^k$ 每排的 $2$ 个人可以换位置。 $2^k$ 接下来就是最重要的错排部分。 我们令 $f[x]$ 为 $x$ 对情侣不坐在一起的方案数。 很明显第一排 $2$ 个不是情侣的人的坐法是 $2n \times (2n-2)$ 接下来我们考虑第一排坐的 $2$ 个人的情侣 坐在一起，也就是在剩下 $n-1$ 排选一排，转换为剩下 $n-2$ 排情侣需要错排的子问题。注意这两个人是可以换着坐的。 $2 \times (n-1) \times f(n-2)$ 不坐在一起，也就是可以把他们两个看成一对情侣。转换为剩下 $n-1$ 排需要错排的子问题。 $f[n-1]$ 那么我们 $f$ 的公式也就出来了。 $$f[n]=2n \times (2n-2) \times (f[n-1] + 2 \times (n-1) \times f[n-2])$$ 于是结合上面的式子，就可以得到： $$ans=C_n^k \times A_n^k \times 2^k \times f[n-k]$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;const int p = 998244353;const int N = 5e6;typedef long long ll; int T;ll n, k;ll fac[N + 5], inv_fac[N + 5];ll f[N + 5];ll C(ll n, ll m) // C(n, m) = n! / [(n - m)! * m!] &#123; if (n &lt; m) return 0; return fac[n] * inv_fac[n - m] % p * inv_fac[m] % p;&#125;ll A(ll n, ll m)&#123; return fac[n] * inv_fac[n - m] % p;&#125;ll qpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;void pre() // 处理乘法逆元 &amp; 递推f&#123; fac[0] = 1; for (register int i = 1; i &lt;= N; i ++) fac[i] = fac[i - 1] * i % p; inv_fac[0] = inv_fac[1] = 1; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p; for (register int i = 2; i &lt;= N; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; f[0] = 1, f[1] = 0; for (register int i = 2; i &lt;= N; i ++) f[i] = ((((i - 1) &lt;&lt; 1) % p * f[i - 2] % p + f[i - 1]) % p) * 4 % p * i % p * (i - 1) % p;&#125;int main()&#123; pre(); scanf("%d", &amp;T); while (T --) &#123; scanf("%lld%lld", &amp;n, &amp;k); ll ans = C(n, k) % p; ans = ans * A(n, k) % p; ans = ans * qpow((ll)2, k) % p; ans = ans * f[n - k] % p; printf("%lld\n", ans); &#125;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习]]></title>
    <url>%2FNumber_theory%2F</url>
    <content type="text"><![CDATA[这里会简单记录我学习的基础数论。这里的证明可能都不大严谨，仅供参考。 欧几里得算法如果我们想要求 $gcd(a,b)(a\text{与}b$的最大公因数$)$ ，最简单的方式便是枚举，但这太慢了。 于是我们有了我们的辗转相除法，也就是欧几里得算法，它可以在 $O(log(a+b))$ 的复杂度内求出 $gcd(a,b)$ 。 $$\forall a,b \in \mathbb{N}, b \not = 0,\quad gcd(a,b) = gcd(b,a\bmod b)$$ 证明$a &lt; b$ 时 $gcd(b,a \bmod b)=gcd(b,a)=gcd(a,b)$ $a \geq b$ 时 设 $r=a\bmod b$ ，$d$ 为 $a,\,b$ 任意一个公约数。 则 $a=kb+r,\;a\equiv b\equiv 0 \pmod{d}$ $\therefore a-kb\equiv r \equiv 0 \pmod{d}$ $\therefore d\,|\,b,\,d\,|\,a\bmod b$ 所以 $a,b$ 和 $b, a \bmod b$ 的公约数集合是相同的，它们的最大公约数必然也相等。 $\therefore gcd(a,b)=gcd(b, a \bmod b)$ 要注意边界：$b = 0$ 时，$gcd(a,b) = a$ 代码1234int gcd(int a, int b)&#123; return !b ? a : gcd(b, a % b);&#125; 拓展欧几里得拓展欧几里得用于在已知自然数 $a,b$ ，求解 $ax+by=gcd(a,b)$ 的 $(x,y)$ 的整数解时。 $ax+by=gcd(a,b)$ $=gcd(b,a\bmod b)$ $\Rightarrow bx+(a\bmod b)\,y$ $=bx+(a-\lfloor\dfrac{a}{b}\rfloor\,b)\,y$ $=ay+b\,(x-\lfloor\dfrac{a}{b}\rfloor\,y)$ 所以 $x$ 变成了 $y$ ， $y$ 变成了 $x-\lfloor\dfrac{a}{b}\rfloor\,y$ 于是我们可以愉快地递归求解。这里也需要注意边界： $b=0$ 时，$a=1,\,ax+by=1$ ，因此 $x=1,y=0$ 。 代码1234567void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125; 乘法逆元当我们想要求形如 $\dfrac{a}{b} \bmod p$ 的值的时候，就需要用到乘法逆元。 逆元定义 若 $a \times x \equiv 1 \pmod{b}$ ，且 $a \perp b$ ，则我们定义 $x$ 为 $a$ 的逆元 所以对于 $\dfrac{a}{b} \bmod p$ ，我们就可以求出 $b$ 在 $\bmod p$ 意义下的逆元 $x$ ，原分数的值便可以表示为 $a \times x \bmod{p}$ 求解逆元的方法拓展欧几里得这个我们刚刚讲过。这种做法就是将 $a \times x \equiv 1 \pmod {b}$ 转换为 $a \times x + b \times y = 1 $ ，然后求解。 代码1234567891011121314void exgcd(int a, int b, int &amp;x, int &amp;y)&#123; if (!b) x = 1, y = 0; else exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main()&#123; int x, y; exgcd(a, p, x, y) x = (x + p) % p; // x 就是 a 在 mod p 意义下的逆元&#125; 快速幂 费马小定理：若 $p$ 为质数， $a$ 为正整数， 且 $a \perp p$ ，则有 $a^{p-1} \equiv 1 \pmod{p}$ 所以我们可以进行推导： $a \times x \equiv 1 \equiv a^{p-1} \pmod{p}$ $x \equiv a^{p-2} \pmod{p}$ 因此我们可以用快速幂求出 $a^{p-2} \pmod{p}$ 的值，这个数就是 $a$ 的逆元了。 代码1234567891011121314151617int qpow(int a, int b, int p)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = res * a % p; a = a * a % p; b &gt;&gt;= 1; &#125; return res;&#125;int main()&#123; int x = qpow(a, p - 2, p);&#125; 线性递推这个可以用来求一连串数对于$\bmod p$ 的逆元。 首先我们知道 $1^{-1} \equiv 1 \pmod{p}$ 设 $k = \lfloor\dfrac{p}{i}\rfloor,\,r = p \bmod{i}$ $k \times i + r \equiv 0 \pmod{p}$ 两边同时乘上 $i^{-1},\,r^{-1}$ $k \times r^{-1} + i^{-1} \equiv 0 \pmod{p}$ $i^{-1} \equiv -k \times r^{-1} \pmod{p}$ $i^{-1} \equiv -\lfloor\dfrac{p}{i}\rfloor \times (p \bmod{i})^{-1} \pmod{p}$ 于是我们可以从前推出当前的逆元。 代码123inv[1] = 1;for (int i = 2; i &lt; p; i ++) inv[i] = (p - p / i) * inv[p % i] % p; 阶乘逆元这个一般在求组合数的值得时候用到。比较简单，就一笔带过了。 一般求 $1\sim n$ 的阶乘逆元有两种方法： 先求出 $1\sim n$ 每个数的逆元，然后正推： $(i!)^{-1} \equiv (i - 1)! ^ {-1} \times i ^ {-1} \pmod{p}$ 代码12345inv_fac[1] = 1;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = (p - p / i) * inv_fac[p % i] % p;for (int i = 2; i &lt;= n; i ++) inv_fac[i] = inv_fac[i] * inv_fac[i - 1] % p; 先求出 $n$ 的阶乘逆元，然后倒推： $(i!)^{-1} \equiv (i + 1)! ^ {-1} \times (i + 1) \pmod{p}$ 代码123inv_fac[n] = inv(fac[n]);for (int i = n - 1; i &gt;= 1; i --) inv_fac[i] = inv_fac[i + 1] * (i + 1) % p; 欧拉函数$$\varphi(n) = \sum\limits_{i=1}^{n-1} [n \perp i]$$ 通俗的来讲， $\varphi(n)$ 表示小于 $n$ 的正整数当中有多少个数与 $n$ 互质，特别的，我们规定 $\varphi (1)=1$ 这里我们有一个欧拉函数的计算公式； $$\varphi(n) = n \times \prod\limits_{p\,|\,n}(1-\dfrac{1}{p})$$ 证明先咕一会儿，有时间再写。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[倍增求 $LCA$]]></title>
    <url>%2FLCA%2F</url>
    <content type="text"><![CDATA[好久没有更新了，来写 $(shui)$ 一篇 $LCA$ 的博客。 以前觉得 $LCA$ $($最近公共祖先$)$是神仙学的东西， $fj$ 讲的时候我也贼吉尔懵逼，现在看来也没有那么难。 当我们想求 $LCA(x,y)$ 时，如果一格一格跳直到跳到同一位置，不知道会跳到哪一年去，于是我们用到了一个神奇的东西：倍增。 众所周知任何数都可以用二进制，所以我们可以每次跳 $2^i$ 步，大大加快效率。这里我们用 $fa[i][j]$ 代表第 $i$ 号节点往上跳 $2^j$ 步到达的位置。所以很容易推出来: $fa[i][j]=fa[fa[i][j-1]][j-1]$ 。 然后跳的具体过程看代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define For(a,x,y) for(int a=x;a&lt;=y;a++)#define Bac(a,x,y) for(int a=x;a&gt;=y;a--)using namespace std;const int N=5e5;const int M=5e5;int n,m,s;int depth[N+5],fa[N+5][25];int lg[N+5];struct Edge&#123; int to,next;&#125;edge[2*M+5];int num_edge,head[N+5];void add_edge(int from,int to)&#123; edge[++num_edge].next=head[from]; edge[num_edge].to=to; head[from]=num_edge;&#125;int lca(int x,int y)&#123; if(depth[y]&lt;depth[x]) swap(x,y); while(depth[x]&lt;depth[y]) y=fa[y][lg[depth[y]-depth[x]]];//先跳到同一深度 if(x==y)return x; Bac(i,lg[depth[x]],0) &#123; if(fa[x][i]!=fa[y][i])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果相等就代表跳多了 x=fa[x][i],y=fa[y][i]; &#125; return fa[x][0];&#125;void dfs(int x,int fat)&#123; depth[x]=depth[fat]+1; fa[x][0]=fat; for(int i=1;(1&lt;&lt;i)&lt;=depth[x];i++) fa[x][i]=fa[fa[x][i-1]][i-1]; for(int p=head[x];p;p=edge[p].next) if(edge[p].to!=fat)dfs(edge[p].to,x);&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;s); int u,v; For(i,1,n-1) &#123; scanf("%d%d",&amp;u,&amp;v); add_edge(u,v); add_edge(v,u); &#125; lg[0]=-1; For(i,1,n) lg[i]=lg[i/2]+1;//优化，预处理log dfs(s,0); int a,b; For(i,1,m) &#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",lca(a,b)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>LCA</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3787 冰精冻西瓜]]></title>
    <url>%2FLuogu_P3787%2F</url>
    <content type="text"><![CDATA[题目背景盛夏，冰之妖精琪露诺发现了一大片西瓜地，终于可以吃到美味的冻西瓜啦。 题目描述琪露诺是拥有操纵冷气程度的能力的妖精，一天她发现了一片西瓜地。这里有 $n$ 个西瓜，由 $n-1$ 条西瓜蔓连接，形成一个有根树，琪露诺想要把它们冷冻起来慢慢吃。 这些西瓜蔓具有神奇的性质，可以将经过它的冷气的寒冷程度放大或缩小，每条西瓜蔓放大/缩小冷气寒冷程度的能力值为 $W_i$ ，表示冷气经过它后，寒冷程度值 $x$ 会变为 $x\times w_i$ 。每个西瓜也有一个寒冷程度值，炎热的夏日，所有西瓜的寒冷程度值初始都为 $0$ 。 琪露诺会做出两种动作: ①.对着西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。这股冷气顺着西瓜蔓向“西瓜树”的叶子节点蔓延，冷气的寒冷程度会按照上面的规则变化。遇到一个西瓜连了多条西瓜蔓时，每条叶子节点方向的西瓜蔓均会获得与原先寒冷程度相等的冷气。途径的所有西瓜的寒冷程度值都会加上冷气的寒冷程度值。 ⑨.向你询问西瓜 $i$ 的寒冷程度值是多少。 等等，为什么会有⑨？因为笨蛋琪露诺自己也会忘记放了多少冰呢。 所以，帮她计算的任务就这么交给你啦。 输入输出格式输入格式： 第一行一个整数 $n$ ,表示西瓜的数量。 西瓜编号为 $1\text{ ~ }n$ ， $1$ 为这棵“西瓜树”的根。 接下来 $n-1$ 行，每行有两个整数 $u,v$ 和一个实数 $w$ ，表示西瓜 $u$ 和西瓜 $v$ 之间连接有一条藤蔓，它放大/缩小冷气寒冷程度的能力值为 $w$ 。 接下来一行一个整数 $m$ ，表示操作的数量。 接下来 $m$ 行，每行两个或三个整数。 第一个数只能是 $1$ 或 $9$ 。 如果为 $1$ ，接下来一个整数 $i$ 和一个实数 $x$ ，表示对西瓜 $i$ 放出寒冷程度为 $x$ 的冷气。 如果为 $9$ ，接下来一个整数 $i$ ，表示询问编号为 $i$ 的西瓜的寒冷程度值。 输出格式： 对于每个操作⑨，输出一行一个实数，表示对应西瓜的寒冷程度值。 输入输出样例输入样例#1： 123456789101112131441 2 1.000000002 3 0.000000003 4 1.0000010191 1 3.000000009 29 31 2 1.428560319 49 21 3 4.233333339 29 4 输出样例#1： 1234563.000000000.000000000.000000004.428560314.428560314.23333761 说明子任务可能出现如下的特殊性质: “西瓜树”退化为一条链 输入数据中的实数均保留 $8$ 位小数，选手的答案被判作正确当且仅当输出与标准答案误差不超过 $10^-7$ 。请特别注意浮点数精度问题。 实际数据中，冷气的寒冷程度 $x$ 的范围为 $[-0.1,0.1]$ $($样例中的冷气寒冷程度的范围为 $[1,5]$ $)$ 题解这题还蛮毒瘤的，我交了 $20$ 次才过…$($其实因为我线段树打炸了没发现$)$ 一开始看到这题想到暴力，看到数据立马去世。 于是我想到了线段树。 因为有些边是 $0$ ，我们就把这棵树切成很多棵树遍历。 然后我是这么想的，先把树遍历一下，预处理出每个点到其树根的所有 $w$ 之积 $w[i]$ 。然后假设所有冷气都是由根传来的，那么在第 $i$ 个结点释放 $x$ 的冷气就相当于在根节点释放 $x/w[i]$ 的冷气。 然后接下来只需要区间更新就行了。这里我用了线段树。区间具体是怎么划分的呢？每个点所管辖的区间即是他所有子节点及其本身。我们在遍历的时候可以把 $i$ 所管辖的区间的最后一个数 $right[i]$ 求出来。 查询其实就是单点查询，将该节点的值乘上该节点的 $w[i]$ 就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define N 1000000#define ld long doubleusing namespace std;struct Edge&#123; int from,to,next; ld dis;&#125;edge[N+5];int n,m,num_edge,num_node,num_root;int head[N+5],node[N+5],root[N+5],r[N+5];ld w[N+5],addsum[4*N+5],tree[4*N+5];bool vis[N+5];void add_edge(int from,int to,ld dis)&#123; edge[++num_edge].next=head[from]; edge[num_edge].from=from; edge[num_edge].to=to; edge[num_edge].dis=dis; head[from]=num_edge;&#125;void dfs(int i,ld dis)&#123; if(vis[i])return; vis[i]=true; node[i]=++num_node; w[i]=dis; int p=head[i]; while(p)&#123; if(!edge[p].dis) &#123;if(!vis[edge[p].to])root[++num_root]=edge[p].to;&#125; else dfs(edge[p].to,dis*edge[p].dis); p=edge[p].next; &#125; r[i]=num_node;&#125;void pushdown(int k)&#123; if(!addsum[k])return; addsum[k&lt;&lt;1]+=addsum[k]; addsum[k&lt;&lt;1|1]+=addsum[k]; tree[k&lt;&lt;1]+=addsum[k]; tree[k&lt;&lt;1|1]+=addsum[k]; addsum[k]=0; &#125;ld query(int k,int l,int r,int x)&#123; pushdown(k); if(l==r&amp;&amp;x==l)return tree[k]; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid)return query(k&lt;&lt;1,l,mid,x); else return query(k&lt;&lt;1|1,mid+1,r,x);&#125;void add(int k,int l,int r,int x,int y,ld v)&#123; if(l&gt;y||r&lt;x)return; pushdown(k); if(l&gt;=x&amp;&amp;r&lt;=y)&#123; addsum[k]+=v; tree[k]+=v; return; &#125; int mid=(l+r)&gt;&gt;1; if(mid&gt;=x)add(k&lt;&lt;1,l,mid,x,y,v); if(mid&lt;y)add(k&lt;&lt;1|1,mid+1,r,x,y,v);&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;n;i++)&#123; int u,v; ld d; scanf("%d%d%Lf",&amp;u,&amp;v,&amp;d); add_edge(u,v,d); add_edge(v,u,d); &#125; root[++num_root]=1; for(int i=1;i&lt;=num_root;i++)dfs(root[i],1); scanf("%d",&amp;m); for(int i=1;i&lt;=m;i++)&#123; int k,I; ld x; scanf("%d",&amp;k); if(k==1)&#123; scanf("%d%Lf",&amp;I,&amp;x); add(1,1,n,node[I],r[I],x/w[I]); &#125; else&#123; scanf("%d",&amp;I); printf("%.8Lf\n",query(1,1,n,node[I])*w[I]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树]]></title>
    <url>%2FSegment_tree%2F</url>
    <content type="text"><![CDATA[最近在学线段树。 线段树具有树的结构特征，对于每一个子节点而言，都表示整个序列中的一段子区间；对于每个叶子节点而言，都表示序列中的单个元素信息；子节点不断向自己的父亲节点传递信息，而父节点存储的信息则是他的每一个子节点信息的整合。因此线段树可以处理很多符合结合律的操作。 下面是区间修改区间求值的程序$($我懒得打单点修改区间求值和区间修改单调求值了23333$)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define N 100000#define ll long longusing namespace std;ll n,m,l,r,v,k;ll a[N+5],sum[4*N+5],add[4*N+5];void build(ll k,ll l,ll r)&#123; if(l==r)&#123; sum[k]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;void Add(ll k,ll l,ll r,ll v)&#123; add[k]+=v; sum[k]+=v*(r-l+1);&#125;void pushdown(ll k,ll l,ll r,ll mid)&#123; if(!add[k])return; Add(k&lt;&lt;1,l,mid,add[k]); Add(k&lt;&lt;1|1,mid+1,r,add[k]); add[k]=0;&#125;ll query_sum(ll k,ll l,ll r,ll x,ll y)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)return sum[k]; ll mid=(l+r)&gt;&gt;1,res=0; pushdown(k,l,r,mid); if(x&lt;=mid)res+=query_sum(k&lt;&lt;1,l,mid,x,y); if(y&gt;mid)res+=query_sum(k&lt;&lt;1|1,mid+1,r,x,y); return res;&#125;void change(ll k,ll l,ll r,ll x,ll y,ll v)&#123; if(l&gt;=x&amp;&amp;r&lt;=y)&#123; Add(k,l,r,v); return; &#125; ll mid=(l+r)&gt;&gt;1; pushdown(k,l,r,mid); if(x&lt;=mid)change(k&lt;&lt;1,l,mid,x,y,v); if(y&gt;mid)change(k&lt;&lt;1|1,mid+1,r,x,y,v); sum[k]=sum[k&lt;&lt;1]+sum[k&lt;&lt;1|1];&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%lld",&amp;a[i]); build(1,1,n); for(int i=1;i&lt;=m;i++)&#123; scanf("%lld",&amp;k); switch(k)&#123; case 1:&#123; scanf("%lld%lld%lld",&amp;l,&amp;r,&amp;v); change(1,1,n,l,r,v); break; &#125; case 2:&#123; scanf("%lld%lld",&amp;l,&amp;r); printf("%lld\n",query_sum(1,1,n,l,r)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>OI</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1195 口袋的天空]]></title>
    <url>%2FLuogu_P1195%2F</url>
    <content type="text"><![CDATA[题目背景小杉坐在教室里，透过口袋一样的窗户看口袋一样的天空。 有很多云飘在那里，看起来很漂亮，小杉想摘下那样美的几朵云，做成棉花糖。 题目描述给你云朵的个数 $N$ ，再给你 $M$ 个关系，表示哪些云朵可以连在一起。 现在小杉要把所有云朵连成 $K$ 个棉花糖，一个棉花糖最少要用掉一朵云，小杉想知道他怎么连，花费的代价最小。 输入输出格式输入格式： 每组测试数据的第一行有三个数 $N,M,K(1≤N≤1000,1≤M≤10000,1≤K≤10)$ 。 接下来M个数每行三个数X,Y,L表示X云和Y云可以通过L的代价连在一起。$(1\le X,Y\le N,0\le L\le 10000)$ $30%$ 的数据 $N\le 100,M\le 1000$ 输出格式： 对每组数据输出一行，仅有一个整数，表示最小的代价。 如果怎么连都连不出 $K$ 个棉花糖，请输出’ $No Answer$ ‘。 输入输出样例输入样例#1： 123 1 21 2 1 输出样例#1： 11 题解怎么会有这么裸的模板题。。。还是绿题。。。 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;int n,m,k,father[1005],t,ans;struct Edge&#123; int x,y,dis;&#125;edge[10005];bool cmp(Edge x,Edge y)&#123; return x.dis&lt;y.dis;&#125;int find(int x)&#123; if(father[x]!=x)father[x]=find(father[x]); return father[x];&#125;void unionn(int x,int y,int dis)&#123; int a=find(x),b=find(y); father[a]=b; t--; ans+=dis;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); if(m&lt;n-k)&#123; printf("No Answer"); return 0; &#125; t=n; for(int i=1;i&lt;=m;i++) scanf("%d%d%d",&amp;edge[i].x,&amp;edge[i].y,&amp;edge[i].dis); sort(edge+1,edge+m+1,cmp); for(int i=1;i&lt;=n;i++)father[i]=i; for(int i=1;i&lt;=m;i++)&#123; if(find(edge[i].x)!=find(edge[i].y))unionn(edge[i].x,edge[i].y,edge[i].dis); if(t==k)break; &#125; printf("%d",ans); return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆合集]]></title>
    <url>%2FWife%2F</url>
    <content type="text"><![CDATA[你可以选择无视这个文章 老婆列表 图片 我想说 御坂美琴 你指尖… $\text{Rachel·Gardner}$ Ray快来打我我爱她 小鸟游六花 邪王真眼赛高！ 桐崎千棘 自古金发多傲娇 小野寺小咲 …渣乐 休比 休比太太太太太太可爱了 $\text{Ruby Rose}$ 我也想要把新月玫瑰Ruby帅炸！ $\text{Weiss Schnee}$ 听说直男克傲娇 $\text{Blake Belladonna}$ 我爱猫娘！ $\text{Yang Xiao Long}$ 杨姐嫁我 筒隐月子 面瘫什么的 斯巴拉西 牧濑红莉栖 $\text{El psy congroo}$ 比企谷小町 就算不结婚，有妹妹不就好了吗？——大老师 雪之下雪乃 $\text{QAQ}$ 雪乃太好看了 由比滨结衣 团子真的好可爱 戸塚彩加 但是，是男的。 川崎沙希 蓝发傲娇真好 一色彩羽 喜闻乐见的小妖精 古莉 虽然是个 $baka$ 但是我喜欢图是真的少啊 蓝野亚久亚 蓝发 $+$ 兄控妹妹我轩你啊 $($ 去世 图怎么可以少成这样… 四糸乃 大哥哥这里有糖吃 鸢一折纸 折纸大师，受我一拜 八舞耶倶矢 幸运 $text{E }($ 大雾 利姆鲁 利姆鲁对我一心一意 $\text{x}$毛 $\text{x}$毛天下第一 格蕾 $\lceil\mathfrak{Grave}\text{ }\mathfrak{for}\text{ }\mathfrak{you}\rfloor$ 镰刀很戳我xp呢 蓝毒 蓝毒可可爱爱 $2019.7.17$ 注:我还真是 $sb$ 连这都能列个表而且还不全]]></content>
      <tags>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2141 珠心算测验]]></title>
    <url>%2FLuogu_P2141%2F</url>
    <content type="text"><![CDATA[题目描述珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。 某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？ 最近老师出了一些测验题，请你帮忙求出答案。 $($ 本题目为 $2014NOIP$ 普及 $T1)$ 输入输出格式输入格式： 共两行，第一行包含一个整数 $n$ ，表示测试题中给出的正整数个数。 第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。 输出格式： 一个整数，表示测验题答案。 输入输出样例输入样例#1： 1241 2 3 4 输出样例#1： 12 说明【样例说明】 由 $1+2=3$,$1+3=4$ ，故满足测试要求的答案为 $2$ 。 注意，加数和被加数必须是集合中的两个不同的数。 【数据说明】 对于 $100%$ 的数据， $3\leq n\leq 100$ ，测验题给出的正整数大小不超过 $10000$ 。 题解本蒟蒻的第一个题解。。。 这道题其实很简单。。。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int a[101],n,ans;bool t[20001];//t[i]表示i这个数是否能由集合中的两个数相加而成int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) t[a[i]+a[j]]=true; for(int i=1;i&lt;=n;i++) ans+=t[a[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
        <tag>OI</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[喜报！]]></title>
    <url>%2FFirst_article%2F</url>
    <content type="text"><![CDATA[在本蒟蒻的不懈努力下…这个博客也算是勉强搭成了，花了好久…感谢网上各位大佬帮助 $QAQ$]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
